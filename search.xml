<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>历史博客归档</title>
    <url>/2018/12/22/history-blog/</url>
    <content><![CDATA[<h2 id="CSDN-BLOG"><a href="#CSDN-BLOG" class="headerlink" title="CSDN BLOG"></a><a href="https://blog.csdn.net/solotzg">CSDN BLOG</a></h2><ul>
<li><a href="https://blog.csdn.net/solotzg/article/details/47360025">原创：  论文注解《Query Languages for Graph Databases》graph数据库查询语法（III）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/47357183">原创：  论文注解《Query Languages for Graph Databases》graph数据库查询语法（II）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/47204595">原创：  论文注解《Query Languages for Graph Databases》graph数据库查询语法（I）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/81050368">原创：  浅析内存事务</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/80976744">原创：  F1异步schema更新</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/80669924">原创：  Raft TLA+形式化验证</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/80573012">原创：  PaxosCommit TLA+形式化验证</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/42566933">原创：  epoll源码分析</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/48655355">原创：  Gambler’s Ruin（赌徒破产问题 概率论）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/50452475">原创：  整数的幂分解</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/50427274">原创：  超大多重背包问题</a><span id="more"></span></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/49405363">原创：  据说是网易游戏面试题</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/48828565">原创：  TopCoder SRM 669 DIV 1</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/48131509">原创：  2-SAT合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/45418339">原创：  TopCoder SRM 657 DIV 1</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/45011459">原创：  TCO 2015 Round 1A DIV 1 1000</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/45008413">原创：  Google Code Jam 2015</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/43883169">原创：  DLX算法合集 I</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/43525281">原创：  hdu 5120 Intersection（几何 容斥）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/43181063">转载：  hdu 5111 Alexandra and Two Trees（树链剖分+函数式线段树）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/42299503">原创：  hdu 5110 Alexandra and COS（dp）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/41593875">原创：  hdu 5093 Battle ships（最大二分匹配）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/41488963">原创：  hdu 5091 Beam Cannon（线段树）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/40921433">转载：  hdu 5076 Memory（最小割 数学建模）智商被爆出翔</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/40557565">转载：  hdu 5072 Coprime（容斥）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/40112221">原创：  hdu 5064 Find Sequence（单调性优化DP）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39739961">原创：  hdu 3203 Door Repairing（概率DP 反向推导）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39718257">原创：  模拟退火合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39678285">原创：  hdu 5057 Argestes and Sequence（树状数组）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39590497">原创：  hdu 5027 Help!（计算几何 三分求极值）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39520571">原创：  DFS | BFS 合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39496093">原创：  hdu 5021 Revenge of kNN II（树状数组）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39205337">原创：  hdu 4992 Primitive Roots（推导+证明）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39179925">原创：  hdu 4991 Ordered Subsequence（DP优化—树状数组）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39137747">原创：  DP优化–背包问题</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/39084199">原创：  数位DP合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38963897">转载：  hdu 4910 Problem about GCD（Miller Rabin大素数检测）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38960151">原创：  hdu 4909 String（map）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38848463">原创：  最大流最小割合集 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38794795">原创：  最大流最小割合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38662141">原创：  hdu 4775 Infinite Go（并查集 模拟）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38498791">转载：  hdu 4779 Tower Defense（组合数学 枚举）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38380705">原创：  hdu 4780 Candy Factory（最小费用流–按流建图）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38349935">原创：  hdu 4862 Jump （最小费用流–两种建图方式）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38347385">原创：  最小费最大流 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/38026913">原创：  树|图 分治</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37960749">原创：  最小费用最大流 I</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37900049">原创：  扩展欧几里德定理</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37877271">原创：  hdu 4273 Rescue（三维凸包 三维中心）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37831635">原创：  hdu 4613 Points（ KMP 图形学）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37762163">原创：  整数拆分</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37693293">原创：  差分约束合集 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37565705">原创：  差分约束合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/37059179">原创：  POLYA合集 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/30283623">原创：  POLYA合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/27799449">转载：  hdu 4685 Prince and Princess（匈牙利算法 连通分量）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/27494799">原创：  hdu 4634 Swipe Bo（bfs 状态压缩）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/27136093">原创：  hdu 4678 Mine（SG博弈）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/25644455">原创：  hdu 4669 Mutiples on a circle（按位DP）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/25500421">转载：  hdu 4667 Building Fence（二维凸包 Graham）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/25332127">原创：  数论合集 I</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/25082233">原创：  hdu 4655 Cut Pieces（DP 贪心）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/24883263">转载：  hdu 4704 Sum（费马小定理）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/24840003">转载：  hdu 4661 Message Passing（树形dp）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/22915575">原创：  hdu 4635 Strongly connected（连通分量）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/21720885">原创：  hdu 4629 Burning（二维图形学）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/18923427">原创：  hdu 4588 Count The Carries</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/18799819">原创：  hdu 4587 TWO NODES（强连通分量）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17965277">转载：  hdu 4577 X-Boxes（大数）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17765877">转载：  hdu 4582 DFS spanning tree</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17327171">原创：  hdu 4585 Shaolin</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17277605">原创：  hdu 4737 A Bit Fun</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17170633">原创：  hdu 4302 Holedox Eating</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/17061769">原创：  线段树合集 III</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/16818859">原创：  线段树合集 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/15922205">原创：  hdu 3525 Orienteering</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/14643761">原创：  线段树合集 I</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/14112619">原创：  hdu 4578 Transformation</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/13765721">原创：  hdu 4576 Robot</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/12079107">原创：  模拟题合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/12010737">原创：  hdu 3804 Query on a tree</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11988219">原创：  hdu 3966 Aragorn’s Story（树连剖分）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11973149">原创：  hdu 4691 Front compression（树连剖分）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11538133">原创：  后缀自动机合集 II</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11402843">原创：  后缀自动机合集 I</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11265133">原创：  hdu 1711 Number Sequence</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11151511">原创：  hdu 2888 Check Corners</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11094577">原创：  hdu 4620 Fruit Ninja Extreme</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/11020555">原创：  hdu 4617 Weapon</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10974221">原创：  hdu 4616 Game</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10590555">原创：  连通分量合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10434859">原创：  hdu 4611 Balls Rearrangement</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10425263">原创：  hdu 4610 Cards （分解质因数）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10378363">转载：  FFT乘法模板</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10377821">转载：  hdu 4609 3-idiots</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10353485">原创：  hdu 4607 Park Visit</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10338077">原创：  最小路径覆盖合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/10299545">原创：  树状数组合集</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9858207">原创：  hdu 4603 Color the Tree</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9816903">原创：  hdu 4602 Partition</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9789103">转载：  hdu 4601 Letter Tree</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9748325">转载：  hdu 4600 Harvest Moon</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9670661">原创：  hdu 3976 Electric resistance</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9667907">原创：  hdu 3359 Kind of a Blur</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9664775">转载：  hdu 4118 Time travel</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9631879">原创：  hdu 4336 Card Collector</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9628059">原创：  hdu 3853 LOOPS</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9627107">转载：  hdu 4089 Activation</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9621689">原创：  hdu 4405 Aeroplane chess</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9615775">转载：  hdu 4035 Maze</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9567465">转载：  hdu 3948 The Number of Palindromes</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9495067">原创：  hdu 4417 Super Mario</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9494319">转载：  hdu 3473 Minimum Sum</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9474451">转载：  hdu 4251 The Famous ICPC Team Again</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9464535">原创：  各大公司面试集锦</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9416705">原创：  hdu 3045 Picnic Cows</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9386503">原创：  hdu 2993 MAX Average Problem</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9381299">原创：  hdu 3247 Resource Archiver</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9371387">原创：  hdu 3480 Division</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9366015">原创：  hdu 3507 Print Article</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9365635">原创：  hdu 2829 Lawrence</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9356551">转载：  hdu 3534 Tree（树形dp）</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9346933">原创：  hdu 2243 考研路茫茫——单词情结</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9322233">转载：  hdu 4573 Throw the Stones</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9322165">转载：  hdu 3662 3D Convex Hull</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9321867">原创：  hdu 3336 Count the string</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9148899">原创：  微软曾经笔试题答案</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9037995">原创：  hdu 4565 So Easy!</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/9013289">原创：  hdu 4549 M斐波那契数列</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/8997264">原创：  hdu 4533 威威猫系列故事——晒被子</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/8985709">原创：  POJ 1069 The Bermuda Triangle</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/8985550">原创：  2013金山西山居创意游戏程序挑战赛——复赛（1） 我是歌手</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/8979406">原创：  2013金山西山居创意游戏程序挑战赛——复赛（1） 涂色游戏</a></li>
<li><a href="https://blog.csdn.net/solotzg/article/details/8951533">原创：  2013金山西山居创意游戏程序挑战赛——复赛（1） 剑侠情缘</a></li>
</ul>
]]></content>
      <categories>
        <category>HistoryBlogs</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>GraphDataBase</tag>
        <tag>Math</tag>
        <tag>Structure</tag>
        <tag>FormalVerification</tag>
        <tag>DistributedSystem</tag>
      </tags>
  </entry>
  <entry>
    <title>Release Notes 规范</title>
    <url>/2021/09/13/ProjectManagement/release-notes-specification/</url>
    <content><![CDATA[<p><code>Release Notes</code> 作为开源软件工程实践的重要一环，会很大程度上影响用户体验和交付流程。此篇文档是本人在历次发版任务中总结出来的模板规范，用以帮助产研提升 Release Notes 质量。该规范已由组内推广至 PingCAP 全公司。</p>
<span id="more"></span>

<blockquote>
<p>Proposed by <code>Zhigao Tong</code></p>
</blockquote>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul>
<li>Release Notes 填写规范</li>
<li>Release Notes 描述规范</li>
<li>Development-Documentation Release Notes 加工</li>
<li>官方发布：<a href="https://docs.pingcap.com/tidb/dev/release-notes">Release Notes | PingCAP Docs</a></li>
</ul>
<h2 id="参考模板"><a href="#参考模板" class="headerlink" title="参考模板"></a>参考模板</h2><p><strong>注意：以下模板和规范仅限 PR&#x2F;ISSUE 粒度，跨大版本发布时所需的详细 release notes 不在本文讨论范围</strong></p>
<h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><ul>
<li>句首字母大写</li>
<li>结尾不出现标点符号</li>
<li>语法正确</li>
<li>祈使句</li>
<li>用户视角<ul>
<li>Release Notes 的写作参考 PR 对应的 GitHub issue。GitHub issue 是用户侧最直接感知的问题，Release Notes 应就用户侧直接感知的问题进行简要概述，而非对代码侧进行概述。PR 中的提供的 Release Notes 应与 GitHub issue 标题和描述高度一致，避免割裂</li>
<li>不描述具体修改细节，以概述为主</li>
<li>对于 Bug fix notes，强调该条改动对用户的意义，帮助用户解决了什么问题</li>
<li>在编写 Improvements 或 Feature enhancements 部分的 note 时，还需要写出改动为用户带来的好处，或是提升性能，或是增强稳定性，或是更丰富的功能体验</li>
<li>在编写 Bug fix 部分的 note 时，需要写清楚问题触发的条件和问题带来的影响，最好还能写出用户的 workaround</li>
</ul>
</li>
<li>表述完整 &amp; 简洁</li>
<li>变量参数名、配置项名、值、SQL 语句、命令、列类型等用 &#96;&#96; 反引号包括。如果需要表示字符串，也可使用引号 “ 或 ‘</li>
<li>闭源 Repo 结尾不要附 PR 链接</li>
<li>SQL 表达式等相关专用单词全字母大写，例如：COUNT DISTINCT；HAVING；STR_TO_DATE；</li>
</ul>
<p><strong>PR Reviewer</strong> 以及 <strong>PM</strong> 需按照上述原则审核用于对外发布的 Release Notes</p>
<ul>
<li>由 PR reviewer 审查日常提交的每个 PR 的 release notes、labels</li>
<li>PM 需要在发版前，针对 Bug Triage List 中相关 issue 或 PR 再次审核</li>
</ul>
<p>对于不合规范或有问题的条目需要公布并集体讨论</p>
<p>对于文档组有修改意见的条目需要公布并集体讨论</p>
<p>如果有新的格式可用于规范模板，请及时补充到本文档中</p>
<p><strong>以下为根据历史发版记录总结的部分模板，建议填写 Release Notes 时参考</strong></p>
<h3 id="Compatibility-changes"><a href="#Compatibility-changes" class="headerlink" title="Compatibility changes"></a>Compatibility changes</h3><p>这一部分涵盖了此发版相较于上一发版，所涉及的配置项变更、默认值变更以及所有产生兼容性问题的变更。相对于其他 note，这一部分更容易对线上业务造成影响，是用户需要重点关注的。也是 Release Notes 的重点之一。</p>
<p>Compatibility changes 的 note 需要说明两个信息：</p>
<ul>
<li>此前的代码行为、配置项、默认值是什么</li>
<li>从此版本起，新的代码行为、新的配置项、新的默认值是什么</li>
</ul>
<h3 id="Feature-enhancements"><a href="#Feature-enhancements" class="headerlink" title="Feature enhancements"></a>Feature enhancements</h3><p>提升改进或功能增强的 note，开头的动词多为 Support 和 Add</p>
<p>支持&#x2F;实现 具体功能</p>
<ul>
<li><strong>Support [doing something]</strong></li>
<li><strong>Support the […]</strong></li>
<li><strong>Add […]</strong></li>
<li>例如：<ul>
<li>Support casting the <code>STRING</code> type to the <code>DOUBLE</code> type</li>
<li>Support the <code>Cartesian</code> join</li>
</ul>
</li>
<li>支持函数下推<ul>
<li><strong>Support the <code>XXX()</code> function</strong></li>
<li>函数名称全字母大写，最后加上 ()</li>
<li>例如：<ul>
<li>Support the <code>DATE()</code> function</li>
<li>Support the <code>STR_TO_DATE()</code> function</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>优化功能</p>
<ul>
<li><strong>Optimize the […]</strong></li>
<li>例如：<ul>
<li>Optimize the non-joined data in right outer join using multiple threads</li>
</ul>
</li>
</ul>
<h3 id="Bug-fixes"><a href="#Bug-fixes" class="headerlink" title="Bug fixes"></a>Bug fixes</h3><p>开头使用 <strong>Fix a […] bug that […]</strong> | <strong>Fix the […] issue&#x2F;error&#x2F;exception that&#x2F;of […]</strong></p>
<p>不建议使用 may | might 等不确定性字样，可使用 a&#x2F;the potential […] bug&#x2F;issue，样例：</p>
<ul>
<li>Fix the issue that TiFlash keeps restarting because of …</li>
<li>Fix the potential issue that TiFlash cannot …</li>
<li>Fix a bug that TiFlash fails to …</li>
</ul>
<p>错误&#x2F;异常相关问题模板</p>
<ul>
<li>Fix the issue of incorrect results that occurs when&#x2F;during …</li>
<li>Fix the issue of wrong query results that occurs when …</li>
<li>Fix the issue of unexpected results that occurs …</li>
<li>Fix the TiFlash panic issue that occurs when …</li>
<li>Fix the potential&#x2F;occasional panic that occurs when …</li>
</ul>
<h2 id="修改样例"><a href="#修改样例" class="headerlink" title="修改样例"></a>修改样例</h2><h3 id="Compatibility-changes-1"><a href="#Compatibility-changes-1" class="headerlink" title="Compatibility changes"></a>Compatibility changes</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">copr: cast invalid utf8 string to real bug fix</span><br></pre></td></tr></table></figure>

<ul>
<li>描述过于简略，表意不完整</li>
<li>该改动涉及用户可感知的代码行为改动，会造成兼容性变化，但是未在 release notes 中体现出来</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Before v4.0.16, when TiDB converts an illegal UTF-8 string to a Real type, an error is reported directly. Starting from v4.0.16, TiDB processes the conversion according to the legal UTF-8 prefix in the string</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sink: fix kafka max message size inaccurate issue.</span><br></pre></td></tr></table></figure>

<ul>
<li>描述过于简略，表意不完整</li>
<li>该改动修改了参数默认值，造成兼容性更改，但是未在 release notes 中体现出来</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Change the default value of Kafka Sink max-message-bytes to 1 MB to prevent TiCDC from sending too large messages to Kafka clusters</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cdc/sink: adjust kafka initialization logic</span><br></pre></td></tr></table></figure>

<ul>
<li>描述过于简略，表意不完整</li>
<li>该改动修改了参数默认值，造成兼容性更改，但是未在 release notes 中体现出来</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Change the default value of Kafka Sink partition-num to 3 so that TiCDC distributes messages across Kafka partitions more evenly</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Feature-enhancements-1"><a href="#Feature-enhancements-1" class="headerlink" title="Feature enhancements"></a>Feature enhancements</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Not use the stale read request&#x27;s `start_ts` to update `max_ts` to avoid commit request keep retrying</span><br></pre></td></tr></table></figure>

<ul>
<li>该优化的目的和结果是避免 commit 请求重试，方式为不使用 Stale Read 请求的 start_ts 更新 max_ts。应先说目的和结果</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Avoid excessive commit request retrying by not using the Stale Read request&#x27;s start_ts to update max_ts</span><br></pre></td></tr></table></figure>

<h3 id="Bug-fixes-1"><a href="#Bug-fixes-1" class="headerlink" title="Bug fixes"></a>Bug fixes</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fix potential npe in executeTS during DAG compile</span><br></pre></td></tr></table></figure>

<ul>
<li>首字母非大写</li>
<li>executeTS 具体含义指代不清</li>
<li>npe 具体含义指代不清</li>
<li>缺乏概述</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the potential panic issue that occurs when running table scan tasks</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the null pointer exception (NPE) that occurs when running table scan tasks</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix Cannot convert NULL value to non-Nullable type error for scalar aggregation with aggregation function count and count distinct</span><br></pre></td></tr></table></figure>

<ul>
<li>语法不清</li>
<li>格式较乱</li>
<li>描述过多细节，缺乏概述</li>
<li>count 和 count distinct 相关 SQL 专用词需要全字母大写。并加上 &#96;&#96;</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the issue of unexpected results when executing the aggregation functions `COUNT` or `COUNT DISTINCT`</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fix mpp random crash if mpp query meet errors</span><br></pre></td></tr></table></figure>

<ul>
<li>首字母非大写</li>
<li>mpp 指代不清（是否专用词？）</li>
<li>格式不清晰</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the potential crash issue that occurs when executing `MPP` tasks</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">support having in DAG request</span><br></pre></td></tr></table></figure>

<ul>
<li>首字母非大写</li>
<li>having 相关 SQL 专用词格式有误</li>
<li>request 语法错误</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Support the `HAVING()` function in DAG requests</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix TiFlash server random crash when deconstruct SharedQueryBlockInputStream</span><br></pre></td></tr></table></figure>

<ul>
<li>语法&#x2F;格式有误</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the potential crash issue that occurs when deconstructing `SharedQueryBlockInputStream`</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fix random terminate without exception error when deconstruct MPPTask</span><br></pre></td></tr></table></figure>

<ul>
<li>语法&#x2F;格式有误</li>
<li>MPPTask 是否专用词</li>
<li>需精简概述</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the potential panic issue that occurs when deconstructing `MPPTask`</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">retry when meeting stablish conn fails</span><br></pre></td></tr></table></figure>

<ul>
<li>首字母非大写</li>
<li>语法&#x2F;格式混乱</li>
<li>表述不清且完整性较差</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the issue of unexpected results when TiFlash failed to establish `MPP` connections</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">fix resolve lock race</span><br></pre></td></tr></table></figure>

<ul>
<li>所有问题同上</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the potential panic issue that occurs when resolving locks</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix problem CastStringAsInt may produce wrong result</span><br></pre></td></tr></table></figure>

<ul>
<li>使用内部函数名词，可读性较差</li>
<li>语法&#x2F;格式有误</li>
<li>不需要使用 may 这类不确定性词句</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the issue of incorrect results when casting string as integer</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix a string compare bug that sometimes &gt;= and &lt;= will return wrong result if the contains with `\0`</span><br></pre></td></tr></table></figure>

<ul>
<li>语法&#x2F;格式有误</li>
<li>描述过多细节，缺乏概述</li>
<li>直接使用 <code>\0</code> 对外部表意不清</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the issue of incorrect results when comparing a string that contains zero bytes</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lock_resolver: avoid pessimistic transactions using resolveLocksForWrite</span><br></pre></td></tr></table></figure>

<ul>
<li>没有从用户视角出发，未说明解决了什么问题，与 GitHub issue 不一致</li>
<li>描述偏重代码侧细节，缺乏概述，例如 resolveLocksForWrite</li>
<li>未以 Fix the issue 开头，不是标准的 bug fix note</li>
</ul>
<p><strong>修改意见</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Fix the issue that committing pessimistic transactions might cause write conflict</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>ProjectManagement</category>
      </categories>
      <tags>
        <tag>ReleaseNotes</tag>
        <tag>OpenSource</tag>
        <tag>PingCAP</tag>
        <tag>ProjectManagement</tag>
      </tags>
  </entry>
  <entry>
    <title>TiFlash 项目开源历程</title>
    <url>/2022/04/01/ProjectManagement/tiflash-open-source/</url>
    <content><![CDATA[<p><a href="https://github.com/pingcap/tiflash">TiFlash</a> 于 <code>2022-04-01 GMT+8 10:35</code> 愚人节 正式官宣开源。</p>
<p>这是加入 PingCAP（aka 贵司）后首次尝试从提出规划到推进落地项目开源，算是值得纪念的事件 <a href="https://github.com/pingcap/tiflash/pull/4551">Celebrate open-source (#4551)</a>，在此存档相关历程。</p>
<span id="more"></span> 
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TiFlash 项目开源，既是秉承和发扬公司开源精神，也能提振客户信心，扩大影响力。但随之而来的问题也很明显：</p>
<ul>
<li><strong>安全</strong>：不同于闭源项目，源码公布之后所有的实现细节均显露无疑，任何漏洞都将暴露在阳光下，安全问题是重中之重。以下几点需特别注意：<ul>
<li>法务：开源协议选择，CLA 流程（Contributor License Agreements），法律和舆论风险，申请相关专利，软件著作权登记等</li>
<li>系统安全：清除牵涉 PingCAP 公司内部的逻辑，规范程序后门（Backdoor）</li>
</ul>
</li>
<li><strong>质量保障</strong>：面向外部水平参差不齐的开发者，质量保障体系需保障其产出的下限。这方面主要靠自动化的 CI&#x2F;CD 流程和规章制度，例如：<ul>
<li>代码质量管控：格式化检查，代码静态分析，UT 覆盖率保障，头文件依赖检查</li>
<li>规章制度：PR Reviewer 人数，PR &amp; ISSUE 模板，<a href="https://solotzg.github.io/2021/09/13/ProjectManagement/release-notes-specification/">Release Notes 规范</a>，源文件 License 检查，Proposal 流程，代码工程规范</li>
</ul>
</li>
<li><strong>工程架构</strong>：TiFlash 作为 C++ 为主导的项目，为了对外部开发者更友好，需要优化工程架构，以简化上手难度。主要考虑以下几点：<ul>
<li>编译流程优化：工具链切换到 LLVM 并升级，外部预装库 &amp; 依赖环境解耦，优化文档</li>
<li>清理历史遗留无效代码</li>
</ul>
</li>
<li><strong>开源社区</strong>：虽然贵司有诸多开源网红产品，但对于 TiFlash 这类偏专项领域的项目是否有必要做社区？如何吸引外部 Contributor？如何沟通？如何扩大影响力？就看后人的智慧了 Orz…</li>
</ul>
<h2 id="TiFlash-开源准备事项"><a href="#TiFlash-开源准备事项" class="headerlink" title="TiFlash 开源准备事项"></a>TiFlash 开源准备事项</h2><blockquote>
<p>Proposed by <code>Zhigao Tong</code></p>
</blockquote>
<h3 id="进度记录"><a href="#进度记录" class="headerlink" title="进度记录"></a>进度记录</h3><ul>
<li>2022-04-01<ul>
<li>[DONE] TiFlash 正式开源</li>
</ul>
</li>
<li>2022-03-25<ul>
<li>[DONE] 法务正式提交相关专利，法务方面问题都已解决</li>
<li>CD 流程优化代码缓存</li>
<li>[DONE] 开源试运行成功，待正式开源以及 CLA 启用</li>
</ul>
</li>
<li>2022-03-18<ul>
<li>[DONE] Repo 改名 tiflash</li>
<li>[DONE] 重构 CI&#x2F;CD 流程</li>
<li>[DONE] License<ul>
<li>License 选择：Apache License 2.0</li>
<li>源文件 License 补全</li>
</ul>
</li>
<li>[DONE] 安全相关<ul>
<li>源代码清理内网链接及相关脚本</li>
</ul>
</li>
<li>目前总体上各事项均已完成，以下需等开源后完成：<ul>
<li>暂不考虑 DCO 同 TiDB 一致使用 CLA</li>
<li>CI 开启 required 检查：license-checker、CLA</li>
</ul>
</li>
</ul>
</li>
<li>2022-03-11<ul>
<li>[WIP] 重构 CD 流程</li>
<li>[WIP] Repo 改名</li>
</ul>
</li>
<li>2022-03-04<ul>
<li>[DONE] PR reviewer 人数增加到 2</li>
<li>改名 tiflash 尚待 v5.3.1 发版结束（预计 2022-03-03）</li>
</ul>
</li>
<li>2022-02-25<ul>
<li>[DONE] 代码质量管控、UT质量（目前代码覆盖率为 49.19%）</li>
<li>[DONE] DCO 开启、编译流程优化并支持 cmake install</li>
<li>TODO：拆分和重构 CI 流程</li>
</ul>
</li>
<li>2022-02-18<ul>
<li>[DONE] 外部预装库 &amp; 依赖环境解耦</li>
<li>README 补全</li>
<li>[DONE] tiflash-proxy 侧开启 DCO、CLA</li>
</ul>
</li>
<li>2022-02-11<ul>
<li>[DONE] zlib、openssl、curl 环境库依赖解耦</li>
<li>[DONE] 工具链升级 llvm</li>
</ul>
</li>
<li>2022-02-04<ul>
<li>[DONE] tiflash-proxy 相关库解耦，自动化编译流程</li>
<li>[DONE] 补全 tiflash 架构设计文档</li>
<li>[DONE] grpc 相关环境库依赖解耦</li>
</ul>
</li>
<li>∞<ul>
<li>CI 流程构建实现：静态分析机制、格式化检查机制、编译缓存机制，重构 UT 框架和流程，自动化 UT 覆盖率</li>
<li>Proposal 流程文档，代码工程规范文档，Release Notes 规范</li>
</ul>
</li>
</ul>
<h3 id="代码质量管控"><a href="#代码质量管控" class="headerlink" title="代码质量管控"></a>代码质量管控</h3><ul>
<li><p>PR 级代码静态分析</p>
<ul>
<li>CI 流程构建基于 clang-tidy 的静态分析机制</li>
<li>统一静态分析检查项配置</li>
<li>各个模块修复 clang-tidy 报错</li>
<li>开启 PR 级代码静态分析检查（P1）</li>
</ul>
</li>
<li><p>PR 级代码格式化检查</p>
<ul>
<li>统一格式并开启检查</li>
</ul>
</li>
<li><p>？头文件分析</p>
<ul>
<li>include-what-you-use</li>
</ul>
</li>
</ul>
<h3 id="UT（单元测试）质量"><a href="#UT（单元测试）质量" class="headerlink" title="UT（单元测试）质量"></a>UT（单元测试）质量</h3><ul>
<li>重构 UT 框架和流程，CI 集成自动 UT 覆盖率<ul>
<li>UT 框架重构 &amp; CI 集成</li>
</ul>
</li>
<li>各个模块提升 UT 覆盖率至 70%+，目前 x%<ul>
<li>Compute</li>
<li>Storage</li>
<li>Common</li>
<li>Others</li>
</ul>
</li>
<li>删除｜隔离模块中无效代码<ul>
<li>dbms.src.AggregateFunctions</li>
<li>dbms.src.Columns</li>
<li>dbms.src.Common</li>
<li>dbms.src.Client</li>
<li>dbms.src.Core</li>
<li>dbms.src.DataStreams</li>
<li>dbms.src.DataTypes</li>
<li>dbms.src.Debug</li>
<li>dbms.src.Dictionaries</li>
<li>dbms.src.Flash</li>
<li>dbms.src.Functions</li>
<li>dbms.src.IO</li>
<li>dbms.src.Interpreters<ul>
<li>Interpreters&#x2F;{Users,SecurityManager,Quota}</li>
</ul>
</li>
<li>dbms.src.Parsers</li>
<li>dbms.src.Storages<ul>
<li>dbms.src.Storages.MergeTree</li>
</ul>
</li>
<li>libs<ul>
<li>libs.libdaemon</li>
<li>libs.libcommon</li>
<li>libs.libpocoext</li>
<li>libs.libconsistent-hashing</li>
</ul>
</li>
<li>dbms.tests</li>
</ul>
</li>
</ul>
<h3 id="工程架构"><a href="#工程架构" class="headerlink" title="工程架构"></a>工程架构</h3><ul>
<li>代码仓库迁移 &amp; 依赖解耦（P1）<ul>
<li>重命名为 tiflash</li>
</ul>
</li>
<li>Github Repo 规范（P1）<ul>
<li>PR reviewer 人数增加到 2，开源前打开</li>
</ul>
</li>
<li>Developer Certificate 检查 </li>
<li>PR &amp; Issue template</li>
<li>Bug closed checker<ul>
<li>流程待开源后开启</li>
</ul>
</li>
<li>CLA: <a href="https://cla-assistant.io/">https://cla-assistant.io</a><ul>
<li>开源后开启 required 检查</li>
</ul>
</li>
<li>代码源文件 License 补全<ul>
<li>流程待开源后开启</li>
</ul>
</li>
<li>编译流程优化（P1）<ul>
<li>工具链升级</li>
<li>Clang 替换 GCC</li>
<li>新增 llvm 编译环境相关支持，PR 的 ci 流程更换工具链</li>
<li>CMake 作为唯一入口，全自动化编译流程</li>
<li>对外编译打包相关流程更换工具链<ul>
<li>build tiflash multi branch</li>
<li>Linux: amd64, arm64</li>
</ul>
</li>
</ul>
</li>
<li>外部预装库 &amp; 依赖环境解耦（P1）<ul>
<li>tidb-engine-ext 独立开源维护<ul>
<li>构建 CI 以及相关 QA 体系</li>
<li>tidb-engine-ext 侧实现全链路独立测试</li>
</ul>
</li>
<li>集成到 cmake 编译流程</li>
<li>GRPC</li>
<li>OPEN_SSL</li>
<li>CURL</li>
<li>RE2</li>
<li>移除 cluster-manager 模块 重构 &amp; 优化 tiflash replica 管理机制</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>规范 Proposal 流程<ul>
<li>RFC 流程</li>
</ul>
</li>
<li>文档补全<ul>
<li>开发规范<ul>
<li>Release Notes 规范</li>
<li>代码工程规范</li>
</ul>
</li>
<li>？代码模块入门分析文档</li>
</ul>
</li>
</ul>
<h3 id="安全（P1）"><a href="#安全（P1）" class="headerlink" title="安全（P1）"></a>安全（P1）</h3><ul>
<li>License 选择</li>
<li>规范 Debug 入口，按编译选项开启｜关闭</li>
<li>早期版本风险通知</li>
<li>源代码清理内网链接及相关脚本</li>
<li>开启 first time contributor 检查</li>
</ul>
<h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul>
<li>Contributor 和内部的沟通方式（可以参考 TiKV，有 slack，wechat 和一些 social media）</li>
<li>创建几个简单 issue 方便 contributor 参与( 可使用 label <code>good first issue</code> 做检索)</li>
<li>Readme 重新组织，比如加上架构图，重要技术点介绍，致谢等</li>
<li>？Logo 设计</li>
<li>参考 TiDB，添加 github topic</li>
</ul>
]]></content>
      <categories>
        <category>ProjectManagement</category>
      </categories>
      <tags>
        <tag>OpenSource</tag>
        <tag>PingCAP</tag>
        <tag>ProjectManagement</tag>
        <tag>TiFlash</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析数据块排序</title>
    <url>/2019/12/18/pingcap/data-block-sort/</url>
    <content><![CDATA[<p>目前主流的数据库引擎可按照实现方式分为以下几种：B+ Tree、LSM、Delta Main。在类 LSM 的存储方案中，RocksDB 和 Kudu 之流通过 append 的方式写日志并定期重新组织，从而将写数据的压力平衡到读取的过程中。由于相邻的数据可能落在 Memtable 以及不同的 SST 中，在涉及到范围扫描时，需要对结构化&#x2F;半结构化数据进行排序输出。因此，对于数据块排序过程的优化，也会对读性能产生重要影响。</p>
<p>文章将基于类LSM引擎，由浅入深地介绍几种相关方案，原文链接：<a href="https://zhuanlan.zhihu.com/p/96374849">知乎·尬聊数据库·浅析数据块排序
</a></p>
]]></content>
      <categories>
        <category>HistoryBlogs</category>
      </categories>
      <tags>
        <tag>Zhihu</tag>
        <tag>Database</tag>
        <tag>Storage</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Collation Optimization In TiDB | TiFlash</title>
    <url>/2022/11/26/pingcap/database-collation-optimization/</url>
    <content><![CDATA[<blockquote>
<p>In database systems, Collation specifies how data is sorted and compared in a database. Collation provides the sorting rules, case, and accent sensitivity properties for the data in the database.</p>
</blockquote>
<p>在数据库系统中，<code>CHARACTER SET</code>(aka <code>字符集</code>) 为一组字符和编码的集合，<code>COLLATION</code> 则表示字符排序|比较规则、大小写敏感等属性。参考 <a href="https://dev.mysql.com/doc/refman/8.0/en/charset-mysql.html">Character Sets and Collations in MySQL</a>，MySQL 支持多种字符集，每种字符集包含多种 collation（默认使用一种）。TiDB 体系中默认采用字符集 <code>utf8mb4</code>，collation <code>utf8mb4_bin</code>。对于 TiFlash 这样的 OLAP 引擎而言，字符集相关规则引入的额外抽象必然会对性能产生较大影响，本文主要阐述优化 collation 的过程并在 Benchmark <code>TPCH</code> 和 <a href="https://github.com/ClickHouse/ClickBench">ClickBench</a> 上验证效果。</p>
<span id="more"></span>

<p>需注意的点：</p>
<ul>
<li><a href="#CPU-Cache-%E8%B8%A9%E5%9D%91">CPU Cache</a></li>
<li>SIMD<ul>
<li>优化 <a href="#%E4%BC%98%E5%8C%96-memcpy">memcpy</a></li>
<li>优化 <a href="#%E4%BC%98%E5%8C%96-memcmp-memequal-memchr-strstr">memcmp,memequal,memchr,strstr</a></li>
<li>核心原则<ul>
<li>越是用高级 SIMD 指令，越是要优先考虑小数据处理的性能</li>
<li>当 CPU 成为瓶颈时，高级指令才能带来可观的性能提升</li>
<li>内存对齐较为关键</li>
</ul>
</li>
</ul>
</li>
<li>Devirtualization<ul>
<li><a href="#%E4%BC%98%E5%8C%96-Multi-Key-Sort">Multi Key 排序</a></li>
<li><a href="#%E4%BC%98%E5%8C%96-Aggregation-And-Join">Aggregation &amp; Join 相关场景</a></li>
<li><a href="#%E4%BC%98%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83">字符串比较</a>，<a href="#%E4%BC%98%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2">字符串搜索</a>，<a href="#%E4%BC%98%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F">字符串排序</a></li>
</ul>
</li>
</ul>
<h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Overall</p>
<ul>
<li>TPCH-100：总体性能提升约 <strong>5.55%</strong> （结合 LTO）</li>
<li>ClickBench：对于 TiFlash 已支持的查询，总体性能提升约 <strong>21.06%</strong></li>
<li>Ossinsight（PingCAP 内部测试）：所用的字符串比较过滤等类似场景，性能提升约 <strong>46.58%～75.76%</strong></li>
<li>当前优化主要面向 <code>BIN COLLATION</code>，并针对 TiDB 默认的 <code>UTF8MB4_BIN</code> &#x2F; <code>UTF8_BIN</code> 特殊优化<ul>
<li>注意：ClickBench 数据集中，URL、Title、Referer、SearchPhrase、OriginalURL、OpenstatCampaignID、UTMCampaign、UTMContent 列均包含以空格（<code>0x20</code>）结尾的数据。按照当前 TiDB 体系的行为需 <a href="https://docs.pingcap.com/zh/tidb/dev/character-set-and-collation#%E6%96%B0%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E6%94%AF%E6%8C%81">裁剪掉末尾的空格</a>。处理到这类数据时必然产生额外开销，优化效果一般。</li>
</ul>
</li>
<li><strong>本轮优化 不包含 CI COLLATION</strong></li>
</ul>
<h3 id="TPCH-100"><a href="#TPCH-100" class="headerlink" title="TPCH-100"></a>TPCH-100</h3><h4 id="One-TiFlash-Store"><a href="#One-TiFlash-Store" class="headerlink" title="One TiFlash Store"></a>One TiFlash Store</h4><ul>
<li>TIFLASH x 1<ul>
<li>memory limit in bytes: 207405139968</li>
<li>cpu cores quota: 40</li>
</ul>
</li>
<li>TIFLASH REPLICA x 2<ul>
<li><code>ALTER TABLE &#123;...&#125; COMPACT TIFLASH REPLICA</code></li>
</ul>
</li>
<li><code>set @@tidb_enforce_mpp = on</code></li>
<li>同时对比测试移除 <a href="https://solotzg.github.io/2022/06/01/system/cpp-compile-optimize/#LTO%EF%BC%88Link-Time-Optimization%EF%BC%89">LTO 编译优化</a>（自 TiDB v6.1.0 引入）后的影响；<a href="https://solotzg.github.io/2022/06/01/system/cpp-compile-optimize/#PGO%EF%BC%88Profile-Guided-Optimization%EF%BC%89">PGO 优化</a> 当前暂无自动使用；</li>
<li>测试程序 <a href="https://github.com/pingcap/go-tpc/blob/f2917ada86809889a9fa49cc262da77c7001b8f4/tpch/query.go">go-tpc&#x2F;query.go · pingcap&#x2F;go-tpc</a></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original: rollback all PR in <a href="https://github.com/pingcap/tiflash/issues/5294">pingcap&#x2F;tiflash#5294</a> from commit <a href="https://github.com/pingcap/tiflash/commit/a0f986561a9a9442cc47e75cc9bb5437c614a4d4">a0f9865</a></th>
<th>Optimized</th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
<th></th>
<th>Original + No LTO (Link Time Optimization)</th>
<th>Improvement: (Original + No LTO) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td>Q1</td>
<td>9.09</td>
<td>8.42</td>
<td>7.96%</td>
<td>AGG() by multi STR; COLLATION;</td>
<td>10</td>
<td>18.76%</td>
</tr>
<tr>
<td>Q2</td>
<td>2.45</td>
<td>2.38</td>
<td>2.94%</td>
<td></td>
<td>2.52</td>
<td>5.88%</td>
</tr>
<tr>
<td>Q3</td>
<td>5.6</td>
<td>5.47</td>
<td>2.38%</td>
<td></td>
<td>5.6</td>
<td>2.38%</td>
</tr>
<tr>
<td>Q4</td>
<td>6.14</td>
<td>6.07</td>
<td>1.15%</td>
<td></td>
<td>6.24</td>
<td>2.80%</td>
</tr>
<tr>
<td>Q5</td>
<td>13.52</td>
<td>13.05</td>
<td>3.60%</td>
<td></td>
<td>13.52</td>
<td>3.60%</td>
</tr>
<tr>
<td>Q6</td>
<td>1.98</td>
<td>1.98</td>
<td>0.00%</td>
<td></td>
<td>2.01</td>
<td>1.52%</td>
</tr>
<tr>
<td>Q7</td>
<td>6.34</td>
<td>6.14</td>
<td>3.26%</td>
<td></td>
<td>6.51</td>
<td>6.03%</td>
</tr>
<tr>
<td>Q8</td>
<td>8.69</td>
<td>8.36</td>
<td>3.95%</td>
<td></td>
<td>8.93</td>
<td>6.82%</td>
</tr>
<tr>
<td>Q9</td>
<td>38.42</td>
<td>38.49</td>
<td>-0.18%</td>
<td></td>
<td>38.82</td>
<td>0.86%</td>
</tr>
<tr>
<td>Q10</td>
<td>6.95</td>
<td>6.61</td>
<td>5.14%</td>
<td></td>
<td>7.58</td>
<td>14.67%</td>
</tr>
<tr>
<td>Q11</td>
<td>1.64</td>
<td>1.58</td>
<td>3.80%</td>
<td></td>
<td>1.71</td>
<td>8.23%</td>
</tr>
<tr>
<td>Q12</td>
<td>4.4</td>
<td>4.26</td>
<td>3.29%</td>
<td></td>
<td>4.46</td>
<td>4.69%</td>
</tr>
<tr>
<td>Q13</td>
<td>8.42</td>
<td>7.82</td>
<td>7.67%</td>
<td>LIKE(); COLLATION;</td>
<td>8.42</td>
<td>7.67%</td>
</tr>
<tr>
<td>Q14</td>
<td>2.11</td>
<td>2.11</td>
<td>0.00%</td>
<td></td>
<td>2.21</td>
<td>4.74%</td>
</tr>
<tr>
<td>Q15</td>
<td>4.46</td>
<td>4.46</td>
<td>0.00%</td>
<td></td>
<td>4.73</td>
<td>6.05%</td>
</tr>
<tr>
<td>Q16</td>
<td>2.25</td>
<td>2.11</td>
<td>6.64%</td>
<td>LIKE(); COLLATION;</td>
<td>2.28</td>
<td>8.06%</td>
</tr>
<tr>
<td>Q17</td>
<td>13.32</td>
<td>12.78</td>
<td>4.23%</td>
<td></td>
<td>13.32</td>
<td>4.23%</td>
</tr>
<tr>
<td>Q18</td>
<td>18.09</td>
<td>17.41</td>
<td>3.91%</td>
<td></td>
<td>18.49</td>
<td>6.20%</td>
</tr>
<tr>
<td>Q19</td>
<td>5.54</td>
<td>4.66</td>
<td>18.88%</td>
<td>COLLATION</td>
<td>5.6</td>
<td>20.17%</td>
</tr>
<tr>
<td>Q20</td>
<td>2.99</td>
<td>2.92</td>
<td>2.40%</td>
<td></td>
<td>3.02</td>
<td>3.42%</td>
</tr>
<tr>
<td>Q21</td>
<td>24.73</td>
<td>24.26</td>
<td>1.94%</td>
<td></td>
<td>25.4</td>
<td>4.70%</td>
</tr>
<tr>
<td>Q22</td>
<td>1.85</td>
<td>1.78</td>
<td>3.93%</td>
<td></td>
<td>1.91</td>
<td>7.30%</td>
</tr>
<tr>
<td>SUM</td>
<td>188.98</td>
<td>183.12</td>
<td><strong>3.20%</strong></td>
<td></td>
<td>193.28</td>
<td><strong>5.55%</strong></td>
</tr>
</tbody></table>
<h4 id="Two-TiFlash-Store"><a href="#Two-TiFlash-Store" class="headerlink" title="Two TiFlash Store"></a>Two TiFlash Store</h4><ul>
<li>TIFLASH x 2<ul>
<li>memory limit in bytes: 207405139968</li>
<li>cpu cores quota: 40</li>
</ul>
</li>
<li>TIFLASH REPLICA x 2<ul>
<li><code>ALTER TABLE &#123;...&#125; COMPACT TIFLASH REPLICA</code></li>
</ul>
</li>
<li><code>set @@tidb_enforce_mpp = on</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original: rollback all PR in <a href="https://github.com/pingcap/tiflash/issues/5294">pingcap&#x2F;tiflash#5294</a> from commit <a href="https://github.com/pingcap/tiflash/commit/a0f986561a9a9442cc47e75cc9bb5437c614a4d4">a0f9865</a></th>
<th>Optimized</th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td>Q1</td>
<td>5.4</td>
<td>4.97</td>
<td>8.65%</td>
</tr>
<tr>
<td>Q2</td>
<td>1.91</td>
<td>1.88</td>
<td>1.60%</td>
</tr>
<tr>
<td>Q3</td>
<td>4.46</td>
<td>4.4</td>
<td>1.36%</td>
</tr>
<tr>
<td>Q4</td>
<td>6.61</td>
<td>6.48</td>
<td>2.01%</td>
</tr>
<tr>
<td>Q5</td>
<td>11.54</td>
<td>11.11</td>
<td>3.87%</td>
</tr>
<tr>
<td>Q6</td>
<td>1.01</td>
<td>1.01</td>
<td>0.00%</td>
</tr>
<tr>
<td>Q7</td>
<td>4.9</td>
<td>4.73</td>
<td>3.59%</td>
</tr>
<tr>
<td>Q8</td>
<td>8.36</td>
<td>8.25</td>
<td>1.33%</td>
</tr>
<tr>
<td>Q9</td>
<td>30.97</td>
<td>30.06</td>
<td>3.03%</td>
</tr>
<tr>
<td>Q10</td>
<td>5.87</td>
<td>5.4</td>
<td>8.70%</td>
</tr>
<tr>
<td>Q11</td>
<td>1.51</td>
<td>1.44</td>
<td>4.86%</td>
</tr>
<tr>
<td>Q12</td>
<td>2.55</td>
<td>2.52</td>
<td>1.19%</td>
</tr>
<tr>
<td>Q13</td>
<td>5.57</td>
<td>5.34</td>
<td>4.31%</td>
</tr>
<tr>
<td>Q14</td>
<td>1.17</td>
<td>1.17</td>
<td>0.00%</td>
</tr>
<tr>
<td>Q15</td>
<td>2.18</td>
<td>2.21</td>
<td>-1.36%</td>
</tr>
<tr>
<td>Q16</td>
<td>1.24</td>
<td>1.21</td>
<td>2.48%</td>
</tr>
<tr>
<td>Q17</td>
<td>9.5</td>
<td>9.63</td>
<td>-1.35%</td>
</tr>
<tr>
<td>Q18</td>
<td>12.82</td>
<td>12.75</td>
<td>0.55%</td>
</tr>
<tr>
<td>Q19</td>
<td>2.99</td>
<td>2.52</td>
<td>18.65%</td>
</tr>
<tr>
<td>Q20</td>
<td>2.15</td>
<td>2.11</td>
<td>1.90%</td>
</tr>
<tr>
<td>Q21</td>
<td>16.74</td>
<td>16.27</td>
<td>2.89%</td>
</tr>
<tr>
<td>Q22</td>
<td>1.01</td>
<td>1.01</td>
<td>0.00%</td>
</tr>
</tbody></table>
<h3 id="ClickBench"><a href="#ClickBench" class="headerlink" title="ClickBench"></a>ClickBench</h3><ul>
<li>TIFLASH x 1<ul>
<li>memory limit in bytes: 207405139968</li>
<li>cpu cores quota: 40</li>
</ul>
</li>
<li>TIFLASH REPLICA x 2<ul>
<li><code>ALTER TABLE &#123;...&#125; COMPACT TIFLASH REPLICA</code></li>
</ul>
</li>
<li>Data source: <a href="https://github.com/ClickHouse/ClickBench/tree/d661b49dffda015415366f0e12aa1ebe3424c311/mysql">ClickBench</a></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original: rollback all PR in <a href="https://github.com/pingcap/tiflash/issues/5294">pingcap&#x2F;tiflash#5294</a> from commit <a href="https://github.com/pingcap/tiflash/commit/a0f986561a9a9442cc47e75cc9bb5437c614a4d4">a0f9865</a></th>
<th>Optimized</th>
<th></th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
<th>Use collation: Y (yes)</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Q1</td>
<td>0.276</td>
<td>0.277</td>
<td></td>
<td>-0.36%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q2</td>
<td>0.029</td>
<td>0.0301</td>
<td></td>
<td>-3.65%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q3</td>
<td>0.0675</td>
<td>0.0653</td>
<td></td>
<td>3.37%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q4</td>
<td>0.1813</td>
<td>0.1788</td>
<td></td>
<td>1.40%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q5</td>
<td>2.285</td>
<td>2.255</td>
<td></td>
<td>1.33%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q6</td>
<td>1.46</td>
<td>1.36</td>
<td></td>
<td>7.35%</td>
<td>Y</td>
<td>优化单 STR 列 GROUP BY</td>
</tr>
<tr>
<td>Q7</td>
<td>0.1689</td>
<td>0.1693</td>
<td></td>
<td>-0.24%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q8</td>
<td>0.0391</td>
<td>0.0381</td>
<td></td>
<td>2.62%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q9</td>
<td>1.205</td>
<td>1.175</td>
<td></td>
<td>2.55%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q10</td>
<td>2.005</td>
<td>2</td>
<td></td>
<td>0.25%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q11</td>
<td>0.2722</td>
<td>0.2521</td>
<td></td>
<td>7.97%</td>
<td>Y</td>
<td>短字符串比较过滤；优化 MEM UTILS 基础函数；</td>
</tr>
<tr>
<td>Q12</td>
<td>0.2936</td>
<td>0.2731</td>
<td></td>
<td>7.51%</td>
<td>Y</td>
<td>同 Q11；优化多 STR 列 GROUP BY；</td>
</tr>
<tr>
<td>Q13</td>
<td>1.03</td>
<td>0.9916</td>
<td></td>
<td>3.87%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q14</td>
<td>1.96</td>
<td>1.87</td>
<td></td>
<td>4.81%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q15</td>
<td>1.105</td>
<td>1.06</td>
<td></td>
<td>4.25%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q16</td>
<td>1.08</td>
<td>1.025</td>
<td></td>
<td>5.37%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q17</td>
<td>3.475</td>
<td>3.36</td>
<td></td>
<td>3.42%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q18</td>
<td>2.865</td>
<td>2.77</td>
<td></td>
<td>3.43%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q19</td>
<td>0</td>
<td>0</td>
<td>ERROR: Out Of Memory Quota!extract 无法下推 TiFlash</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q20</td>
<td>0.5935</td>
<td>0.5773</td>
<td></td>
<td>2.81%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q21</td>
<td>3.45</td>
<td>0.8726</td>
<td></td>
<td>295.37%</td>
<td>Y</td>
<td>LIKE 表达式相关：优化字符串搜索算法；avx2 指令优化相关 MEM UTILS 基础函数；</td>
</tr>
<tr>
<td>Q22</td>
<td>3.57</td>
<td>1.0151</td>
<td></td>
<td>251.69%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q23</td>
<td>6.645</td>
<td>1.815</td>
<td></td>
<td>266.12%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q24</td>
<td>6.665</td>
<td>4.945</td>
<td>SELECT * … ORDER BY … LIMIT 10;当前需要读全表数据，耗时占比较大，对于 LIMIT 数量较小的场景可延迟物化（先从TiFlash 获取主键，再读 TiKV）；</td>
<td>34.78%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q25</td>
<td>0.4399</td>
<td>0.3675</td>
<td></td>
<td>19.70%</td>
<td>Y</td>
<td>同 Q11</td>
</tr>
<tr>
<td>Q26</td>
<td>0.2029</td>
<td>0.1737</td>
<td></td>
<td>16.81%</td>
<td>Y</td>
<td>同 Q11</td>
</tr>
<tr>
<td>Q27</td>
<td>0.4221</td>
<td>0.3731</td>
<td></td>
<td>13.13%</td>
<td>Y</td>
<td>同 Q11；优化多 key 排序；</td>
</tr>
<tr>
<td>Q28</td>
<td>1.345</td>
<td>1.305</td>
<td></td>
<td>3.07%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q29</td>
<td>0</td>
<td>0</td>
<td>ERROR: Out Of Memory Quota!regexp_replace 无法下推 TiFlash</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q30</td>
<td>9.655</td>
<td>9.54</td>
<td></td>
<td>1.21%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q31</td>
<td>0.8385</td>
<td>0.7974</td>
<td></td>
<td>5.15%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q32</td>
<td>1.195</td>
<td>1.185</td>
<td></td>
<td>0.84%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q33</td>
<td>6.98</td>
<td>6.915</td>
<td></td>
<td>0.94%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q34</td>
<td>6.16</td>
<td>5.945</td>
<td></td>
<td>3.62%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q35</td>
<td>6.115</td>
<td>5.815</td>
<td></td>
<td>5.16%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q36</td>
<td>1.385</td>
<td>1.37</td>
<td></td>
<td>1.09%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q37</td>
<td>0.2158</td>
<td>0.2122</td>
<td></td>
<td>1.70%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q38</td>
<td>0.1363</td>
<td>0.1328</td>
<td></td>
<td>2.64%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q39</td>
<td>0.1134</td>
<td>0.1071</td>
<td></td>
<td>5.88%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q40</td>
<td>0.4411</td>
<td>0.4261</td>
<td></td>
<td>3.52%</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Q41</td>
<td>0.0754</td>
<td>0.0746</td>
<td></td>
<td>1.07%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q42</td>
<td>0.0572</td>
<td>0.0565</td>
<td></td>
<td>1.24%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q43</td>
<td>0.1397</td>
<td>0.1341</td>
<td></td>
<td>4.18%</td>
<td></td>
<td></td>
</tr>
<tr>
<td>SUM</td>
<td>76.6384</td>
<td>63.3055</td>
<td></td>
<td><strong>21.06%</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="TBD-ClickBench-Enhancement"><a href="#TBD-ClickBench-Enhancement" class="headerlink" title="[TBD] ClickBench Enhancement"></a>[TBD] ClickBench Enhancement</h4><h5 id="Optimize-Aggregation-In-ClickBench"><a href="#Optimize-Aggregation-In-ClickBench" class="headerlink" title="Optimize Aggregation In ClickBench"></a>Optimize Aggregation In ClickBench</h5><ul>
<li>Q11<ul>
<li><code>SELECT MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel &lt;&gt; &#39;&#39; GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10;</code></li>
<li>GROUP BY: STR(MobilePhoneModel), INT(UserID)</li>
</ul>
</li>
<li>Q12<ul>
<li><code>SELECT MobilePhone, MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel &lt;&gt; &#39;&#39; GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10;</code></li>
<li>GROUP BY: INT(MobilePhone), STR(MobilePhoneModel), INT(UserID)</li>
</ul>
</li>
<li>Q14<ul>
<li><code>SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase &lt;&gt; &#39;&#39; GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;</code></li>
<li>GROUP BY: STR(SearchPhrase), INT(UserID)</li>
</ul>
</li>
<li>Q15<ul>
<li><code>SELECT SearchEngineID, SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase &lt;&gt; &#39;&#39; GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10;</code></li>
<li>GROUP BY: INT(SearchEngineID), STR(SearchPhrase)</li>
</ul>
</li>
<li>Q17, Q18<ul>
<li>GROUP BY: INT(UserID), STR(SearchPhrase)</li>
</ul>
</li>
<li>Q23<ul>
<li><code>SELECT SearchPhrase, MIN(URL), MIN(Title), COUNT(*) AS c, COUNT(DISTINCT UserID) FROM hits WHERE Title LIKE &#39;%Google%&#39; AND URL NOT LIKE &#39;%.google.%&#39; AND SearchPhrase &lt;&gt; &#39;&#39; GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;</code></li>
<li>GROUP BY: INT(UserID), STR(SearchPhrase)</li>
<li>GROUP BY 非性能瓶颈</li>
</ul>
</li>
<li>Q34, Q35<ul>
<li><code>SELECT URL, COUNT(*) AS c FROM hits GROUP BY URL ORDER BY c DESC LIMIT 10;</code></li>
<li>经典的 top-n url 问题，TiFlash 的执行计划会按照多节点 Exchange 后聚合汇总。如果仅考虑单节点，则可进一步缩短链路并优化。</li>
</ul>
</li>
<li>Q40<ul>
<li><code>SELECT TraficSourceID, SearchEngineID, AdvEngineID, CASE WHEN (SearchEngineID = 0 AND AdvEngineID = 0) THEN Referer ELSE &#39;&#39; END AS Src, URL AS Dst, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate &gt;= &#39;2013-07-01&#39; AND EventDate &lt;= &#39;2013-07-31&#39; AND IsRefresh = 0 GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;</code></li>
<li>GROUP BY: TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst</li>
</ul>
</li>
</ul>
<h5 id="延迟物化"><a href="#延迟物化" class="headerlink" title="延迟物化"></a>延迟物化</h5><ul>
<li>Q24：<code>SELECT * ... ORDER BY ... LIMIT ...</code> 当前需要读全表数据，耗时占比较大，对于 LIMIT 数量较小的场景可延迟物化（先从TiFlash 获取主键，再读 TiKV）</li>
<li>改写为 <code>select * from hits where _tidb_rowid in (select _tidb_rowid FROM hits WHERE URL LIKE &#39;%google%&#39; ORDER BY EventTime LIMIT 10);</code><ul>
<li>查询耗时从 5.07s 变成 1.28s</li>
<li>性能提升 <strong>296.09%</strong></li>
</ul>
</li>
</ul>
<h5 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h5><ul>
<li>主要面向各类 AGG、JOIN 等计算任务</li>
</ul>
<h3 id="Ossinsight（PingCAP-内部测试）"><a href="#Ossinsight（PingCAP-内部测试）" class="headerlink" title="Ossinsight（PingCAP 内部测试）"></a>Ossinsight（PingCAP 内部测试）</h3><ul>
<li>模拟类似 Ossinsight 用到的 SQL，使用 TPCH-100 环境</li>
<li>本轮优化不包含 CI COLLATION，对于 Ossinsight TiFlash 中使用 UNICODE CI COLLATION 的场景收效有限<ul>
<li>事实情况是 Ossinsight 误用了 UNICODE COLLATION，本应该使用 UTF8 BIN 相关 COLLATION</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original: Original: rollback all PR in <a href="https://github.com/pingcap/tiflash/issues/5294">pingcap&#x2F;tiflash#5294</a> from commit <a href="https://github.com/pingcap/tiflash/commit/a0f986561a9a9442cc47e75cc9bb5437c614a4d4">a0f9865</a></th>
<th>Optimized</th>
<th></th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Ossinsight 类似场景：字符串比较过滤（tpch-100 数据集模拟）</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>select count(1) from lineitem where L_SHIPMODE &#x3D; ‘zzzz’;</td>
<td>1.07</td>
<td>0.73</td>
<td></td>
<td><strong>46.58%</strong></td>
<td>优化短字符串比较过滤 varchar(utf8mb4_bin): const-char(utf8mb4_bin)</td>
<td></td>
</tr>
<tr>
<td>select count(1) from lineitem where L_RETURNFLAG &#x3D; ‘R’;</td>
<td>1.16</td>
<td>0.66</td>
<td></td>
<td><strong>75.76%</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>字符串排序</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>select min(L_SHIPMODE) from lineitem;</td>
<td>0.93</td>
<td>0.76</td>
<td></td>
<td><strong>22.37%</strong></td>
<td>avx2 指令优化基础函数 memcmp</td>
<td></td>
</tr>
<tr>
<td>select max(L_SHIPMODE) from lineitem;</td>
<td>1.11</td>
<td>0.84</td>
<td></td>
<td><strong>32.14%</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h2><p><a href="https://github.com/pingcap/tiflash/issues/5294">Improve The Performance Of New Collation Releated Function And Executor</a></p>
<h3 id="优化-Multi-Key-Sort"><a href="#优化-Multi-Key-Sort" class="headerlink" title="优化 Multi Key Sort"></a>优化 Multi Key Sort</h3><p><a href="https://github.com/pingcap/tiflash/pull/5908">tiflash#5908</a></p>
<ul>
<li>关键点在于去虚拟化。单 Key 处理比较容易，多 Key 场景则要么 JIT，要么手动展开。此处用模板，当 Key 数量为 2 时，对常见的几个类型进行展开处理。<ul>
<li>UInt64</li>
<li>Int64</li>
<li>StringBin</li>
<li>StringBinPadding</li>
<li>StringWithCollatorGeneric</li>
</ul>
</li>
<li>TODO：对于 Key 数量大于等于 3 的场景，这种方法模板膨胀较严重，可能需要按需求设置快速路径。</li>
</ul>
<p>Benchmark</p>
<ul>
<li>tpch-10&#x2F;tpch-100&#x2F;clickbench</li>
<li>tiflash x 1</li>
<li>original: 6d0cbc8</li>
<li>data: clickbench</li>
<li>limit cpu up to 200%</li>
</ul>
<hr>
<ul>
<li>SQL<ul>
<li><code>SELECT SearchPhrase FROM hits WHERE SearchPhrase &lt;&gt; &#39;&#39; ORDER BY EventTime, SearchPhrase LIMIT 10;</code></li>
</ul>
</li>
<li>sort key 为 UINT64,STR(utf8 collator)</li>
<li>sort 开销占比较小</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>4.56</td>
<td>4.42</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>4.54</td>
<td>4.53</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>4.49</td>
<td>4.34</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>4.56</td>
<td>4.48</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>4.56</td>
<td>4.42</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>4.542</td>
<td>4.438</td>
<td></td>
<td>Optimized : Original</td>
<td>2.34%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>limit cpu up to 2000%</li>
<li>SQL<ul>
<li><code>SELECT ROW_NUMBER() OVER w1 FROM PART window w1 AS (PARTITION BY P_MFGR order by P_SIZE);</code></li>
</ul>
</li>
<li>sort key 为 STR(utf8 collator),UINT64</li>
<li>sort 开销占比较大</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>8.16</td>
<td>7.18</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>8.22</td>
<td>6.94</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>8.29</td>
<td>7.35</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>8.34</td>
<td>7.04</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>8.24</td>
<td>7.37</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>8.25</td>
<td>7.176</td>
<td></td>
<td>Optimized : Original</td>
<td>14.97%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>limit cpu up to 2000%</li>
<li>SQL<ul>
<li><code>EXPLAIN analyze SELECT ROW_NUMBER() OVER w1 FROM PART window w1 AS (PARTITION BY p_name ORDER BY p_partkey);</code></li>
</ul>
</li>
<li>sort key 为 INT64,STR(utf8 collator)</li>
<li>sort 开销占比约 30%</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>9.71</td>
<td>9.28</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.62</td>
<td>9.41</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.76</td>
<td>9.25</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.73</td>
<td>9.26</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.67</td>
<td>9.28</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>9.698</td>
<td>9.296</td>
<td></td>
<td>Optimized : Original</td>
<td>4.32%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>limit cpu up to 2000%</li>
<li>SQL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN analyze <span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> w1 <span class="keyword">FROM</span> PART <span class="keyword">window</span> w1 <span class="keyword">AS</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> P_MFGR <span class="keyword">ORDER</span> <span class="keyword">BY</span> p_name);</span><br><span class="line"><span class="operator">|</span>       └─Sort_13                    <span class="operator">|</span> <span class="number">20000000.00</span> <span class="operator">|</span> <span class="number">20000000</span> <span class="operator">|</span> mpp[tiflash] <span class="operator">|</span>               <span class="operator">|</span> tiflash_task:&#123;<span class="type">time</span>:<span class="number">17.6</span>s, loops:<span class="number">309</span>, threads:<span class="number">8</span>&#125;                                                               <span class="operator">|</span> tpch100_new.part.p_mfgr, tpch100_new.part.p_name, stream_count: <span class="number">8</span>                                                                                             <span class="operator">|</span> N<span class="operator">/</span>A      <span class="operator">|</span> N<span class="operator">/</span>A  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         └─ExchangeReceiver_12      <span class="operator">|</span> <span class="number">20000000.00</span> <span class="operator">|</span> <span class="number">20000000</span> <span class="operator">|</span> mpp[tiflash] <span class="operator">|</span>               <span class="operator">|</span> tiflash_task:&#123;<span class="type">time</span>:<span class="number">7.18</span>s, loops:<span class="number">1254</span>, threads:<span class="number">8</span>&#125;                                                              <span class="operator">|</span> stream_count: <span class="number">8</span>                                                                                                                                               <span class="operator">|</span> N<span class="operator">/</span>A      <span class="operator">|</span> N<span class="operator">/</span>A  <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sort key 为 STR(utf8 collator),STR(utf8 collator)</li>
<li>sort 开销占比较大</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Sort end</th>
<th>Sort start</th>
<th>Original: sort_end - sort_start</th>
<th>Sort end</th>
<th>Sort start</th>
<th>Optimized: sort_end - sort_start</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>17.6</td>
<td>7.18</td>
<td>10.42</td>
<td>15.6</td>
<td>6.15</td>
<td>9.45</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>16.9</td>
<td>6.58</td>
<td>10.32</td>
<td>15.2</td>
<td>5.82</td>
<td>9.38</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>17.8</td>
<td>7.07</td>
<td>10.73</td>
<td>15.7</td>
<td>5.95</td>
<td>9.75</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>17.1</td>
<td>6.88</td>
<td>10.22</td>
<td>15.9</td>
<td>5.87</td>
<td>10.03</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>18.8</td>
<td>8.04</td>
<td>10.76</td>
<td>16</td>
<td>6.07</td>
<td>9.93</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td></td>
<td></td>
<td>10.49</td>
<td></td>
<td></td>
<td>9.708</td>
<td></td>
<td>Optimized : Original</td>
<td>8.06%</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>18.3</td>
<td>16.34</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>18.27</td>
<td>16.62</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>18.7</td>
<td>16.57</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>18.57</td>
<td>16.52</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>18.55</td>
<td>16.63</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>18.478</td>
<td>16.536</td>
<td></td>
<td>Optimized : Original</td>
<td>11.74%</td>
</tr>
</tbody></table>
<h3 id="优化-Aggregation-And-Join"><a href="#优化-Aggregation-And-Join" class="headerlink" title="优化 Aggregation And Join"></a>优化 Aggregation And Join</h3><p><a href="https://github.com/pingcap/tiflash/pull/6135">tiflash#6135</a></p>
<p><a href="https://github.com/pingcap/tiflash/pull/5834">tiflash#5834</a></p>
<ul>
<li>关键点在于去虚拟化。TiFlash 和 Clickhouse 代码中已针对多种场景手动展开：<ul>
<li>常见类型的单 Agg&#x2F;Join Key，多整型数 Key，部分 Nullable Key，等。</li>
</ul>
</li>
<li>复杂多 Key 场景则要么 JIT，要么手动展开。Clickhouse 代码中针对 Agg 场景已有 JIT 支持，默认不开启。</li>
<li>此处用模板，当 Key 数量小于等于 2 时，对常见的几个类型进行展开处理<ul>
<li>one string key<ul>
<li>type: str-bin, str-bin-padding</li>
<li><a href="https://github.com/pingcap/tiflash/blob/1a50e00431e78b03d7d6ff3341ece621e741843a/dbms/src/Interpreters/Aggregator.h#L207-L236">struct AggregationMethodOneKeyStringNoCache</a></li>
</ul>
</li>
<li>two keys<ul>
<li>type: number-64-bytes, str-bin, str-bin-padding</li>
<li><a href="https://github.com/pingcap/tiflash/blob/1a50e00431e78b03d7d6ff3341ece621e741843a/dbms/src/Interpreters/Aggregator.h#L269-L350">struct AggregationMethodFastPathTwoKeysNoCache</a></li>
</ul>
</li>
</ul>
</li>
<li>TODO：对于 Key 数量大于等于 3 的场景，这种方法模板膨胀较严重，可能需要按需求设置快速路径。</li>
</ul>
<p>Benchmark</p>
<ul>
<li>limit cpu up to 2000%</li>
<li>TiFlash x 1</li>
<li>TIFLASH REPLICA x 1</li>
<li>original commit: 49ca973</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/ClickHouse/ClickBench/tree/d661b49dffda015415366f0e12aa1ebe3424c311/mysql">ClickBench</a></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q14</td>
<td>2.075</td>
<td>1.835</td>
<td>13.08%</td>
</tr>
<tr>
<td>Q15</td>
<td>1.21</td>
<td>1.155</td>
<td>4.76%</td>
</tr>
<tr>
<td>Q17</td>
<td>3.695</td>
<td>3.365</td>
<td>9.81%</td>
</tr>
<tr>
<td>Q18</td>
<td>2.925</td>
<td>2.805</td>
<td>4.28%</td>
</tr>
<tr>
<td>Q34</td>
<td>6.4</td>
<td>6.085</td>
<td>5.18%</td>
</tr>
<tr>
<td>Q35</td>
<td>6.575</td>
<td>6.28</td>
<td>4.70%</td>
</tr>
<tr>
<td>TPCH-100</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q1</td>
<td>7.28</td>
<td>7.08</td>
<td>2.82%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>TiFlash x 1</li>
<li>Data: tpch-10</li>
<li>original a8c8cb1</li>
<li>limit cpu up to 500%</li>
<li>SQL <code>select max(l_comment) from lineitem;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>7.71</td>
<td>7.05</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>7.75</td>
<td>6.96</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>7.95</td>
<td>7.07</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>7.61</td>
<td>7.23</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>7.83</td>
<td>7.07</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>7.77</td>
<td>7.076</td>
<td></td>
<td>Optimized : Original</td>
<td>9.81%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>Data: tpch-100</li>
<li>limit cpu up to 2000%</li>
<li>SQL: tpch Q1</li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>11.48</td>
<td>10.68</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>10.96</td>
<td>10.5</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.18</td>
<td>10.66</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.16</td>
<td>10.67</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.18</td>
<td>10.51</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>11.192</td>
<td>10.604</td>
<td></td>
<td>Optimized : Original</td>
<td>5.55%</td>
</tr>
</tbody></table>
<h3 id="CPU-Cache-踩坑"><a href="#CPU-Cache-踩坑" class="headerlink" title="CPU Cache 踩坑"></a>CPU Cache 踩坑</h3><p><a href="https://github.com/pingcap/tiflash/pull/5996">tiflash#5996</a></p>
<p>内部测试中存储模块出现性能下降 <a href="https://github.com/pingcap/tiflash/issues/5949">tiflash#5949</a>，其根因在于 commit <a href="https://github.com/pingcap/tiflash/commit/dfac6a50b09711d12a3b6909126782d1b8ed363d">dfac6a5</a> 将默认 <code>memcpy</code> 函数替换为 <a href="https://github.com/pingcap/tiflash/blob/bd1625562fb782d3052b0288f7b905521646c39a/libs/libmemcpy/folly/memcpy.S">__folly_memcpy</a>。在 commit 的 benchmark 中，可知 <code>__folly_memcpy</code> 在小数据下（size &lt; 80 B）性能不如之前的实现，但对于存储而言，这类小数据拷贝在全局所占比例不高，理论上不应该产生如此巨大的负面影响。</p>
<h4 id="Non-temporal-Memory-Copy"><a href="#Non-temporal-Memory-Copy" class="headerlink" title="Non-temporal Memory Copy"></a>Non-temporal Memory Copy</h4><p>分析代码可知，<code>__folly_memcpy</code> 定义了一个阈值 <a href="https://github.com/pingcap/tiflash/blob/bd1625562fb782d3052b0288f7b905521646c39a/libs/libmemcpy/folly/memcpy.S#L98-L101">NON_TEMPORAL_STORE_THRESHOLD</a>（32768 即 32K），其作用在于如果需要拷贝的内存大于阈值且双方地址均已对齐，就利用 <code>NON-TEMPORAL</code> 的方式来减少对 CPU Cache 的污染。</p>
<ul>
<li><a href="https://github.com/pingcap/tiflash/blob/bd1625562fb782d3052b0288f7b905521646c39a/libs/libmemcpy/folly/memcpy.S#L329-L353">folly&#x2F;memcpy.S#L329-L353</a></li>
</ul>
<p>现代 CPU 普遍采用多级缓存，以 <code>AMD Ryzen 9 5900X</code> 为例，其在 <code>WSL2</code> 中参数信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getconf -a | grep CACHE</span><br><span class="line">LEVEL1_ICACHE_SIZE                 32768</span><br><span class="line">LEVEL1_ICACHE_ASSOC                8</span><br><span class="line">LEVEL1_ICACHE_LINESIZE             64</span><br><span class="line">LEVEL1_DCACHE_SIZE                 32768</span><br><span class="line">LEVEL1_DCACHE_ASSOC                8</span><br><span class="line">LEVEL1_DCACHE_LINESIZE             64</span><br><span class="line">LEVEL2_CACHE_SIZE                  524288</span><br><span class="line">LEVEL2_CACHE_ASSOC                 8</span><br><span class="line">LEVEL2_CACHE_LINESIZE              64</span><br><span class="line">LEVEL3_CACHE_SIZE                  67108864</span><br><span class="line">LEVEL3_CACHE_ASSOC                 0</span><br><span class="line">LEVEL3_CACHE_LINESIZE              64</span><br><span class="line">LEVEL4_CACHE_SIZE                  0</span><br><span class="line">LEVEL4_CACHE_ASSOC                 0</span><br><span class="line">LEVEL4_CACHE_LINESIZE              0</span><br></pre></td></tr></table></figure>

<p>通常每个 CPU 含有独立的 L1 和 L2 缓存，L3 缓存为所有核共享。L1 缓存分为 L1i（存储指令） 和 L1d（存储数据），L2 和 L3 缓存不区分指令和数据。参考 <a href="https://www.7-cpu.com/cpu/Zen2.html">7-cpu.com&#x2F;cpu&#x2F;Zen2</a> 和 <a href="https://en.wikichip.org/wiki/amd/microarchitectures/zen_3">amd&#x2F;microarchitectures&#x2F;zen_3</a>，缓存数据延迟约为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">L1 Data Cache Latency:</span><br><span class="line">4 cycles for simple access via pointer</span><br><span class="line">5 cycles for access with complex address calculation (size_t n, *p; n = p[n]).</span><br><span class="line"></span><br><span class="line">AMD DOC: 7- or 8-cycle FPU load-to-use latency.</span><br><span class="line"></span><br><span class="line">L2 Cache Latency = 12 cycles</span><br><span class="line"></span><br><span class="line">L3 Cache Latency = 38 cycles</span><br><span class="line"></span><br><span class="line">RAM Latency = 38 cycles + 66 ns</span><br></pre></td></tr></table></figure>

<p>绝大多数情况下，多级缓存机制可以显著增强读写内存数据的性能。但对于已知的 2 种场景而言，刷新 CPU 缓存的意义不大：</p>
<ul>
<li>临时内存拷贝，即内存数据短期不再被用到</li>
<li>大块内存拷贝，需要拷贝的内存大小超过 CPU 缓存，容易导致其他模块的有效缓存被刷掉，造成缓存污染</li>
</ul>
<p>glibc 的实现也考虑到了这一点，例如在 <code>Debian GLIBC 2.28-10</code> 中，memcpy 函数的一处逻辑会判断需拷贝的内存大小，超过 <code>60MB</code>(<code>mallwatch@@GLIBC_2.2.5+0x8</code>) 则用 <a href="https://www.felixcloutier.com/x86/movntdq">movntdq</a> 指令将数据从寄存器写到内存。该类指令采用 <code>Non-temporal Hint</code> 来避免 CPU 缓存数据。与之对应的 <a href="https://www.felixcloutier.com/x86/movntdqa">movntdqa</a> 指令则是将数据从内存读取到寄存器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line"></span><br><span class="line">GNU C Library (Debian GLIBC 2.28-10) stable release version 2.28.</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.</span><br><span class="line">There is NO warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 8.3.0.</span><br><span class="line">libc ABIs: UNIQUE IFUNC ABSOLUTE</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.debian.org/Bugs/&gt;.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian GNU/Linux 10.9</span></span><br><span class="line">objdump -r -C -D /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line"></span><br><span class="line">   a2232:       48 3b 15 3f e2 11 00    cmp    0x11e23f(%rip),%rdx        <span class="comment"># 1c0478 &lt;mallwatch@@GLIBC_2.2.5+0x8&gt;</span></span><br><span class="line">   a2239:       0f 87 cc 00 00 00       ja     a230b &lt;memcpy@GLIBC_2.2.5+0x2eb&gt;</span><br><span class="line">   ...</span><br><span class="line">   a230b:       4c 8d 14 17             lea    (%rdi,%rdx,1),%r10</span><br><span class="line">   a230f:       4c 39 d6                cmp    %r10,%rsi</span><br><span class="line">   a2312:       0f 82 27 ff ff ff       jb     a223f &lt;memcpy@GLIBC_2.2.5+0x21f&gt;</span><br><span class="line">   a2318:       0f 18 8e 80 00 00 00    prefetcht0 0x80(%rsi)</span><br><span class="line">   a231f:       0f 18 8e c0 00 00 00    prefetcht0 0xc0(%rsi)</span><br><span class="line">   a2326:       0f 10 06                movups (%rsi),%xmm0</span><br><span class="line">   a2329:       0f 10 4e 10             movups 0x10(%rsi),%xmm1</span><br><span class="line">   a232d:       0f 10 56 20             movups 0x20(%rsi),%xmm2</span><br><span class="line">   a2331:       0f 10 5e 30             movups 0x30(%rsi),%xmm3</span><br><span class="line">   a2335:       48 83 c6 40             add    <span class="variable">$0x40</span>,%rsi</span><br><span class="line">   a2339:       48 83 ea 40             sub    <span class="variable">$0x40</span>,%rdx</span><br><span class="line">   a233d:       66 0f e7 07             movntdq %xmm0,(%rdi)</span><br><span class="line">   a2341:       66 0f e7 4f 10          movntdq %xmm1,0x10(%rdi)</span><br><span class="line">   a2346:       66 0f e7 57 20          movntdq %xmm2,0x20(%rdi)</span><br><span class="line">   a234b:       66 0f e7 5f 30          movntdq %xmm3,0x30(%rdi)</span><br><span class="line">   a2350:       48 83 c7 40             add    <span class="variable">$0x40</span>,%rdi</span><br><span class="line">   a2354:       48 83 fa 40             cmp    <span class="variable">$0x40</span>,%rdx</span><br><span class="line">   a2358:       77 be                   ja     a2318 &lt;memcpy@GLIBC_2.2.5+0x2f8&gt;</span><br><span class="line">   a235a:       0f ae f8                sfence </span><br><span class="line">   a235d:       0f 11 29                movups %xmm5,(%rcx)</span><br><span class="line">   a2360:       0f 11 71 f0             movups %xmm6,-0x10(%rcx)</span><br><span class="line">   a2364:       0f 11 79 e0             movups %xmm7,-0x20(%rcx)</span><br><span class="line">   a2368:       44 0f 11 41 d0          movups %xmm8,-0x30(%rcx)</span><br><span class="line">   a236d:       41 0f 11 23             movups %xmm4,(%r11)</span><br><span class="line">   a2371:       c3                      retq         </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.1.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint64_t</span> mallwatch;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// mallwatch@@GLIBC_2.2.5+0x8</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%.2f MB\n&quot;</span>, (&amp;mallwatch)[<span class="number">1</span>] / <span class="number">1024.0</span> / <span class="number">1024.0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filename=`<span class="built_in">mktemp</span>` &amp;&amp; clang++ -fPIC test.1.cpp -o <span class="variable">$&#123;filename&#125;</span> &amp;&amp; <span class="variable">$&#123;filename&#125;</span> &amp;&amp; <span class="built_in">rm</span> <span class="variable">$&#123;filename&#125;</span></span><br><span class="line">60.00 MB</span><br></pre></td></tr></table></figure>

<p>由于内存相对 CPU 缓存的数据延迟存在数量级差距，对于马上会被复用的内存数据，使用 <code>NON-TEMPORAL</code> 的方式进行拷贝无疑会严重拖慢性能。尤其是对于 OLAP 类的引擎而言，大块内存的使用较为频繁，那么该如何选择启用 <code>NON-TEMPORAL</code> 的时机？</p>
<ul>
<li>服务器端虚拟化 CPU 常见缓存大小为 L1 32KB，L2 256KB，L3 25MB～64MB</li>
<li>folly 设置了固定的阈值 32KB</li>
<li><code>Debian GLIBC 2.28-10</code> 用全局变量作为阈值，进程初始化时设置，大约是 L3 缓存<ul>
<li>其他版本也有采用 L1 缓存相关大小作为阈值，不同环境具体实现差异较大</li>
</ul>
</li>
<li>TiFlash 默认不用这种方式<ul>
<li>对于大部分存储|计算场景，最小数据单元为 Block（通常包含 8192 行数据）。即便是单 int64 类型列，大小也至少有 <code>8192 * 8 = 64KB</code>。如果是 str 类型列，每行至少还有 2 个 uint64 字段表示 offset 和 size，则总量大于 <code>8192 * (8 + 8 + 1) = 136KB</code>。</li>
<li>在 memcpy 函数中启用 <code>NON-TEMPORAL</code> 的合理阈值至少是大于 L2 缓存，具体得根据业务形态调整</li>
<li>实际场景中，如果需要进行大块临时内存拷贝，最好在逻辑实现上直接选择 <code>NON-TEMPORAL</code> 的实现而非调用 memcpy</li>
</ul>
</li>
</ul>
<h3 id="优化-memcpy"><a href="#优化-memcpy" class="headerlink" title="优化 memcpy"></a>优化 memcpy</h3><p><a href="https://github.com/pingcap/tiflash/pull/6281">tiflash#6281</a></p>
<ul>
<li>folly 纯汇编实现的 <a href="https://github.com/pingcap/tiflash/blob/bd1625562fb782d3052b0288f7b905521646c39a/libs/libmemcpy/folly/memcpy.S">__folly_memcpy</a> 主要使用 avx2 指令优化，然而当拷贝数据量大于 <code>32K(L1 cache size)</code> 时表现较差，具体原因见上文 <a href="#CPU-Cache-%E8%B8%A9%E5%9D%91">CPU Cache 踩坑
</a>。旧版实现 <a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/sse2_memcpy.h#L28">sse2_inline_memcpy</a> 则主要基于 sse2。</li>
<li>该 PR 旨在提供一种更高效的 <a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/memcpy.h#L28">inline_memcpy</a> 实现。</li>
</ul>
<p><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_memcpy.h">avx2_inline_memcpy</a></p>
<ul>
<li>inline 实现需保证代码不过于复杂，尽可能紧凑，可牺牲些许性能（这类特定场景编译器生成的汇编码一般不如人工手写），否则不如用非 inline 的汇编实现。</li>
<li>为 size 不大于 32 字节的场景设置优先路径<ul>
<li>size 以 16，8，4，2 进行划分，对应寄存器的大小</li>
<li>为了 benchmark 结果好看，分支排列顺序可以优先大 size。本文的实现则是判断 8～16 优先于 16～32。</li>
<li>真实场景中，这部分排列所能影响的分支预测｜跳转开销占比相对较小</li>
</ul>
</li>
<li>由于 memcpy 要求 src 和 dst 数据范围不可重叠，前后各按可用的寄存器大小进行拷贝</li>
<li>对于 size 大于 256 的场景，先将 dst 地址按照 32（ymm 寄存器大小）对齐</li>
<li>Software Prefetch（使用内存预取指令）对于已经在 CPU 缓存内的数据收益不大，读写连续的数据，现代 CPU 大多已有 <a href="#Hardware-Prefetch">Hardware Prefetch</a> 来优化<ul>
<li>参考 <a href="https://en.algorithmica.org/hpc/cpu-cache/prefetching/">algorithmica&#x2F;hpc</a>：Software Prefetch 配合 <a href="#Non-temporal-Memory-Copy">non-temporal</a> 读写的场景较为有用</li>
</ul>
</li>
</ul>
<h4 id="Benchmark-of-avx2-inline-memcpy"><a href="#Benchmark-of-avx2-inline-memcpy" class="headerlink" title="Benchmark of avx2_inline_memcpy"></a>Benchmark of <code>avx2_inline_memcpy</code></h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Run on (40 X 2386.24 MHz CPU s)</span><br><span class="line">CPU Caches:</span><br><span class="line">  L1 Data 32 KiB (x20)</span><br><span class="line">  L1 Instruction 32 KiB (x20)</span><br><span class="line">  L2 Unified 256 KiB (x20)</span><br><span class="line">  L3 Unified 25600 KiB (x2)</span><br><span class="line">Load Average: 6.72, 6.65, 6.07</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Benchmark                                                                         Time             CPU   Iterations</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">MemUtilsCopy_1_20_3_true_20000/stl_mempy/iterations:500                      446194 ns       446197 ns          500</span><br><span class="line">MemUtilsCopy_1_20_3_true_20000/inline_clickhouse_memcpy/iterations:500       140571 ns       140528 ns          500</span><br><span class="line">MemUtilsCopy_1_20_3_true_20000/sse2_memcpy/iterations:500                    150496 ns       150321 ns          500</span><br><span class="line">MemUtilsCopy_1_20_3_true_20000/avx2_memcpy/iterations:500                    137616 ns       137586 ns          500</span><br><span class="line">MemUtilsCopy_1_20_3_true_20000/folly_memcpy/iterations:500                   181997 ns       182004 ns          500</span><br><span class="line">MemUtilsCopy_1_40_3_true_20000/stl_mempy/iterations:500                      456534 ns       456549 ns          500</span><br><span class="line">MemUtilsCopy_1_40_3_true_20000/inline_clickhouse_memcpy/iterations:500       176257 ns       176264 ns          500</span><br><span class="line">MemUtilsCopy_1_40_3_true_20000/sse2_memcpy/iterations:500                    178094 ns       178086 ns          500</span><br><span class="line">MemUtilsCopy_1_40_3_true_20000/avx2_memcpy/iterations:500                    165250 ns       165256 ns          500</span><br><span class="line">MemUtilsCopy_1_40_3_true_20000/folly_memcpy/iterations:500                   186537 ns       186544 ns          500</span><br><span class="line">MemUtilsCopy_1_80_3_true_20000/stl_mempy/iterations:500                      476534 ns       476510 ns          500</span><br><span class="line">MemUtilsCopy_1_80_3_true_20000/inline_clickhouse_memcpy/iterations:500       238987 ns       238996 ns          500</span><br><span class="line">MemUtilsCopy_1_80_3_true_20000/sse2_memcpy/iterations:500                    302893 ns       302887 ns          500</span><br><span class="line">MemUtilsCopy_1_80_3_true_20000/avx2_memcpy/iterations:500                    231339 ns       231348 ns          500</span><br><span class="line">MemUtilsCopy_1_80_3_true_20000/folly_memcpy/iterations:500                   200658 ns       200665 ns          500</span><br><span class="line">MemUtilsCopy_1_200_3_true_20000/stl_mempy/iterations:500                     660466 ns       660356 ns          500</span><br><span class="line">MemUtilsCopy_1_200_3_true_20000/inline_clickhouse_memcpy/iterations:500      440048 ns       439948 ns          500</span><br><span class="line">MemUtilsCopy_1_200_3_true_20000/sse2_memcpy/iterations:500                   427743 ns       427739 ns          500</span><br><span class="line">MemUtilsCopy_1_200_3_true_20000/avx2_memcpy/iterations:500                   198850 ns       198876 ns          500</span><br><span class="line">MemUtilsCopy_1_200_3_true_20000/folly_memcpy/iterations:500                  243985 ns       243973 ns          500</span><br><span class="line">MemUtilsCopy_1_2000_3_true_20000/stl_mempy/iterations:500                   1535333 ns      1535242 ns          500</span><br><span class="line">MemUtilsCopy_1_2000_3_true_20000/inline_clickhouse_memcpy/iterations:500     847673 ns       847547 ns          500</span><br><span class="line">MemUtilsCopy_1_2000_3_true_20000/sse2_memcpy/iterations:500                  793617 ns       793608 ns          500</span><br><span class="line">MemUtilsCopy_1_2000_3_true_20000/avx2_memcpy/iterations:500                  682924 ns       682915 ns          500</span><br><span class="line">MemUtilsCopy_1_2000_3_true_20000/folly_memcpy/iterations:500                 662669 ns       662652 ns          500</span><br></pre></td></tr></table></figure>

<p><strong>当内存拷贝的数据量较大（例如大于 <code>L3 Cache Size x 2</code>），则内存 I&#x2F;O 成为瓶颈，此时各类实现性能差异不大</strong></p>
<h3 id="优化-memcmp-memequal-memchr-strstr"><a href="#优化-memcmp-memequal-memchr-strstr" class="headerlink" title="优化 memcmp memequal memchr strstr"></a>优化 memcmp memequal memchr strstr</h3><p><a href="https://github.com/pingcap/tiflash/pull/5658">tiflash#5658</a></p>
<ul>
<li>基于 avx2 实现 <code>avx2_mem_cmp</code> 和 <code>avx2_mem_equal</code><ul>
<li>原本基于 avx512 的 <a href="https://github.com/pingcap/tiflash/blob/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/libs/libcommon/include/common/mem_utils.h#L134-L183">mem_utils::memoryEqual</a> 面向小字符串比较性能比 <code>std::memcmp</code> 更慢，重新基于 avx2 实现</li>
</ul>
</li>
<li>基于 avx2 实现字符串搜索相关基础函数 <code>avx2_memchr</code> 和 <code>avx2_strstr</code></li>
</ul>
<h4 id="Implementation-Of-Mem-Utils"><a href="#Implementation-Of-Mem-Utils" class="headerlink" title="Implementation Of Mem Utils"></a>Implementation Of Mem Utils</h4><p><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_mem_utils.h#L191-L365">avx2_mem_cmp</a><br><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_mem_utils.h#L367-L527">avx2_mem_equal</a></p>
<ul>
<li>为 size 不大于 32 的场景设置优先路径<ul>
<li>本文的实现采用了较为简单的 switch case 方式，也可以划分 size 并按需调整分支排列顺序</li>
</ul>
</li>
<li>对于 size 大于 256 的场景，先将地址按照 32（ymm 寄存器大小）对齐</li>
<li>mem cmp 相较于 mem equal 稍微复杂，本质上都是利用 SIMD 指令按批判断数据是否相等，对于不等的情况，mem cmp 还需找到不等的字节并读取到 32 位寄存器中进行相减</li>
<li>处理连续内存，暂无需考虑预取</li>
</ul>
<p><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L264-L282">avx2_memchr</a><br><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L260-L263">avx2_strstr</a></p>
<ul>
<li>字符串直接匹配搜索的算法有很多，典型的类似 KMP &#x2F; Aho–Corasick 之流会用到状态机。<code>std::string_view::find</code> 则是调用 <code>memchr</code> 找到目标的第一个字符，再通过 <code>bcmp</code> 判断子串是否相等并循环往复。</li>
<li>可以假设，通常情况下用于匹配的数据是有意义的且含有一定的特征，状态机算法引入额外的空间开销以及生成构建开销反而低效。<ul>
<li>如果考虑非朴素场景，则可以另外进行针对性优化，例如搜索引擎所用的倒排索引。</li>
</ul>
</li>
<li><code>avx2_strstr</code> 实现上则是通过 <code>avx2_memchr</code> 找到第一个目标字符，再通过 <code>avx2_mem_equal</code> 判断相等，以此循环直到完全匹配</li>
<li><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L195-L248">avx2_strstr.h#L195-L248</a> 考虑到绝大部分场景下目标字符串都不大，所以此处实现上是用模板封装 size 不大于 16 的场景，进一步内联优化以减少分支</li>
<li>处理内存对齐需注意的点：<a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L126-L159">avx2_strstr.h#L126-L159</a><ul>
<li>内存分配器以 Page 为基准单元向操作系统申请并管理内存<ul>
<li>Page 大小通常为 4KB，至少是一个 block（512B）</li>
<li>如果内存地址 S 是合法的，则 <code>[ALIGN_TO_PAGE_SIZE(S), ALIGN_TO_PAGE_SIZE(S) + PAGE_SIZE)</code> 范围内均是合法地址</li>
</ul>
</li>
<li>为减少分支，此处直接先将地址按 32 对齐并通过 avx2 指令计算标志位。对于多算的部分，则可根据对齐时的偏移去除。<a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L35-L58">avx2_strstr.h#L35-L58</a> 末尾处理也是同理。</li>
</ul>
</li>
<li><a href="https://github.com/pingcap/tiflash/blob/77108d5efc869867c706c4f0b88ee7a50f07ce93/libs/libcommon/include/common/avx2_strstr.h#L77-L116">avx2_strstr.h#L77-L116</a> 按照 128 个字节做批处理，优先乐观检测过滤</li>
</ul>
<h4 id="Benchmark-Of-Mem-Utils"><a href="#Benchmark-Of-Mem-Utils" class="headerlink" title="Benchmark Of Mem Utils"></a>Benchmark Of Mem Utils</h4><ul>
<li>参考 Benchmark Collation Impact 中的测试用例</li>
<li>original 8404e656</li>
</ul>
<table>
<thead>
<tr>
<th>Time(ns)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td>CollationEqBench&#x2F;UTF8MB4_BIN</td>
<td>12428711</td>
<td>6228798</td>
<td></td>
<td>99.54%</td>
</tr>
<tr>
<td>CollationEqBench&#x2F;UTF8_BIN</td>
<td>12956705</td>
<td>6141843</td>
<td></td>
<td>110.96%</td>
</tr>
<tr>
<td>CollationEqBench&#x2F;ASCII_BIN</td>
<td>12625723</td>
<td>6229335</td>
<td></td>
<td>102.68%</td>
</tr>
<tr>
<td>CollationEqBench&#x2F;BINARY</td>
<td>11870078</td>
<td>5837615</td>
<td></td>
<td>103.34%</td>
</tr>
<tr>
<td>CollationEqBench&#x2F;LATIN1_BIN</td>
<td>13768201</td>
<td>6732640</td>
<td></td>
<td>104.50%</td>
</tr>
<tr>
<td>CollationLikeBench&#x2F;UTF8MB4_BIN</td>
<td>37940667</td>
<td>20185747</td>
<td></td>
<td>87.96%</td>
</tr>
<tr>
<td>CollationLikeBench&#x2F;UTF8_BIN</td>
<td>37803575</td>
<td>19914106</td>
<td></td>
<td>89.83%</td>
</tr>
<tr>
<td>CollationLikeBench&#x2F;ASCII_BIN</td>
<td>36860160</td>
<td>17999743</td>
<td></td>
<td>104.78%</td>
</tr>
<tr>
<td>CollationLikeBench&#x2F;BINARY</td>
<td>37449881</td>
<td>17599053</td>
<td></td>
<td>112.79%</td>
</tr>
<tr>
<td>CollationLikeBench&#x2F;LATIN1_BIN</td>
<td>37503432</td>
<td>17675036</td>
<td></td>
<td>112.18%</td>
</tr>
</tbody></table>
<ul>
<li>测试 STL 库中的 <code>bcmp</code>，<code>mem_utils::memoryEqual</code> 以及自定义 <code>avx2_mem_equal</code> 性能对比</li>
<li>测试 STL 库中的 <code>std::string_view::find</code> 和自定义 <code>avx2_strstr</code> 性能对比</li>
</ul>
<table>
<thead>
<tr>
<th>Time(ns)</th>
<th>STL</th>
<th>Original-avx512</th>
<th>Optimized-avx2</th>
<th>Improvement: (STL) &#x2F; (Optimized) - 1.0</th>
<th>Improvement: (Original) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td>check mem eq: MemUtilsEqual_${str-size}</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>MemUtilsEqual_13</td>
<td>4.46</td>
<td>10.3</td>
<td>3.21</td>
<td>38.94%</td>
<td>220.87%</td>
</tr>
<tr>
<td>MemUtilsEqual_65</td>
<td>5.25</td>
<td>9.83</td>
<td>4.44</td>
<td>18.24%</td>
<td>121.40%</td>
</tr>
<tr>
<td>MemUtilsEqual_100</td>
<td>9.31</td>
<td>11.3</td>
<td>5.32</td>
<td>75.00%</td>
<td>112.41%</td>
</tr>
<tr>
<td>MemUtilsEqual_10000</td>
<td>299</td>
<td>377</td>
<td>213</td>
<td>40.38%</td>
<td>77.00%</td>
</tr>
<tr>
<td>MemUtilsEqual_100000</td>
<td>3657</td>
<td>4009</td>
<td>3382</td>
<td>8.13%</td>
<td>18.54%</td>
</tr>
<tr>
<td>MemUtilsEqual_1000000</td>
<td>62265</td>
<td>53157</td>
<td>52600</td>
<td>18.37%</td>
<td>1.06%</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>str find: MemUtilsStrStr_${src-str-size}_${needle-str-size}</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_1024_1</td>
<td>30882</td>
<td></td>
<td>21275</td>
<td>45.16%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_1024_7</td>
<td>34927</td>
<td></td>
<td>21279</td>
<td>64.14%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_1024_15</td>
<td>39364</td>
<td></td>
<td>23161</td>
<td>69.96%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_1024_31</td>
<td>40628</td>
<td></td>
<td>29435</td>
<td>38.03%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_1024_63</td>
<td>37381</td>
<td></td>
<td>26141</td>
<td>43.00%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_80_1</td>
<td>6130</td>
<td></td>
<td>3977</td>
<td>54.14%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_80_7</td>
<td>11720</td>
<td></td>
<td>6278</td>
<td>86.68%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_80_15</td>
<td>11585</td>
<td></td>
<td>5423</td>
<td>113.63%</td>
<td></td>
</tr>
<tr>
<td>MemUtilsStrStr_80_31</td>
<td>11467</td>
<td></td>
<td>9530</td>
<td>20.33%</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>测试 STL 库中 <code>memcmp</code> 同自定义 <code>avx2_mem_cmp</code> 对比</li>
</ul>
<table>
<thead>
<tr>
<th>Time(ns)</th>
<th>STL: (GNU libc) 2.17</th>
<th>Optimized-avx2</th>
<th>Improvement: (STL) &#x2F; (Optimized) - 1.0</th>
</tr>
</thead>
<tbody><tr>
<td><code>MemUtilsCmp_$&#123;str-size&#125;_$&#123;loop_times&#125;: check mem-cmp for str for specific times</code></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>MemUtilsCmp_2_20</td>
<td>66.5</td>
<td>51.9</td>
<td>28.13%</td>
</tr>
<tr>
<td>MemUtilsCmp_13_20</td>
<td>75.3</td>
<td>66</td>
<td>14.09%</td>
</tr>
<tr>
<td>MemUtilsCmp_65_20</td>
<td>126</td>
<td>106</td>
<td>18.87%</td>
</tr>
<tr>
<td>MemUtilsCmp_100_20</td>
<td>167</td>
<td>106</td>
<td>57.55%</td>
</tr>
<tr>
<td>MemUtilsCmp_10000_20</td>
<td>5145</td>
<td>3740</td>
<td>37.57%</td>
</tr>
<tr>
<td>MemUtilsCmp_100000_20</td>
<td>81996</td>
<td>68577</td>
<td>19.57%</td>
</tr>
<tr>
<td>MemUtilsCmp_1000000_20</td>
<td>1254279</td>
<td>1112721</td>
<td>12.72%</td>
</tr>
</tbody></table>
<ul>
<li>测试分别使用 <code>avx2_strstr</code> 和 <code>std::string_view::find</code> 的 <code>LIKE()</code> 表达式计算性能</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> orders <span class="keyword">where</span> o_comment <span class="keyword">like</span> <span class="string">&#x27;%pending%deposits%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>10.75</td>
<td>8.72</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>10.92</td>
<td>8.87</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>10.98</td>
<td>8.35</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>10.7</td>
<td>8.64</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>10.77</td>
<td>8.5</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>10.824</td>
<td>8.616</td>
<td></td>
<td>Optimized : Original</td>
<td>25.63%</td>
</tr>
</tbody></table>
<h3 id="优化字符串比较"><a href="#优化字符串比较" class="headerlink" title="优化字符串比较"></a>优化字符串比较</h3><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p><a href="https://github.com/pingcap/tiflash/pull/5299">tiflash#5299</a></p>
<ul>
<li>早期版本的实现为 collation 处理引入了虚函数 <a href="https://github.com/pingcap/tiflash/blob/97342db2a1dd705b1bd98f3481d51f48a4f0300d/dbms/src/Storages/Transaction/Collator.h#L66-L67">compare &#x2F; sortKey</a> 用于字符串比较以及获取排序键。这种方式面向大计算量的场景比较低效。</li>
<li>此处针对 TiDB 默认的 <code>BIN</code> 系列 collation，在处理 str 列时去虚拟化。</li>
</ul>
<p>Benchmark</p>
<ul>
<li>Data: tpch-10</li>
<li>tiflash x 1</li>
<li>limit cpu up to 200%</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL [tpch_10]<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> lineitem <span class="keyword">where</span> l_comment <span class="operator">=</span> <span class="string">&#x27;zzle? slyly regular instruc       &#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th>NoCollation</th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>2.46</td>
<td>1.56</td>
<td>1.48</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.41</td>
<td>1.56</td>
<td>1.38</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.36</td>
<td>1.47</td>
<td>1.43</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.35</td>
<td>1.55</td>
<td>1.4</td>
<td>NoCollation : Original</td>
<td>69.30%</td>
</tr>
<tr>
<td></td>
<td>2.44</td>
<td>1.49</td>
<td>1.41</td>
<td>Optimized : Original</td>
<td>57.54%</td>
</tr>
<tr>
<td>AVG</td>
<td>2.404</td>
<td>1.526</td>
<td>1.42</td>
<td>NoCollation : Optimized</td>
<td>7.46%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>SQL <code>select count(1) from lineitem where l_comment &lt; l_comment;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th>NoCollation</th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>2.32</td>
<td>2.07</td>
<td>1.91</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.27</td>
<td>2.06</td>
<td>1.95</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.33</td>
<td>2.07</td>
<td>2.05</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>2.33</td>
<td>2.09</td>
<td>1.99</td>
<td>NoCollation : Original</td>
<td>15.49%</td>
</tr>
<tr>
<td></td>
<td>2.23</td>
<td>2.08</td>
<td>2.04</td>
<td>Optimized : Original</td>
<td>10.70%</td>
</tr>
<tr>
<td>AVG</td>
<td>2.296</td>
<td>2.074</td>
<td>1.988</td>
<td>NoCollation : Optimized</td>
<td>4.33%</td>
</tr>
</tbody></table>
<h4 id="constant-字符串比较"><a href="#constant-字符串比较" class="headerlink" title="constant 字符串比较"></a>constant 字符串比较</h4><p><a href="https://github.com/pingcap/tiflash/pull/5569">tiflash#5569</a></p>
<ul>
<li>重点优化 str 列同 constant str 比较 <code>select ... from ... where xxx = &#39;xxx&#39; ...</code>。例如 <code>select count(*) from github_events where actor_login != &#39;zzzzzzz&#39;</code>。</li>
<li><a href="https://github.com/pingcap/tiflash/blob/4ab1564a17c2ed8bd78b5255f721def878fdd296/dbms/src/Functions/CollationOperatorOptimized.h#L261-L290">CollationOperatorOptimized.h#L261-L290</a> 面向 size 为 <code>[0, 16]</code> 的 constant str 利用模板展开计算</li>
</ul>
<p>Benchmark</p>
<ul>
<li>tpch-100</li>
<li>tiflash x 1</li>
<li>limit cpu up to 200%</li>
<li>original commit: 30fc64c</li>
<li>SQL: <code>select count(1) from lineitem where L_SHIPMODE = &#39;zzzz&#39;;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>9.15</td>
<td>7.52</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.33</td>
<td>7.62</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.12</td>
<td>7.58</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.23</td>
<td>7.57</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>9.14</td>
<td>7.65</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>9.194</td>
<td>7.588</td>
<td></td>
<td>Optimized : Original</td>
<td>21.16%</td>
</tr>
</tbody></table>
<hr>
<p>SQL 参考 <a href="https://github.com/pingcap/go-tpc/blob/69c6de2bd5157131427f6a31e083a1767a59002f/tpch/query.go#L274-L307">tpch-q10</a>: <code>select count(1) from lineitem where L_RETURNFLAG = &#39;R&#39;;</code></p>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>12.85</td>
<td>8.56</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>12.87</td>
<td>8.64</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>12.86</td>
<td>8.45</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>12.75</td>
<td>8.51</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>12.76</td>
<td>8.64</td>
<td></td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>12.818</td>
<td>8.56</td>
<td></td>
<td>Optimized : Original</td>
<td>49.74%</td>
</tr>
</tbody></table>
<h3 id="优化字符串搜索"><a href="#优化字符串搜索" class="headerlink" title="优化字符串搜索"></a>优化字符串搜索</h3><p><a href="https://github.com/pingcap/tiflash/pull/5489">tiflash#5489</a></p>
<ul>
<li>早期实现 <a href="https://github.com/pingcap/tiflash/blob/30fc64c323d262e0faad10150d31025d06efe517/dbms/src/Storages/Transaction/Collator.cpp#L71-L172">Collator.cpp#L71-L172</a> 是将字符逐个按照 collation 解析出来，再按照状态机匹配。其中包含太多虚函数调用，而且算法较为低效。</li>
<li>重点优化 BIN COLLATION 处理表达式 <code>LIKE() ESCAPE()</code> 的行为 <a href="https://github.com/pingcap/tiflash/blob/30fc64c323d262e0faad10150d31025d06efe517/dbms/src/Functions/CollationStringSearchOptimized.h#L28-L419">CollationStringSearchOptimized.h#L28-L419</a><ul>
<li><code>utf8</code> 字符有明确的前缀编码，<code>binary</code> 更为简单，仅表示二进制字符。对于大小写敏感的场景，可以直接将 pattern 字符串进行划分，并按需进行字符串搜索（便于 SIMD 向量化处理）</li>
<li>承袭至 CK 的 <code>ASCIICaseSensitiveStringSearcher</code> 或 <code>Volnitsky</code> 主要面向搜索引擎，在小字符串的场景中效果不如 <code>std::string_view::find()</code>。<code>Aho–Corasick</code> 之流会用到复杂状态机，根据 <a href="#Implementation-Of-Mem-Utils">上文分析</a>，效果估计会更差。</li>
<li>此 PR 实现上先用了 <code>std::string_view::find()</code>，后续利用 <code>avx2_strstr</code> 优化后在此基础上还有 25.63% 的性能提升。</li>
</ul>
</li>
</ul>
<p>Benchmark</p>
<ul>
<li>tpch-100</li>
<li>tiflash x 1</li>
<li>limit cpu up to 200%</li>
<li>original commit: a476307</li>
<li>SQL: <code>select count(1) from orders where o_comment like &#39;%pending%deposits%&#39;;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>35.77</td>
<td>11</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>33.84</td>
<td>10.88</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>35.32</td>
<td>11.11</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>34.82</td>
<td>11.21</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>34.94</td>
<td>10.97</td>
<td></td>
<td>AVG(Original) &#x2F; AVG(Optimized) - 1.0</td>
</tr>
<tr>
<td>AVG</td>
<td>34.938</td>
<td>11.034</td>
<td>Optimized : Original</td>
<td>216.64%</td>
</tr>
</tbody></table>
<h3 id="优化字符串排序"><a href="#优化字符串排序" class="headerlink" title="优化字符串排序"></a>优化字符串排序</h3><p><a href="https://github.com/pingcap/tiflash/pull/5375">tiflash#5375</a></p>
<ul>
<li>面向 BIN COLLATION 去虚拟化<ul>
<li>TiDB 中 padding 的实现方式与 MySQL 的不同。在 MySQL 中，padding 是通过补齐空格实现的。而在 TiDB 中 padding 是通过裁剪掉末尾的空格来实现的。两种做法在绝大多数情况下是一致的，唯一的例外是字符串尾部包含小于空格 (0x20) 的字符时，例如 <code>&#39;a&#39; &lt; &#39;a\t&#39;</code> 在 TiDB 中的结果为 1，而在 MySQL 中，其等价于 <code>&#39;a &#39; &lt; &#39;a\t&#39;</code>，结果为 0。</li>
</ul>
</li>
<li>假设大部分场景中字符串均不含末尾空格，乐观检测并执行快速路径 <a href="https://github.com/pingcap/tiflash/blob/d61c1dff7b9f45d9466205c691019c1067192ea7/dbms/src/Storages/Transaction/CollatorUtils.h#L55-L61">CollatorUtils.h#L55-L61</a></li>
</ul>
<p>Benchmark</p>
<ul>
<li>tpch-100</li>
<li>tiflash x 1</li>
<li>limit cpu up to 200%</li>
<li>original commit: 97342db</li>
<li>SQL <code>select min(L_SHIPMODE) from lineitem;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th>NoCollation</th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>11.35</td>
<td>9.98</td>
<td>9.81</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.33</td>
<td>9.98</td>
<td>9.88</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.23</td>
<td>10</td>
<td>9.84</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>11.22</td>
<td>9.82</td>
<td>9.73</td>
<td>NoCollation : Original</td>
<td>15.22%</td>
</tr>
<tr>
<td></td>
<td>11.58</td>
<td>9.95</td>
<td>9.96</td>
<td>Optimized : Original</td>
<td>14.04%</td>
</tr>
<tr>
<td>AVG</td>
<td>11.342</td>
<td>9.946</td>
<td>9.844</td>
<td>NoCollation : Optimized</td>
<td>1.04%</td>
</tr>
</tbody></table>
<hr>
<ul>
<li>SQL <code>select max(L_SHIPMODE) from lineitem;</code></li>
</ul>
<table>
<thead>
<tr>
<th>Time(s)</th>
<th>Original</th>
<th>Optimized</th>
<th>NoCollation</th>
<th></th>
<th>Improvement</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>13.56</td>
<td>12.62</td>
<td>12.77</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>13.74</td>
<td>12.51</td>
<td>12.27</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>13.35</td>
<td>12.61</td>
<td>12.32</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>13.63</td>
<td>12.63</td>
<td>12.45</td>
<td>NoCollation : Original</td>
<td>9.13%</td>
</tr>
<tr>
<td></td>
<td>13.52</td>
<td>12.66</td>
<td>12.32</td>
<td>Optimized : Original</td>
<td>7.57%</td>
</tr>
<tr>
<td>AVG</td>
<td>13.56</td>
<td>12.606</td>
<td>12.426</td>
<td>NoCollation : Optimized</td>
<td>1.45%</td>
</tr>
</tbody></table>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><h4 id="Hardware-Prefetch"><a href="#Hardware-Prefetch" class="headerlink" title="Hardware Prefetch"></a>Hardware Prefetch</h4><p><a href="https://en.wikipedia.org/wiki/Cache_prefetching">Wiki&#x2F;Cache-Prefetching</a></p>
<p>Check <code>Hardware Prefetch</code> enabled: ref <a href="https://github.com/deater/uarch-configure/blob/2cac4ab6bc7248a9f3a826002c679165434ba92a/intel-prefetch/intel-prefetch-disable.c">deater&#x2F;uarch-configure&#x2F;intel-prefetch</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Disable the hardware prefetcher on:        */</span></span><br><span class="line"><span class="comment">/* Core2             */</span></span><br><span class="line"><span class="comment">/* Nehalem, Westmere, SandyBridge, IvyBridge, Haswell and Broadwell   */</span></span><br><span class="line"><span class="comment">/* See: https://software.intel.com/en-us/articles/disclosure-of-hw-prefetcher-control-on-some-intel-processors */</span></span><br><span class="line"><span class="comment">/*            */</span></span><br><span class="line"><span class="comment">/* The key is MSR 0x1a4          */</span></span><br><span class="line"><span class="comment">/* bit 0: L2 HW prefetcher         */</span></span><br><span class="line"><span class="comment">/* bit 1: L2 adjacent line prefetcher        */</span></span><br><span class="line"><span class="comment">/* bit 2: DCU (L1 Data Cache) next line prefetcher      */</span></span><br><span class="line"><span class="comment">/* bit 3: DCU IP prefetcher (L1 Data Cache prefetch based on insn address) */</span></span><br><span class="line"><span class="comment">/*            */</span></span><br><span class="line"><span class="comment">/* This code uses the /dev/msr interface, and you&#x27;ll need to be root.      */</span></span><br><span class="line"><span class="comment">/*            */</span></span><br><span class="line"><span class="comment">/* by Vince Weaver, vincent.weaver _at_ maine.edu -- 26 February 2016    */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CORE2_PREFETCH_MSR 0x1a0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NHM_PREFETCH_MSR 0x1a4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">open_msr</span><span class="params">(<span class="type">int</span> core)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> msr_filename[BUFSIZ];</span><br><span class="line">  <span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(msr_filename, <span class="string">&quot;/dev/cpu/%d/msr&quot;</span>, core);</span><br><span class="line">  fd = <span class="built_in">open</span>(msr_filename, O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errno == ENXIO) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;rdmsr: No CPU %d\n&quot;</span>, core);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == EIO) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;rdmsr: CPU %d doesn&#x27;t support MSRs\n&quot;</span>, core);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">perror</span>(<span class="string">&quot;rdmsr:open&quot;</span>);</span><br><span class="line">      <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Trying to open %s\n&quot;</span>, msr_filename);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">127</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">long</span> <span class="type">long</span> <span class="title">read_msr</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> which)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint64_t</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">pread</span>(fd, &amp;data, <span class="keyword">sizeof</span> data, which) != <span class="keyword">sizeof</span> data) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;rdmsr:pread&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">127</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">long</span> <span class="type">long</span>)data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">FIXME:</span> should really error out if not an Intel CPU */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">detect_cpu</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  FILE *fff;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> family, model = <span class="number">-1</span>;</span><br><span class="line">  <span class="type">char</span> buffer[BUFSIZ], *result;</span><br><span class="line">  <span class="type">char</span> vendor[BUFSIZ];</span><br><span class="line">  <span class="type">int</span> is_core2 = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  fff = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/cpuinfo&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fff == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    result = <span class="built_in">fgets</span>(buffer, BUFSIZ, fff);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(result, <span class="string">&quot;vendor_id&quot;</span>, <span class="number">8</span>)) &#123;</span><br><span class="line">      <span class="built_in">sscanf</span>(result, <span class="string">&quot;%*s%*s%s&quot;</span>, vendor);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strncmp</span>(vendor, <span class="string">&quot;GenuineIntel&quot;</span>, <span class="number">12</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s not an Intel chip\n&quot;</span>, vendor);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(result, <span class="string">&quot;cpu family&quot;</span>, <span class="number">10</span>)) &#123;</span><br><span class="line">      <span class="built_in">sscanf</span>(result, <span class="string">&quot;%*s%*s%*s%d&quot;</span>, &amp;family);</span><br><span class="line">      <span class="keyword">if</span> (family != <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong CPU family %d\n&quot;</span>, family);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(result, <span class="string">&quot;model&quot;</span>, <span class="number">5</span>)) &#123;</span><br><span class="line">      <span class="built_in">sscanf</span>(result, <span class="string">&quot;%*s%*s%d&quot;</span>, &amp;model);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fclose</span>(fff);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (model) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">31</span>: <span class="comment">/* nhm */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Nehalem CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">46</span>: <span class="comment">/* nhm-ex */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Nehalem-EX CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">44</span>: <span class="comment">/* wsm */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Westmere CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">47</span>: <span class="comment">/* wsm-ex */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Westmere-EX CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">42</span>: <span class="comment">/* snb */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Sandybridge CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">45</span>: <span class="comment">/* snb-ep */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Sandybridge-EP CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">58</span>: <span class="comment">/* ivb */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Ivybridge CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">62</span>: <span class="comment">/* ivb-ep */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Ivybridge-EP CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">69</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">70</span>: <span class="comment">/* hsw */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Haswell CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">63</span>: <span class="comment">/* hsw-ep */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Haswell-EP CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">61</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">71</span>: <span class="comment">/* bdw */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Broadwell CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">86</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">79</span>: <span class="comment">/* bdw-DE/EP */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Broadwell-DE/EP CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">78</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">94</span>: <span class="comment">/* Skylake */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Skylake CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">85</span>: <span class="comment">/* Skylake / Cascade Lake Server*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Skylake / Cascadelake Server CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">142</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">158</span>: <span class="comment">/* Kabylake */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Kabylake CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Core 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">29</span>: <span class="comment">/* core2 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found Core2 CPU\n&quot;</span>);</span><br><span class="line">    is_core2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unsupported model %d\n&quot;</span>, model);</span><br><span class="line">    is_core2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> is_core2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable prefetch on nehalem and newer */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">show_prefetch_nhm</span><span class="params">(<span class="type">int</span> core)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> fd;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="type">int</span> begin, end, c;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Show all prefetch\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (core == <span class="number">-1</span>) &#123;</span><br><span class="line">    begin = <span class="number">0</span>;</span><br><span class="line">    end = <span class="number">1024</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    begin = core;</span><br><span class="line">    end = core;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (c = begin; c &lt;= end; c++) &#123;</span><br><span class="line"></span><br><span class="line">    fd = <span class="built_in">open_msr</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Read original results */</span></span><br><span class="line">    result = <span class="built_in">read_msr</span>(fd, NHM_PREFETCH_MSR);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\tCore %d old : L2HW=%c L2ADJ=%c DCU=%c DCUIP=%c\n&quot;</span>, c,</span><br><span class="line">           result &amp; <span class="number">0x1</span> ? <span class="string">&#x27;N&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>, result &amp; <span class="number">0x2</span> ? <span class="string">&#x27;N&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">           result &amp; <span class="number">0x4</span> ? <span class="string">&#x27;N&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>, result &amp; <span class="number">0x8</span> ? <span class="string">&#x27;N&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> c = <span class="built_in">detect_cpu</span>();</span><br><span class="line">  <span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unsupported CPU type\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">show_prefetch_nhm</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PingCAP</category>
      </categories>
      <tags>
        <tag>PingCAP</tag>
        <tag>TiFlash</tag>
        <tag>Database</tag>
        <tag>Compute</tag>
        <tag>HTAP</tag>
        <tag>SIMD</tag>
        <tag>Collation</tag>
      </tags>
  </entry>
  <entry>
    <title>TiFlash 分布式存储 &amp; 事务体系架构</title>
    <url>/2021/12/21/pingcap/tiflash-distributed-storage-and-transaction-system/</url>
    <content><![CDATA[<p>本文原链接 <a href="https://github.com/pingcap/tiflash/blob/master/docs/design/0000-00-00-architecture-of-distributed-storage-and-transaction.md">The architecture of TiFlash’s distributed storage engine and transaction layer</a> 主要站在开发者的视角阐释 TiFlash 分布式存储 &amp; 事务体系的基本架构和设计思想。</p>
<p>这套体系最初是 2018 年底本人加入 PingCAP 后开始设计构建的，于 2020-04-16 随 TiDB v3.1.0 版本正式 GA，后经多次迭代趋于稳定。</p>
<span id="more"></span>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There is already a distributed <code>OLTP</code>(Online transaction processing) storage product <a href="https://github.com/tikv/tikv">TiKV</a>.<br>To make TiDB applicable to the <code>HTAP</code>(Hybrid transaction&#x2F;analytical processing) scenario, we need a specialized analytical engine called <code>TiFlash</code>, to enhance the ability of real-time analytics.<br>Unlike other typical <code>OLAP</code>(Online analytical processing) databases which only guarantee <code>Eventual Consistency</code>, TiFlash is built on the same distributed infrastructure(<code>Multi-raft RSM</code>, <code>Percolator Transaction Model</code>) like TiKV.<br>TiFlash is designed to provide <code>Strong Consistency</code> read services.<br>It means any other component, like TiDB or TiSpark, can access TiFlash and TiKV by the same protocol, which ensures consistency is snapshot read.</p>
<h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><img src="/images/tiflash-overall.svg" alt="tiflash-overall"></p>
<p>After one TiFlash node is deployed into the TiDB cluster, it will register necessary properties(labels with <code>engine</code>:<code>tiflash</code>, address, runtime information, etc.) to <a href="https://github.com/tikv/pd">Placement driver</a>(hereafter referred to as <code>PD</code>) as a <code>raft store</code>.</p>
<p>PD will not schedule any region peer to TiFlash store if there is no <a href="https://docs.pingcap.com/tidb/stable/configure-placement-rules">Placement Rules</a> related to TiFlash.<br>After TiDB has executed the <code>DDL</code> job, which tries to set <code>TIFLASH REPLICA</code> for the specific table, the <code>Replica Manager</code> module will translate related jobs into <code>Placement Rules</code> and update them to PD.<br>Then, PD will try to split and schedule <code>Learner</code> peer of related regions to TiFlash store by corresponding rules.</p>
<p>All peers of the same region make up a <code>Raft Group</code>.<br>The group represents a <code>Replicated State Machine</code>(RSM).<br>The <code>Leader</code> replicates actions to the followers and learners.<br>Each peer maintains a <code>Durable Write-ahead Log</code>(DWAL).<br>All peers append each action as an entry in the log immediately as they receive it.<br>When the quorum (the majority) of peers have confirmed that the entry exists in their log, the leader commits. Each peer then can apply the action to their state machine.<br>TiFlash relies on the <a href="https://github.com/pingcap/tidb-engine-ext">TiDB Engine Extensions Library</a>(works as <code>Raft Store</code> dynamic library) to maintain multi-raft RSM.<br>A <code>TIFLASH REPLICA</code> of the table is an abstract concept that can be regarded as a collection of multiple learner peers(region range of peer intersects with the record data range of the table) in the TiFlash store.</p>
<p>A database transaction, by definition, must be atomic, consistent, isolated, and durable.<br>Transaction writing proposed by TiDB must follow the <code>Percolator Model</code>.<br>The key-value engine of TiKV provides a feature named <code>Column Family</code>(hereafter referred to as CF).<br>The three CFs: <code>DEFAULT</code>, <code>LOCK</code> and <code>WRITE</code>, correspond to Percolator’s <code>data column</code>, <code>lock column</code> and <code>write column</code>, respectively.<br>TiFlash builds abstract layers of <code>Region</code> from <code>Raft Store</code> and applies raft commands with writing operations towards these CFs.<br>TiFlash fetches <code>Table Schema</code>(generated by TiDB) from TiKV and tries to write the committed records into strong schema-aware column storage.</p>
<p><code>Transaction Read Protocol</code>(like coprocessor or MPP) is the basic protocol used to read table data or execute sub-tasks in <code>raft store</code>.<br><code>Region Peer</code> is the minimal unit for transaction reading.<br>To guarantee <code>Snapshot Isolation</code>, there are a few essential safeguard mechanisms:</p>
<ul>
<li><code>Replica Read</code> ensures that the raft state machine of region peer is correct and has enough context.</li>
<li><code>Resolve Lock</code> checks whether related table records are locked and tries to resolve them.</li>
<li><code>MVCC(Multiversion concurrency control)</code> read table records by specific version(<code>Timestamp</code>, hereafter referred to as ts) provided by PD.</li>
</ul>
<h3 id="Distributed-Storage-Framework"><a href="#Distributed-Storage-Framework" class="headerlink" title="Distributed Storage Framework"></a>Distributed Storage Framework</h3><p><img src="/images/tiflash-distributed-architecture.svg" alt="tiflash-distributed-architecture"></p>
<p><a href="https://github.com/pingcap/tidb-engine-ext">TiDB Engine Extensions Library</a>(hereafter referred to as <code>raftstore-proxy</code> or <code>tiflash-proxy</code>) is a TiKV based <code>c dynamic library</code> for extending storage system in <code>TiDB</code> cluster.<br>This library aims to export the current multi-raft framework to other engines and make them able to provide services(read&#x2F;write) as <code>raft store</code> directly.</p>
<p>Generally speaking, there are two storage components in TiKV for maintaining multi-raft RSM: <code>RaftEngine</code> and <code>KvEngine</code>.<br>KvEngine is mainly used for applying raft command and providing key-value services.<br>RaftEngine will parse its own committed raft log into corresponding normal&#x2F;admin raft commands, which will be handled by the apply process.<br>Multiple modifications about region data&#x2F;meta&#x2F;apply-state will be encapsulated into one <code>Write Batch</code> and written into KvEngine atomically.<br>It is an option to replace KvEngine with <code>Engine Traits</code>.<br>But it’s not easy to guarantee atomicity while writing&#x2F;reading dynamic key-value pair(such as meta&#x2F;apply-state) and patterned data(strong schema) together for other storage systems.<br>Besides, a few modules and components(like importer or lighting) reply on the SST format of KvEngine in TiKV.<br>It may cost a lot to achieve such a replacement.</p>
<p>It’s suggested to let the apply process work as usual but only persist meta and state information to bring a few intrusive modifications against the original logic of TiKV.<br>i.e., we must replace everywhere that may write normal region data with related interfaces.<br>Unlike KvEngine, the storage system(called <code>engine-store</code>) under such a framework should be aware of the transition about multi-raft RSM from these interfaces.<br>The <code>engine-store</code> must have the ability to deal with raft commands to handle queries with region epoch.</p>
<p>The <code>region snapshot</code> presents the complete region information(data&#x2F;meta&#x2F;apply-state) at a specific apply-state.</p>
<p>Anyway, because there are at least two asynchronous runtimes in one program, the best practice of such raft store is to guarantee <code>External Consistency</code> by <code>region snapshot</code>.<br>The raft logs persisted in RaftEngine are the <code>WAL(Write-ahead Log)</code> of the apply process.<br>Index of raft entry within the same region peer is monotonic increasing.<br>If the process is interrupted at the middle step, it should replay from the last persisted apply-state after the restart.<br>Until a safe point is reached, related modifications are not visible to others.</p>
<p><code>Idempotency</code> is an essential property for <code>External Consistency</code>, which means such a system could handle outdated raft commands. A practical way is like:</p>
<ul>
<li>Fsync snapshot in <code>engine-store</code> atomically</li>
<li>Fsync region snapshot in <code>raftstore-proxy</code> atomically</li>
<li>Make RaftEngine only GC raft log whose index is smaller than persisted apply-state</li>
<li><code>engine-store</code> should screen out raft commands with outdated apply-state during apply process</li>
<li><code>engine-store</code> should recover from the middle step by overwriting and must NOT provide services until caught up with the latest state</li>
</ul>
<p>Such architecture inherited several important features from TiKV, such as distributed fault tolerance&#x2F;recovery, automatic re-balancing, etc.<br>It’s also convenient for PD to maintain this kind of storage system by the existing way as long as it works as <code>raft store</code>.</p>
<h4 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h4><p>Since the program language <code>Rust</code>, which TiKV uses, has zero-cost abstractions, it’s straightforward to let different threads interact with each other by <code>FFI</code>(Foreign Function Interface).<br>Such mode brings almost no overhead.<br>However, any caller must be pretty clear about the exact safe&#x2F;unsafe operations boundary.<br>The structure used by different runtimes through interfaces must have the same memory layout.</p>
<p>It’s feasible to refactor TiKV source code and extract parts of the necessary process into interfaces. The main categories are like:</p>
<ul>
<li>applying normal-write raft command</li>
<li>applying admin raft command</li>
<li>peer detection: destroy peer</li>
<li>region snapshot: pre-handle&#x2F;apply region snapshot</li>
<li>SST file reader</li>
<li>applying <code>IngestSst</code> command</li>
<li>replica read: batch read-index</li>
<li>encryption: get file; new file; delete file; link file; rename file;</li>
<li>status services: metrics; CPU profile; config; thread stats; self-defined API;</li>
<li>store stats: key&#x2F;bytes R&#x2F;W stats; disk stats; <code>engine-store</code> stats;</li>
<li>tools&#x2F;utils</li>
</ul>
<p>TiKV can split or merge regions to make the partitions more flexible.<br>When the size of a region exceeds the limit, it will split into two or more regions, and its range would change from <code>[a, c)</code> to <code>[a, b)</code> and <code>[b, c)</code>.<br>When the sizes of two consecutive regions are small enough, TiKV will merge them into one, and their range would change from <code>[a, b)</code> and <code>[b, c)</code> to <code>[a, c)</code>.</p>
<p>We must persist the region snapshot when executing admin raft commands about <code>split</code>, <code>merge</code> or <code>change peer</code> because such commands will change the core properties(<code>version</code>, <code>conf version</code>, <code>start/end key</code>) of multi-raft RSM.<br>Ignorable admin command <code>CompactLog</code> may trigger raft log GC in <code>RaftEngine</code>.<br>Thus, to execute such commands, it’s required to persist region snapshot.<br>But while executing normal-write command, which won’t change region meta, the decision of persisting can be pushed down to <code>engine-store</code>.</p>
<p>When the region in the current store is illegal or pending removal, it will execute a <code>destroy-peer</code> task to clean useless data.</p>
<p><img src="/images/txn-log-replication.svg" alt="txn-log-replication"></p>
<p>According to the basic transaction log replication, a leader peer must commit or apply each writing action before returning success ACK to the client.<br>When any peer tries to respond to queries, it should get the latest committed index from the leader and wait until the apply-state caught up to ensure it has enough context.<br>For learners&#x2F;followers or even leaders, the <code>Read Index</code> is a practical choice to check the latest <code>Lease</code> because it’s easy to make any peer of region group provide read service under the same logic as the overhead of read-index itself is insignificant.</p>
<p>When the leader peer has reclaimed related raft log or other peers can not proceed with RSM in the current context, other peers can request a region snapshot from the leader.<br>However, the region snapshot data, whose format is TiKV’s <code>SST</code> file, is not usually used by other storage systems directly.<br>The standard process has been divided into several parts to accelerate the speed of applying region snapshot data:</p>
<ul>
<li><code>SST File Reader</code> to read key-value one by one from SST files</li>
<li>Multi-thread pool to pre-handle SST files into the self-defined structure of <code>engine-store</code></li>
<li>Delete old data within [start-key, end-key) of the new region strictly.</li>
<li>Apply self-defined structure by original sequence</li>
</ul>
<p>Interfaces about <code>IngestSst</code> are the core to be compatible with <code>TiDB Lighting</code> and <code>BR</code> for the <code>HTAP</code> scenario.<br>It can substantially speed up data loading&#x2F;restoring.<br><code>SST File Reader</code> is also useful when applying the <code>IngestSst</code> raft command.</p>
<p>Encryption is essential for <code>DBaaS</code>(database as a service).<br>To be compatible with TiKV, a data key manager with the same logic is indispensable, especially for rotating data encryption keys or using the KMS service.</p>
<p>Status services like metrics, CPU&#x2F;Memory profile(flame graph), or other self-defined stats can effectively support the diagnosis.<br>It’s suggested to encapsulate those into one status server and let other external components visit through the status address.<br>We could also reuse most of the original metrics of TiKV, and an optional way is to add a specific prefix for each name.</p>
<p>When maintaining DWAL, it’s practical to batch raft msg before fsync as long as latency is tolerable to reduce IOPS(mainly in RaftEngine) and make it system-friendly with poor performance.</p>
<h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><p>Basic synopsis: <a href="https://pingcap.github.io/tidb-dev-guide/understand-tidb/transaction.html">TiDB Transaction</a>, <a href="https://tikv.org/deep-dive/distributed-transaction/optimized-percolator">Optimized Percolator</a></p>
<h4 id="Multi-raft-RSM"><a href="#Multi-raft-RSM" class="headerlink" title="Multi-raft RSM"></a>Multi-raft RSM</h4><p>To provide services as a <code>raft store</code> directly, TiFlash must implement all interfaces provided by raftstore-proxy.<br>There are two kinds of raft command: <code>normal-write</code>, <code>admin</code>.</p>
<p><strong>normal-write command</strong> consists of <a href="https://tikv.github.io/doc/kvproto/raft_cmdpb/enum.CmdType.html">cmd types</a> and key-value pairs towards CFs.<br>For now, except cmd type <code>Put</code>, <code>Delete</code>, <code>DeleteRange</code> or <code>IngestSst</code>, others are useless.</p>
<ul>
<li><code>DeleteRange</code> is ignorable because such type only appears when the table is dropped safely(exceed GC safe time), but TiFlash has its own table GC strategy to clean data directly.</li>
<li><code>Put</code> means replace into a key-value</li>
<li><code>Delete</code> means delete key-value by key</li>
<li><code>IngestSst</code> means ingest several TiKV SST files of DEFAULT&#x2F;WRITE CFs.</li>
</ul>
<p>The content of each CF:</p>
<ul>
<li><code>DEFAULT</code>: <code>(key, start_ts)</code> -&gt; <code>value</code></li>
<li><code>LOCK</code>: <code>key</code> -&gt; <code>lock_info(lock_type, primary_lock, lock_version, ...)</code></li>
<li><code>WRITE</code>: <code>(key, commit_ts)</code> -&gt; <code>write_info(write_type, start_ts, [short_value], ...)</code></li>
</ul>
<p>In the concept of <code>Snapshot Isolation</code>, all deletion operations proposed by the transaction process are logical, which means <code>Put</code> a key-value with write_type <code>D</code>(delete).<br>While the whole transaction process is quite complex, TiFlash only deals with the transaction read by now, and thus write_types except <code>P</code>(Put) and <code>D</code>(Delete) along with others such as <code>L</code>(Lock) and <code>R</code>(Rollback) can be ignored safely.<br>TiFlash will find committed data(legal values in WRITE CF) and transform related messages into complete table records by its schema.</p>
<p><strong>admin command</strong> is one of <a href="https://tikv.github.io/doc/kvproto/raft_cmdpb/enum.AdminCmdType.html">AdminCmdType</a>.<br>In most FFI functions, raftstore-proxy will provide the apply result(including region meta) as a parameter.<br>TiFlash can use such parameters to maintain RSM directly.<br>We also designed another mechanism to reduce the frequency of executing the <code>CompactLog</code> command, which takes the timeout, write-throughput, size, etc., into account to minimize IOPS and flush table records into column storage by large batch(friendly for column storage).</p>
<h5 id="Region-Snapshot"><a href="#Region-Snapshot" class="headerlink" title="Region Snapshot"></a>Region Snapshot</h5><p>Unlike TiKV, which uses <a href="https://github.com/tikv/rocksdb">RocksDB</a> as KvEngine directly, TiFlash can maintain multi-raft RSM in several parts:</p>
<ul>
<li>RSM in raftstore-proxy<ul>
<li>Build real RSM like TiKV without adding actual info in data CFs.</li>
<li>Communicate with other components as a <code>raft store</code>.</li>
<li>Expose region meta, data, and other necessary info to TiFlash.</li>
</ul>
</li>
<li>RSM in TiFlash<ul>
<li>Maintain RSM through interfaces from raftstore-proxy.</li>
<li>Persist whole region cache in memory by apply-state as <code>region snapshot</code> atomically.</li>
</ul>
</li>
<li>Committed table records in column storage<ul>
<li>Store committed transaction data by a strong schema.</li>
<li>Support MVCC by ts.</li>
<li>Support table data GC.</li>
</ul>
</li>
</ul>
<p>Redundancy is a practical way to guarantee <code>Idempotency</code> and <code>External Consistency</code>, which means updating region meta should be lazy while adding data but advanced while removing the region.</p>
<p>Persisting the whole region cache as a snapshot can help avoid using <code>WAL</code> but might bring more overhead when there are lots of uncommitted data.<br>It may happen if somehow a quite large transaction is blocked for a long time.<br>But for most normal scenarios, the transaction will be committed or rollbacked quickly, which means the frequent operations towards LOCK&#x2F;DEFAULT won’t cause excessive remained data in memory.</p>
<p>A possible solution is implementing incremental store mode, which uses another key-value storage or other semi-structured engines as intermediate buffers.</p>
<h4 id="Learner-Read"><a href="#Learner-Read" class="headerlink" title="Learner Read"></a>Learner Read</h4><p>A learner does not participate in leader elections, nor is it part of a quorum for log replication.<br>Log replication from the leader to a learner is asynchronous.<br>The strong consistency between the leader and the learner is enforced during the read time.</p>
<p>After the feature <a href="https://pingcap.github.io/tidb-dev-guide/understand-tidb/async-commit.html">Async Commit</a> and <a href="https://pingcap.github.io/tidb-dev-guide/understand-tidb/1pc.html">1PC</a>, <code>Read Index</code> request should contain start-ts of transaction read to resolve memory locks of leader peer in TiKV.<br>After the current region peer has applied to the latest committed index, it’s available to check table locks(like TiKV does) and try to resolve them.</p>
<p>Epoch(<code>version</code>, <code>conf version</code>) is one of the important properties to present region meta changing.<br>The latest <code>GC Safepoint</code> should always be smaller than start-ts of transaction read.<br>We shall double-check both of them even after getting immutable snapshot information from storage.</p>
<p>The logic about <strong>Resolve Lock</strong> is complex.<br>Related behaviors should follow the established process(like TiDB does) in different <a href="https://github.com/tikv?q=client&type=all">Clients</a>.<br>This document will not discuss the details herein.</p>
<h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><p>To understand the architecture shown above, please refer to those first:</p>
<ul>
<li>Source code about raftstore, rocksdb, transaction modules in <a href="https://github.com/tikv/tikv">TiKV</a></li>
<li>Source code about DDL, transaction modules in <a href="https://github.com/pingcap/tidb">TiDB</a></li>
<li><code>Placement Rules</code>, scheduler modules in <a href="https://github.com/tikv/pd">PD</a></li>
</ul>
]]></content>
      <categories>
        <category>PingCAP</category>
      </categories>
      <tags>
        <tag>DistributedSystem</tag>
        <tag>PingCAP</tag>
        <tag>TiFlash</tag>
        <tag>Storage</tag>
        <tag>HTAP</tag>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 项目编译优化 —— TiFlash</title>
    <url>/2022/06/01/system/cpp-compile-optimize/</url>
    <content><![CDATA[<blockquote>
<p>面向 <code>C艹</code>（aka <code>C++</code> or <code>CPP</code>）的开发规范一直都比较松散，各个组织包括个体总能在不轻易间把项目堆成 xxxx xxxxxxxx。</p>
</blockquote>
<p>随着工程规模增大，<a href="https://github.com/pingcap/tiflash">TiFlash</a> 项目也逐渐开始暴露出这类问题：</p>
<ul>
<li>头文件凌乱</li>
<li>模板滥用</li>
<li>编译缓慢</li>
<li>工程质量愈发难以控制</li>
</ul>
<p>本文旨在提供量化指标和参考方法用以优化 C++ 工程项目的编译流程。希望动员社区的力量，一起来优化 TiFlash 的工程质量。</p>
<span id="more"></span>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>普遍定义上，完整的编译流程分为以下几个流程：预处理（Prepressing），编译（Compilation）&amp; 汇编（Assembly），链接（Linking）。相比于 GCC，LLVM 则有明显的前端（Frontend）后端（Backend）之分：</p>
<ul>
<li>前端包括：处理头文件（Source），类&#x2F;模板类解析（ParseClass），模版类实例化（InstantiateClass），模版函数解析（ParseTemplate），模版函数实例化（InstantiateFunction），代码生成（CodeGen Function）等。</li>
<li>后端则主要是以 <a href="https://llvm.org/docs/WritingAnLLVMPass.html">Pass 框架</a> 为基础的流程，可在 <a href="https://llvm.org/doxygen/namespacellvm.html">llvm-project&#x2F;namespaces</a> 中查看细节的实现。</li>
</ul>
<p>C++ 编译器以源文件为编译单元，基本流程可参考 <a href="https://en.cppreference.com/w/cpp/language/translation_phases">Phases of translation</a>。<a href="https://solotzg.github.io/2022/03/30/system/linux-dynamic-library/#Linux-%E5%8A%A8%E6%80%81%E5%BA%93">Linux 动态链接库相关整理#Linux-动态库</a> 这篇文章介绍过相关的几个案例（主要偏后端和链接器），可供参考。</p>
<p><strong>以下所有的内容均默认编译器为 clang。</strong></p>
<h1 id="编译流程分析"><a href="#编译流程分析" class="headerlink" title="编译流程分析"></a>编译流程分析</h1><p>编译 TiFlash 时加上 cmake 项 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/CMakeLists.txt#L106-L112">-DENABLE_TIME_TRACES&#x3D;ON</a>，即增加 clang 编译参数 <a href="https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-ftime-trace">-ftime-trace</a>，令编译每个目标文件时以 <code>json</code> 格式输出相关分析追踪数据。可通过 <a href="chrome://tracing">chrome:&#x2F;&#x2F;tracing</a> 或网站 <a href="https://www.speedscope.app/">Speedscope App</a> 查看火焰图。<img src="/images/speedscope.app-example.gif" alt="FlameGraphsExample"></p>
<p>以这个 commit 的 TiFlash 代码为例 <a href="https://github.com/pingcap/tiflash/commit/2d234262eb551b04b0ce304c7c6bacac847ca264">2d234262eb551b04b0ce304c7c6bacac847ca264</a>。编译完成后，可以在编译路径 <code>$&#123;TIFLASH_BUILD_DIR&#125;</code> 下找到各个目标文件对应的 json 文件，例如 <code>$&#123;TIFLASH_BUILD_DIR&#125;/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsTiDBConversion.cpp.json</code>。根据文章 <a href="https://aras-p.info/blog/2019/09/28/Clang-Build-Analyzer">Aras Pranckevičius - Clang Build Analyzer</a>，通过工具 <a href="https://github.com/aras-p/ClangBuildAnalyzer.git">ClangBuildAnalyzer</a> 分析 TiFlash 编译过程的各项属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/aras-p/ClangBuildAnalyzer.git</span><br><span class="line"><span class="built_in">cd</span> ClangBuildAnalyzer</span><br><span class="line">make -f projects/make/Makefile</span><br><span class="line">tmpfile=$(<span class="built_in">mktemp</span> /tmp/ClangBuildAnalyzer-capture_file.XXXXXX)</span><br><span class="line">./build/ClangBuildAnalyzer --all <span class="variable">$&#123;TIFLASH_BUILD_DIR&#125;</span> <span class="variable">$&#123;tmpfile&#125;</span> </span><br><span class="line">./build/ClangBuildAnalyzer --analyze <span class="variable">$&#123;tmpfile&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果如下，前端居然比后端的总耗时还大，这非常 <strong>不合理</strong>。以下各个章节将针对此进行分析并简述优化过程。</p>
<h2 id="ClangBuildAnalyzer-分析结果（未优化）"><a href="#ClangBuildAnalyzer-分析结果（未优化）" class="headerlink" title="ClangBuildAnalyzer 分析结果（未优化）"></a>ClangBuildAnalyzer 分析结果（未优化）</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**** Time summary:</span><br><span class="line">Compilation (5485 times):</span><br><span class="line">  Parsing (frontend):         7181.8 s</span><br><span class="line">  Codegen &amp; opts (backend):   6224.5 s</span><br><span class="line"></span><br><span class="line">**** Files that took longest to parse (compiler frontend):</span><br><span class="line">185258 ms: /data2/work/build-llvm-tiflash/dbms/src/Flash/CMakeFiles/flash_service.dir/Coprocessor/DAGExpressionAnalyzerHelper.cpp.o</span><br><span class="line">182847 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsTiDBConversion.cpp.o</span><br><span class="line">181468 ms: /data2/work/build-llvm-tiflash/dbms/src/Flash/CMakeFiles/flash_service.dir/Coprocessor/DAGExpressionAnalyzer.cpp.o</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**** Files that took longest to codegen (compiler backend):</span><br><span class="line">406975 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/divide.cpp.o</span><br><span class="line">205837 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsComparison.cpp.o</span><br><span class="line">205416 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsTiDBConversion.cpp.o</span><br><span class="line">179111 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/modulo.cpp.o</span><br><span class="line">142676 ms: /data2/work/build-llvm-tiflash/dbms/CMakeFiles/dbms.dir/src/Dictionaries/CacheDictionary.cpp.o</span><br><span class="line">133467 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/least.cpp.o</span><br><span class="line">131571 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/greatest.cpp.o</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**** Templates that took longest to instantiate:</span><br><span class="line">247991 ms: DB::FunctionTiDBCast::createWrapper&lt;false&gt; (3 times, avg 82663 ms)</span><br><span class="line">240476 ms: DB::FunctionTiDBCast::createWrapper&lt;true&gt; (3 times, avg 80158 ms)</span><br><span class="line">228596 ms: std::__function::__func&lt;(lambda at /root/work/tiflash/dbms/src/Functions/FunctionsTiDBC... (7200 times, avg 31 ms)</span><br><span class="line">227424 ms: std::__function::__func&lt;(lambda at /root/work/tiflash/dbms/src/Functions/FunctionsTiDBC... (7200 times, avg 31 ms)</span><br><span class="line">194991 ms: std::function&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long, bool, const ti... (2400 times, avg 81 ms)</span><br><span class="line">194077 ms: std::function&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long, bool, const ti... (2400 times, avg 80 ms)</span><br><span class="line">193740 ms: std::__function::__value_func&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long... (2400 times, avg 80 ms)</span><br><span class="line">192884 ms: std::__function::__value_func&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long... (2400 times, avg 80 ms)</span><br><span class="line">191873 ms: std::__function::__value_func&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long... (2400 times, avg 79 ms)</span><br><span class="line">191093 ms: std::__function::__value_func&lt;void (DB::Block &amp;, const std::vector&lt;unsigned long&gt; &amp;, unsigned long... (2400 times, avg 79 ms)</span><br><span class="line">132499 ms: DB::castTypeToEither&lt;DB::DataTypeNumber&lt;unsigned char&gt;, DB::DataTypeNumber&lt;unsigned short&gt;, DB::Da... (20 times, avg 6624 ms)</span><br><span class="line">132198 ms: DB::castTypeToEither&lt;DB::DataTypeNumber&lt;unsigned char&gt;, DB::DataTypeNumber&lt;unsigned short&gt;, DB::Da... (320 times, avg 413 ms)</span><br><span class="line">131016 ms: std::__function::__alloc_func&lt;(lambda at /root/work/tiflash/dbms/src/Functions/Function... (7200 times, avg 18 ms)</span><br><span class="line">130531 ms: std::__function::__alloc_func&lt;(lambda at /root/work/tiflash/dbms/src/Functions/Function... (7200 times, avg 18 ms)</span><br><span class="line">128066 ms: DB::castTypeToEither&lt;DB::DataTypeNumber&lt;unsigned char&gt;, DB::DataTypeNumber&lt;unsigned short&gt;, DB::Da... (5120 times, avg 25 ms)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**** Template sets that took longest to instantiate:</span><br><span class="line">734148 ms: std::function&lt;$&gt;::function&lt;$&gt; (9422 times, avg 77 ms)</span><br><span class="line">729456 ms: std::__function::__value_func&lt;$&gt;::__value_func&lt;$&gt; (9422 times, avg 77 ms)</span><br><span class="line">598582 ms: std::__function::__func&lt;$&gt;::__func (9422 times, avg 63 ms)</span><br><span class="line">494799 ms: std::__function::__alloc_func&lt;$&gt;::__alloc_func (28266 times, avg 17 ms)</span><br><span class="line">488467 ms: DB::FunctionTiDBCast::createWrapper&lt;$&gt; (6 times, avg 81411 ms)</span><br><span class="line">419445 ms: DB::FunctionTiDBCast::createWrapperForDecimal&lt;$&gt; (480 times, avg 873 ms)</span><br><span class="line">381118 ms: std::forward_as_tuple&lt;$&gt; (39069 times, avg 9 ms)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**** Function sets that took longest to compile / optimize:</span><br><span class="line">31177 ms: DB::IAggregateFunctionHelper&lt;$&gt;::addBatchLookupTable8(unsigned long, char**, unsigned long, std::__1::function&lt;$&gt;, unsigned char const*, DB::IColumn const**, DB::Arena*) const (1250 times, avg 24 ms)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">*** Expensive headers:</span><br><span class="line">1091837 ms: /root/work/tiflash/dbms/src/Common/FmtUtils.h (included 750 times, avg 1455 ms), included via:</span><br><span class="line">1022467 ms: /root/work/tiflash/libs/libcommon/include/common/StringRef.h (included 754 times, avg 1356 ms), included via:</span><br><span class="line">985876 ms: /root/work/tiflash/dbms/src/Common/Exception.h (included 748 times, avg 1318 ms), included via:</span><br><span class="line">974680 ms: /root/work/tiflash/dbms/src/Common/StackTrace.h (included 749 times, avg 1301 ms), included via:</span><br><span class="line">681167 ms: /data2/tiflash-env/sysroot/include/c++/v1/string (included 1903 times, avg 357 ms), included via:</span><br><span class="line">501559 ms: /data2/tiflash-env/sysroot/include/c++/v1/algorithm (included 1969 times, avg 254 ms), included via:</span><br><span class="line">498058 ms: /root/work/tiflash/dbms/src/Columns/IColumn.h (included 516 times, avg 965 ms), included via:</span><br><span class="line">422329 ms: /root/work/tiflash/dbms/src/Core/Types.h (included 706 times, avg 598 ms), included via:</span><br><span class="line">405688 ms: /data2/tiflash-env/sysroot/include/c++/v1/functional (included 1971 times, avg 205 ms), included via:</span><br></pre></td></tr></table></figure>

<h1 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h1><p>目前使用的工具链是 LLVM-13，链接器 <a href="https://lld.llvm.org/">LLD</a> 性能已经足够好，所以链接过程的速度暂时构不成瓶颈（理论上还有更快的 <a href="https://github.com/rui314/mold">mold</a>）。为获得更好的编译优化效果，较为推荐的是 <a href="#LTO%EF%BC%88Link-Time-Optimization%EF%BC%89">LTO</a>，不过代价就是更大的链接耗时和内存消耗。对于成熟的项目，利用 <a href="#PGO%EF%BC%88Profile-Guided-Optimization%EF%BC%89">PGO</a> 或 <a href="#Post-link-Optimizer">Post-link Optimizer</a> 也可获得可观的收益。</p>
<p>就绝大部分实际场景而言（尤其是滥用模板的场景），少生成重复代码，便足以有效减轻后端的负担。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote>
<p>对于大多数 C++ 工程项目而言，<strong>滥用</strong> 模板是万恶之源。</p>
</blockquote>
<h3 id="模板实例化"><a href="#模板实例化" class="headerlink" title="模板实例化"></a>模板实例化</h3><p><strong>模板在什么时候会被实例化？</strong></p>
<h4 id="案例（1-0）"><a href="#案例（1-0）" class="headerlink" title="案例（1.0）"></a>案例（1.0）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test1.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">  std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; d_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// test1.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test1.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang++ -c test1.cpp -o test1.o -ftime-trace -std=gnu++17</span><br><span class="line">// get test1.json</span><br></pre></td></tr></table></figure>

<p>用浏览器打开 test1.json 查看火焰图可知 <code>std::unordered_map&lt;int, int&gt;</code> 已经被实例化，且属于前端行为 ParseClass。意味着编译包含 test1.h 的源文件时均会产生这一重复行为。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">InstantiateClass &#123;&quot;detail&quot;:&quot;std::__1::unordered_map&lt;int, int, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;const int, int&gt; &gt; &gt;&quot;&#125;</span><br><span class="line">&gt; ParseClass &#123;&quot;detail&quot;:&quot;Test1&quot;&#125;</span><br><span class="line">&gt; Frontend</span><br><span class="line">&gt; ExecuteCompiler</span><br></pre></td></tr></table></figure>

<p>对于 test4 和 test5 也是同样效果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test4.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">test4</span><span class="params">(T)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test5.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">int</span> <span class="title">test5</span><span class="params">(T)</span> </span>&#123; std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; s; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test6.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">Test1</span> &#123; std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; d_; &#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p>然而，对于下面的 test2，火焰图中却看不到 <code>std::unordered_map&lt;int, int&gt;</code> 被实例化的过程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test2.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">  <span class="function">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">test2</span><span class="params">(std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;)</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">test2_1</span><span class="params">(std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">test2_2</span><span class="params">(std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="分析（1-0）"><a href="#分析（1-0）" class="headerlink" title="分析（1.0）"></a>分析（1.0）</h4><p>对于编译过程来说 <strong>函数</strong> 和 <strong>变量</strong> 本身就是符号，编译器前端推导基于一定的规则。对于上述案例：</p>
<ul>
<li>test2 中虽然声明了 <code>std::unordered_map&lt;int, int&gt;</code> 类型，但没有被实际的结构体定义或者函数实现依赖，编译器也就不需要实例化模板。</li>
<li>对于 test1&#x2F;test4&#x2F;test5&#x2F;test6，编译器解析类或模板时识别出类模板 <code>std::unordered_map</code> 在结构体或函数实现中被完整定义为 <code>std::unordered_map&lt;int, int&gt;</code> 类型，然后实例化该模板类。<ul>
<li>test1：普通类成员函数</li>
<li>test4：模板函数返回值</li>
<li>test5：模板函数实现过程</li>
<li>test6：模板类成员函数</li>
</ul>
</li>
</ul>
<p><strong>需要重点关注的是</strong>：模板虽然在使用时可以看作是高级的宏命令，但如 test4&#x2F;test5&#x2F;test6 结果所示，即便编译单元最终生成的目标文件是空的（没有实际代码用到模板），编译器还是会推导并实例化模板。这个行为不符合常理，估计得看 C++20 的 <a href="https://en.cppreference.com/w/cpp/language/modules">Modules</a> 能否完善。目前而言，只能靠优化模板定义和头文件依赖，或者参考 <a href="#PImpl">PImpl</a>，<a href="#%E9%A2%84%E7%BC%96%E8%AF%91%E5%A4%B4%E6%96%87%E4%BB%B6%EF%BC%88PCH%EF%BC%89">PCH</a> 技术。</p>
<h4 id="案例（1-0-1）"><a href="#案例（1-0-1）" class="headerlink" title="案例（1.0.1）"></a>案例（1.0.1）</h4><p>类似于 test1.cpp 的场景理论上比较容易用 PImpl 改造。倘若是性能攸关的代码，无法忍受 PImpl 带来的局部性损失，可参考下面的方式，代价就是牺牲代码可读性以及使用模板的便利性。</p>
<ul>
<li><code>std::unordered_map&lt;int, int&gt;</code> aka <code>Data</code></li>
<li>令 <code>Test7::Inner</code> 的内存大小和对齐方式适配不同编译平台<ul>
<li>内存对齐方式（8 Bytes）与 <code>Data</code> 相同（暂不考虑非 64 位平台或其他小众平台）。</li>
<li><code>Data</code> 在 MacOS 下是 40 Bytes，而 Linux 下则是 56 Bytes，本例子中直接取最大值（或可通过宏定义判断编译平台再设置大小）。</li>
</ul>
</li>
<li>在源文件中加上 <code>static_assert</code> 以防止其他改动破坏基本假设。</li>
<li><code>Test7</code> 内部封装构造&#x2F;析构、以及转换相关接口。</li>
<li>当头文件 test7.h 被其他不相干的源文件所包含，编译器前端解析 <code>struct Test7</code> 时则不需要再实例化 <code>std::unordered_map&lt;int, int&gt;</code>。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> Data = std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">      <span class="built_in">alignas</span>(<span class="number">8</span>) <span class="type">char</span> _;</span><br><span class="line">    &#125; _[<span class="number">7</span>];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function">Data &amp;<span class="title">data</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">const</span> Data &amp;<span class="title">data</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">  <span class="built_in">Test7</span>();</span><br><span class="line">  ~<span class="built_in">Test7</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Inner data_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test7.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(Test7::Inner) &gt;= <span class="built_in">sizeof</span>(Data));</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">alignof</span>(Test7::Inner) == <span class="built_in">alignof</span>(Data));</span><br><span class="line"><span class="function">Data &amp;<span class="title">Test7::data</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;Data *&gt;(&amp;data_); &#125;</span><br><span class="line"><span class="function"><span class="type">const</span> Data &amp;<span class="title">Test7::data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> Data *&gt;(&amp;data_);</span><br><span class="line">&#125;</span><br><span class="line">Test7::<span class="built_in">Test7</span>() &#123; <span class="keyword">new</span> (&amp;<span class="built_in">data</span>()) <span class="built_in">Data</span>(); &#125;</span><br><span class="line">Test7::~<span class="built_in">Test7</span>() &#123;</span><br><span class="line">  <span class="built_in">static_assert</span>(std::is_destructible_v&lt;Data&gt;);</span><br><span class="line">  <span class="built_in">data</span>().~<span class="built_in">Data</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例（1-0-2）"><a href="#案例（1-0-2）" class="headerlink" title="案例（1.0.2）"></a>案例（1.0.2）</h4><p>类似 test4、test5、test6 的场景，可以将 <code>std::unordered_map&lt;int, int&gt;</code> 从模板实现之处消去，由调用方通过模板参数传入类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test8.h</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> MAP&gt; <span class="function">MAP <span class="title">test4</span><span class="params">(T)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> MAP&gt; <span class="function"><span class="type">int</span> <span class="title">test5</span><span class="params">(T)</span> </span>&#123; MAP s; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> MAP&gt; <span class="keyword">struct</span> <span class="title class_">Test1</span> &#123; MAP d_; &#125;;</span><br><span class="line"><span class="comment">// test8.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test8.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; Test1&lt;<span class="type">void</span>, std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;(); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例（1-1）"><a href="#案例（1-1）" class="headerlink" title="案例（1.1）"></a>案例（1.1）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test9.cpp</span></span><br><span class="line"><span class="comment">// test9.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt; <span class="keyword">struct</span> <span class="title class_">Test9_2</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123; b ? <span class="built_in">goo</span>&lt;<span class="type">float</span>&gt;() : <span class="built_in">goo</span>&lt;<span class="type">double</span>&gt;(); &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">goo</span><span class="params">()</span> </span>&#123; std::optional&lt;T&gt;&#123;&#125;; &#125;</span><br><span class="line">  std::optional&lt;V&gt; v_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test9_1</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">bool</span> b)</span> </span>&#123; b ? <span class="built_in">goo</span>&lt;<span class="type">int</span>&gt;() : <span class="built_in">goo</span>&lt;<span class="type">bool</span>&gt;(); &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">koo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">goo</span>&lt;<span class="type">int64_t</span>&gt;();</span><br><span class="line">    Test9_2&lt;<span class="type">char</span>&gt;&#123;&#125;.<span class="built_in">foo</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">goo</span><span class="params">()</span> </span>&#123; std::optional&lt;T&gt;&#123;&#125;; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// template struct Test9_2&lt;&gt;; // InstantiateFunction&#123;&quot;detail&quot;:&quot;Test9_2&lt;&gt;::goo&lt;float&gt;&quot;&#125; and InstantiateFunction&#123;&quot;detail&quot;:&quot;Test9_2&lt;&gt;::goo&lt;double&gt;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>test9 中可以看到编译器前端在 PerformPendingInstantiations 阶段，实例化了模板函数 <code>Test9_1::goo&lt;int&gt;</code>，<code>Test9_1::goo&lt;bool&gt;</code>。因为编译器解析普通类成员函数 <code>Test9_1::foo</code> 的实现，至少要推导出这 2 个依赖函数的完整上下文，否则就会失败报错。<br>模板函数 <code>Test9_1::koo</code> 中调用了其他模板函数 <code>Test9_1::goo&lt;int64_t&gt;</code> 和 <code>Test9_2&lt;char&gt;::foo</code>。但这种仅仅在函数模板内调用其他模板函数的行为，编译器则默认不会实例化模板函数。同理，对于类模板 <code>Test9_2</code>，当显式声明实例化（<code>template struct Test9_2&lt;&gt;;</code>）后才能看到被实例化的模板函数 <code>Test9_2&lt;&gt;::goo&lt;float&gt;</code> 和 <code>Test9_2&lt;&gt;::goo&lt;double&gt;</code>。</p>
<h4 id="案例（1-2）"><a href="#案例（1-2）" class="headerlink" title="案例（1.2）"></a>案例（1.2）</h4><p>test10 中的 <code>struct Test10</code> 同时定义了 3 个成员函数，并 <strong>显式</strong> 地实现了 <code>Test10::goo</code>，最终只有 <code>Test10::goo</code> 生成了对应的符号和汇编。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test10.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="function"><span class="type">int</span> <span class="title">foo2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">3</span>; &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Test10::goo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ clang++ -c test10.cpp -o test10.o -ftime-trace -std=gnu++17</span><br><span class="line">➜ nm -C test10.o </span><br><span class="line">0000000000000000 T Test10::goo()</span><br></pre></td></tr></table></figure>

<p>当编译单元存在其他函数实现依赖 <code>Test10::foo</code> 和 <code>Test10::foo2&lt;&gt;</code> 时，才会生成相关的符号和汇编。对于这种 <strong>非显式</strong> 定义的函数，符号类型被设为 <code>W / w（弱态）</code>，待链接时去重（<strong>即便不同源文件使用了相同头文件（例如各种 STL），最后也不会产生冲突</strong>）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test10.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="function"><span class="type">int</span> <span class="title">foo2</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">3</span>; &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Test10::goo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Test10&#123;&#125;.<span class="built_in">foo</span>() + Test10&#123;&#125;.<span class="built_in">foo2</span>(); &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ clang++ -c test10.cpp -o test10.o -ftime-trace -std=gnu++17</span><br><span class="line">➜ nm -C test10.o </span><br><span class="line">0000000000000010 T koo()</span><br><span class="line">0000000000000000 W Test10::foo()</span><br><span class="line">0000000000000000 T Test10::goo()</span><br><span class="line">0000000000000000 W int Test10::foo2&lt;&gt;()</span><br></pre></td></tr></table></figure>

<h3 id="删减重复模板实例化"><a href="#删减重复模板实例化" class="headerlink" title="删减重复模板实例化"></a>删减重复模板实例化</h3><h4 id="案例（2-0）"><a href="#案例（2-0）" class="headerlink" title="案例（2.0）"></a>案例（2.0）</h4><p>根据 <a href="#ClangBuildAnalyzer-%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C%EF%BC%88%E6%9C%AA%E4%BC%98%E5%8C%96%EF%BC%89">ClangBuildAnalyzer 分析结果</a>，排名靠前的 FunctionsTiDBConversion.cpp，DAGExpressionAnalyzer.cpp，DAGExpressionAnalyzerHelper.cpp 都是重度模板使用者。而且 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2177-L2178"><code>template &lt;bool return_nullable&gt; WrapperType createWrapper</code></a> 是实例化耗时最久的模板函数。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">InstantiateFunction &#123;&quot;detail&quot;:&quot;DB::FunctionTiDBCast::createWrapper&lt;true&gt;&quot;&#125;</span><br><span class="line">&gt; PerformPendingInstantiations</span><br><span class="line">&gt; Frontend</span><br><span class="line">&gt; ExecuteCompiler</span><br><span class="line"></span><br><span class="line">InstantiateFunction &#123;&quot;detail&quot;:&quot;DB::FunctionTiDBCast::createWrapper&lt;false&gt;&quot;&#125;</span><br><span class="line">&gt; PerformPendingInstantiations</span><br><span class="line">&gt; Frontend</span><br><span class="line">&gt; ExecuteCompiler</span><br></pre></td></tr></table></figure>

<hr>
<p>函数的模板参数是一个 <code>bool</code> 类型，全部枚举一遍也就是 2 种情况，共被实例化了 6 次显得很不合理。WHY ？</p>
<ul>
<li>该模板函数作为普通类 <code>class FunctionTiDBCast</code> 的成员函数，且直接在头文件 FunctionsTiDBConversion.h 中被另一个成员函数 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2332-L2338">WrapperType createWrapper(const DataTypePtr &amp;, const DataTypePtr &amp;, bool) const</a> 调用。</li>
<li>包含 FunctionsTiDBConversion.h 的源文件（FunctionsTiDBConversion.cpp，DAGExpressionAnalyzer.cpp，DAGExpressionAnalyzerHelper.cpp）均会解析并实例化被用到的模板函数 <code>DB::FunctionTiDBCast::createWrapper&lt;false&gt;</code>、<code>DB::FunctionTiDBCast::createWrapper&lt;true&gt;</code>。按照调用逻辑，编译器会逐步实例化上百个相关的模板函数，例如 <code>DB::FunctionTiDBCast::createWrapperForDecimal&lt;$&gt;</code></li>
<li>DAGExpressionAnalyzer.cpp 和 DAGExpressionAnalyzerHelper.cpp 对 FunctionTiDBCast 没有逻辑依赖，所以目标文件中不会生成相关符号和汇编。</li>
<li>FunctionsTiDBConversion.cpp 中则从 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.cpp#L44-L47">void registerFunctionsTiDBConversion(FunctionFactory &amp;)</a> 开始向上依赖 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2341">class FunctionBuilderTiDBCast</a> -&gt; <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2369-L2381">buildImpl</a> -&gt; <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L1787">class FunctionTiDBCast</a> -&gt; 虚函数 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L1806-L1814">ExecutableFunctionPtr prepare(const Block &amp;) const</a> -&gt; <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2238">WrapperType prepare(const DataTypePtr &amp;, const DataTypePtr &amp;) const</a> -&gt; <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2332">WrapperType createWrapper(const DataTypePtr &amp;, const DataTypePtr &amp;, bool) const</a> -&gt; …</li>
</ul>
<h4 id="分析（2）"><a href="#分析（2）" class="headerlink" title="分析（2）"></a>分析（2）</h4><p>class FunctionTiDBCast 本身也就只在 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/FunctionsTiDBConversion.h#L2369-L2381">DB::FunctionBuilderTiDBCast::buildImpl</a> 函数中被创建使用。为了删除多余的模板实例化，一种简单的改动就如 <a href="https://github.com/pingcap/tiflash/pull/4978">tiflash&#x2F;pull&#x2F;4978</a></p>
<ul>
<li>将 class FunctionTiDBCast 变成一个模板类 <code>template &lt;typename...&gt; class FunctionTiDBCast</code></li>
<li>把 DB::FunctionBuilderTiDBCast::buildImpl 的实现挪到源文件 FunctionsTiDBConversion.cpp 中。如此一来，即便其他源文件包含 FunctionsTiDBConversion.h，因为没有实际使用关系也就不会实例化该模板类及其成员函数。</li>
</ul>
<p>改动效果如下，DAGExpressionAnalyzerHelper.cpp 的前端耗时从 185258 ms 下降到 20012 ms（降幅 89.2%），DAGExpressionAnalyzer.cpp 则是 181468 ms 降到 19898 ms（降幅 89.0%）。模板函数被实例化的次数也符合预期。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**** Files that took longest to parse (compiler frontend):</span><br><span class="line">188112 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsTiDBConversion.cpp.o</span><br><span class="line">...</span><br><span class="line"> 20012 ms: /data2/work/build-llvm-tiflash/dbms/src/Flash/CMakeFiles/flash_service.dir/Coprocessor/DAGExpressionAnalyzerHelper.cpp.o</span><br><span class="line"> 19898 ms: /data2/work/build-llvm-tiflash/dbms/src/Flash/CMakeFiles/flash_service.dir/Coprocessor/DAGExpressionAnalyzer.cpp.o</span><br><span class="line"></span><br><span class="line">**** Files that took longest to codegen (compiler backend):</span><br><span class="line">...</span><br><span class="line">210576 ms: /data2/work/build-llvm-tiflash/dbms/src/Functions/CMakeFiles/clickhouse_functions.dir/FunctionsTiDBConversion.cpp.o</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">**** Files that took longest to parse (compiler frontend):</span><br><span class="line">...</span><br><span class="line"> 85109 ms: DB::FunctionTiDBCast&lt;&gt;::createWrapper&lt;false&gt; (1 times, avg 85109 ms)</span><br><span class="line"> 84390 ms: DB::FunctionTiDBCast&lt;&gt;::createWrapper&lt;true&gt; (1 times, avg 84390 ms)</span><br><span class="line">...</span><br><span class="line"> 144093 ms: DB::FunctionTiDBCast&lt;$&gt;::createWrapperForDecimal&lt;$&gt; (160 times, avg 900 ms)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>PS：理论上把头文件里非模板的实现都挪到源文件中（例如 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%883-1%EF%BC%89">案例（3.1）</a>），可以达到相同的效果，现在这种方式无非是代码改动比较小而已。</strong></p>
<h3 id="拆分｜合并编译单元"><a href="#拆分｜合并编译单元" class="headerlink" title="拆分｜合并编译单元"></a>拆分｜合并编译单元</h3><p>删减重复模板实例化之后，可以发现 divide.cpp 是最大的编译单元，编译器前端耗时 30783 ms，后端 416467 ms。后端耗时主要是编译这 4 个模板类 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/dbms/src/Functions/divide.cpp#L308-L333">dbms&#x2F;src&#x2F;Functions&#x2F;divide.cpp#L308-L333</a> 以及其衍生出的<br><code>template &lt;typename... Ts, typename F&gt; static bool castTypeToEither</code>。巨大的编译单元令每次修改代码均陷入漫长的等待。为了充分利用多核资源，避免单核瓶颈，一种简单的方法就是把这 4 个函数及其相关的模板实例拆分到 4 个源文件中。</p>
<ul>
<li>事实上之前 TiFlash 代码中注册这类 Function 函数的风格也是继承 Clickhouse，按功能独立拆分成：registerFunctionDivideFloating.cpp、registerFunctionDivideIntegral.cpp、registerFunctionDivideIntegralOrZero.cpp、registerFunctionTiDBDivideFloating.cpp 这 4 个源文件。</li>
<li>是在 <a href="https://github.com/pingcap/tiflash/commit/92e668158c87893535d812773e4bfa501f0a2dc8">92e668158c87893535d812773e4bfa501f0a2dc8</a> 中这些源文件被合并成现在这样巨大的编译单元。</li>
</ul>
<hr>
<p>合并源文件所带来的好处包括以下几点：</p>
<ul>
<li>减少头文件前端处理开销：例如某个头文件被多个源文件包含，每个编译单元都需独立解析一遍。<ul>
<li>实际工程项目中也可通过 <a href="#%E9%A2%84%E7%BC%96%E8%AF%91%E5%A4%B4%E6%96%87%E4%BB%B6%EF%BC%88PCH%EF%BC%89">预编译头文件</a> 来优化</li>
</ul>
</li>
<li>减少重复编译：与 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%881-2%EF%BC%89">案例（1.2）</a> 类似，头文件中有函数实现，每个编译单元用到该函数时均会生成相关的符号和汇编。但最终链接器只会为符号绑定一种实现。</li>
<li>利于编译器优化：普通编译优化无法跨编译单元</li>
</ul>
<p>更有甚者，<a href="https://en.wikipedia.org/wiki/Unity_build">Unity build</a> 通过把所有源文件合并成一个来避免上述开销。cmake 参数 <a href="https://cmake.org/cmake/help/v3.21/variable/CMAKE_UNITY_BUILD.html#variable:CMAKE_UNITY_BUILD">CMAKE_UNITY_BUILD</a> 也提供了这一支持。由于代码集中在单个编译单元内，有利于编译器全量分析上下文实现优化（比起 <a href="#LTO%EF%BC%88Link-Time-Optimization%EF%BC%89">LTO</a> 更加彻底）。但代价就是：</p>
<ul>
<li>无法并行编译和增量编译</li>
<li>需解决静态变量或本地定义重名冲突</li>
<li>编译单元资源内存消耗峰值较大</li>
</ul>
<hr>
<p>就工程实践而言，为了兼顾开发效率，对于编译单元可以适度地拆分&#x2F;合并。可参考的标准为：</p>
<ul>
<li>根据 ClangBuildAnalyzer 分析结果中后端编译耗时的前几项，找出明显偏高的单元。</li>
<li>对于前端编译耗时相比于后端较低（例如小于 15%）的编译单元，则可根据逻辑模块进行拆分</li>
<li>对于前端耗时相比于后端较高的模块，则可以按需合并</li>
<li>理想情况下，期望所有编译单元的耗时接近平均值</li>
</ul>
<h3 id="显式实例化"><a href="#显式实例化" class="headerlink" title="显式实例化"></a>显式实例化</h3><p>基本概念参考 <a href="https://en.cppreference.com/w/cpp/language/class_template">Explicit instantiation</a>，核心语法为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="keyword">class</span>-key <span class="keyword">template</span>-name &lt; argument-list &gt; ;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="keyword">class</span>-key <span class="keyword">template</span>-name &lt; argument-list &gt; ;</span><br></pre></td></tr></table></figure>

<h4 id="案例（3-0）"><a href="#案例（3-0）" class="headerlink" title="案例（3.0）"></a>案例（3.0）</h4><p>对于类&#x2F;模板类的成员函数，即便声明了 <code>extern template void Test11&lt;&gt;::foo_1&lt;int64_t&gt;();</code> 和 <code>extern template void Test11&lt;&gt;::doo_1&lt;int64_t&gt;();</code>，但火焰图仍显示了函数 <code>Test11&lt;&gt;::foo_1&lt;long long&gt;</code>，<code>Test11&lt;&gt;::doo_1&lt;long long&gt;</code> 被实例化的过程，和预期不符。只有函数模板声明了 <code>extern template void foo_2&lt;float&gt;();</code> 后，火焰图中才没有任何相关的实例化过程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test11.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">struct</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">foo_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::optional&lt;T&gt;&#123;&#125;;</span><br><span class="line">    <span class="built_in">doo_1</span>&lt;T&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">doo_1</span><span class="params">()</span> </span>&#123; std::map&lt;T, T&gt;&#123;&#125;; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">doo_2</span><span class="params">()</span> </span>&#123; std::map&lt;T, T&gt;&#123;&#125;; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">foo_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::optional&lt;T&gt;&#123;&#125;;</span><br><span class="line">  <span class="built_in">doo_2</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test11&#123;&#125;.<span class="built_in">foo_1</span>&lt;<span class="type">int64_t</span>&gt;();</span><br><span class="line">  <span class="built_in">foo_2</span>&lt;<span class="type">float</span>&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="type">void</span> Test11&lt;&gt;::<span class="built_in">foo_1</span>&lt;<span class="type">int64_t</span>&gt;();</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="type">void</span> Test11&lt;&gt;::<span class="built_in">doo_1</span>&lt;<span class="type">int64_t</span>&gt;();</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="type">void</span> <span class="built_in">foo_2</span>&lt;<span class="type">float</span>&gt;();</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ clang++ -c test11.cpp -o test11.o -ftime-trace -std=gnu++17</span><br><span class="line">➜ nm -C test11.o</span><br><span class="line">0000000000000000 T goo()</span><br><span class="line">                 U void foo_2&lt;<span class="built_in">float</span>&gt;()</span><br><span class="line">                 U void Test11&lt;&gt;::foo_1&lt;long long&gt;()</span><br></pre></td></tr></table></figure>

<p>类可采用定义实现分离的方式来达到类似的效果，不过需要注意的是：如果模板函数有被实际用到（例如 <code>test12_2.cpp</code>），需要像 <code>(1)</code> 处在模板函数实现的源文件内显式实例化，否则会出现找不到相关符号的链接错误。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test12_1.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">struct</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">foo_1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="type">void</span> <span class="title">doo_1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test12_2.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test12_1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; Test12&lt;&gt;&#123;&#125;.<span class="built_in">foo_1</span>&lt;<span class="type">int64_t</span>&gt;(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test12_1.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test12_1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Test12&lt;Args...&gt;::<span class="built_in">foo_1</span>() &#123;</span><br><span class="line">  std::optional&lt;T&gt;&#123;&#125;;</span><br><span class="line">  <span class="built_in">doo_1</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Test12&lt;Args...&gt;::<span class="built_in">doo_1</span>() &#123;</span><br><span class="line">  std::map&lt;T, T&gt;&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> <span class="type">void</span> Test12&lt;&gt;::<span class="built_in">foo_1</span>&lt;<span class="type">int64_t</span>&gt;(); <span class="comment">// (1)</span></span><br></pre></td></tr></table></figure>

<h3 id="抽象出-ABI-稳定接口"><a href="#抽象出-ABI-稳定接口" class="headerlink" title="抽象出 ABI 稳定接口"></a>抽象出 ABI 稳定接口</h3><p>如果类模板中实现了普通函数，则可将涉及到非模板的实现封装成独立的接口，以免每次模板实例化时生成重复代码。</p>
<h4 id="案例（3-1）"><a href="#案例（3-1）" class="headerlink" title="案例（3.1）"></a>案例（3.1）</h4><p>每次实例化类模板，编译器均会生成函数 <code>Node&lt;xxx&gt;::foo</code>。如果采用定义实现分离的方式，则需要像 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%883-0%EF%BC%89">案例（3.0）</a> 显式实例化每个被用到的模板类。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test15.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; std::optional&lt;<span class="type">float</span>&gt; _; &#125;</span><br><span class="line">  T v_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将函数分离到抽象类中，并通过类继承的方式封装，则最后只存在函数 <code>NodeBase::foo</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test15_base.h</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NodeBase</span> &#123;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// test15_2.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test15_base.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">Node</span> : NodeBase &#123; T v_; &#125;;</span><br><span class="line"><span class="comment">// test15_base.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test15_base.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NodeBase::foo</span><span class="params">()</span> </span>&#123; std::optional&lt;<span class="type">float</span>&gt; _; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="头文件优化"><a href="#头文件优化" class="headerlink" title="头文件优化"></a>头文件优化</h2><h3 id="头文件依赖"><a href="#头文件依赖" class="headerlink" title="头文件依赖"></a>头文件依赖</h3><p>现有工具：</p>
<ul>
<li>头文件分析工具 <a href="https://github.com/include-what-you-use/include-what-you-use">include-what-you-use</a> 相对细致，但结果需要人工排查确认，成本较高。例如 TiFlash 的 cmake 编译选项 <a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/CMakeLists.txt#L311-L321">USE_INCLUDE_WHAT_YOU_USE</a>。</li>
<li>ClangBuildAnalyzer 工具输出项 <code>Expensive headers</code> 比较简单清晰，展示头文件被包含的路径。需要人工分析依赖关系，找出瓶颈并优化（模板相关可参考上文）。</li>
</ul>
<p><strong>头文件依赖解耦，可列出说明使用文档和标准，让社区参与。</strong></p>
<h3 id="前向声明"><a href="#前向声明" class="headerlink" title="前向声明"></a>前向声明</h3><p>前向声明（<a href="https://en.wikipedia.org/wiki/Forward_declaration">Forward declaration</a>）是尚未给出完整定义的标识符（例如类型、变量、常量、函数）声明。编译器需要知道标识符的部分属性（内存大小和对齐方式，数据类型），但不用知道其他实现细节。</p>
<hr>
<p>前向声明对于解耦头文件依赖有较大帮助。然而 <a href="https://google.github.io/styleguide/cppguide.html#Forward_Declarations">Google C++ Style Guide</a> 中却提出 <code>Avoid using forward declarations where possible</code>。比较关键的原因是在某些场景下，前向声明会导致代码静默行为产生变化，例如 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%884-1%EF%BC%89">案例（4.1）</a>。</p>
<h4 id="案例（4-0）"><a href="#案例（4-0）" class="headerlink" title="案例（4.0）"></a>案例（4.0）</h4><p>test13_2.cpp 中声明了前向定义 <code>struct Test13_1;</code>，并在 <code>struct Test13_2</code> 的成员函数和成员变量中引用。该源文件可以正常编译。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test13_2.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test13_1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test13_2</span> &#123;</span><br><span class="line">  Test13_1 &amp;data;</span><br><span class="line">  <span class="function">Test13_1 <span class="title">foo</span><span class="params">(Test13_1)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(Test13_2) == <span class="built_in">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">alignof</span>(Test13_2) == <span class="built_in">alignof</span>(<span class="type">void</span> *));</span><br></pre></td></tr></table></figure>

<h4 id="分析（4）"><a href="#分析（4）" class="headerlink" title="分析（4）"></a>分析（4）</h4><ul>
<li>成员变量 <code>Test13_2::data</code> 的类型实际是 <code>引用</code>，其内存大小和对齐方式和 <code>指针</code> 相同，编译器解析时并不需要知道 <code>Test13_1</code> 的具体实现。</li>
<li>成员函数 <code>Test13_2::foo</code> 引用了 <code>Test13_1</code>，但编译单元内没有实现该函数，编译器则将其作为一个函数声明（本身也是种前向声明）。</li>
</ul>
<h4 id="案例（4-1）"><a href="#案例（4-1）" class="headerlink" title="案例（4.1）"></a>案例（4.1）</h4><p><code>class B</code> 继承了 <code>class A</code>，如果隐藏类定义，则编译单元 <code>test14.cpp</code> 中 <code>void test_14(B *)</code> 最后会调用 <code>f(void *)</code>，如果包含具体定义，在 <code>test14_1.cpp</code> 中则调用 <code>f(A *)</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test14.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="comment">// struct A &#123;&#125;;</span></span><br><span class="line"><span class="comment">// struct B : A &#123;&#125;;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(A *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">void</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_14</span><span class="params">(B *x)</span> </span>&#123; <span class="built_in">f</span>(x); &#125; <span class="comment">// call f(void *);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test14_1.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(A *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">void</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_14</span><span class="params">(B *x)</span> </span>&#123; <span class="built_in">f</span>(x); &#125; <span class="comment">// call f(A *);</span></span><br></pre></td></tr></table></figure>

<p>这个案例中引起不确定性行为的是 C++ 特有的函数重载和类继承方式：</p>
<ul>
<li><code>void *</code> 指针可以匹配任意其他指针。</li>
<li><code>test14_1.cpp</code> 中编译器优先按照继承关系匹配，由于不存在 <code>f(B *)</code>，则查找顺序为从 <code>f(A *)</code> 到 <code>f(void *)</code>。</li>
<li><code>test14.cpp</code> 中不存在继承关系，且不存在 <code>f(B *)</code>，则直接匹配到 <code>f(void *)</code>。</li>
</ul>
<p>解决这个案例中的问题，可参考以下途径：</p>
<ul>
<li>去掉 <code>f(void *)</code> 函数，令编译时直接报错，由开发者排查并补上继承关系。<ul>
<li>绝大部份实际应用中，比较常见的是子类继承并重写基类的虚函数，用 <code>void *</code> 兜底很难说有什么实际意义。</li>
</ul>
</li>
<li>在 <code>f(void *)</code> 的逻辑实现中直接抛异常或手动 panic。</li>
</ul>
<p><strong>在代码设计和审查环节应当注意避开这类问题而非一味禁止使用前向声明。</strong></p>
<h3 id="预编译头文件（PCH）"><a href="#预编译头文件（PCH）" class="headerlink" title="预编译头文件（PCH）"></a>预编译头文件（PCH）</h3><p><a href="https://en.wikipedia.org/wiki/Precompiled_header">Precompiled header</a>（aka <code>PCH</code>）：预编译（C 或 C++）头文件，使之被编译成编译器可以更快处理的中间形式，使用预编译头文件可以显着减少编译时间（主要是前端）。cmake 中支持 PCH 的语法为 <a href="https://cmake.org/cmake/help/v3.22/command/target_precompile_headers.html">target_precompile_headers</a>。</p>
<ul>
<li>在 Windows 系统下用 Visual Studio 开发桌面软件时经常能看到头文件 <code>stdafx.h</code>，里面基本会包含开发所用的重型 API。</li>
<li>参考 <a href="#%E6%A8%A1%E6%9D%BF%E5%AE%9E%E4%BE%8B%E5%8C%96">模板实例化</a> 章节中的几个案例，编译器解析头文件会有不小的开销（尤其涉及到模板实例化），对于 TiFlash 这种 C++ 项目也是个不可忽略的问题。</li>
</ul>
<h4 id="案例（4-2）"><a href="#案例（4-2）" class="headerlink" title="案例（4.2）"></a>案例（4.2）</h4><p>根据 <a href="#ClangBuildAnalyzer-%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C%EF%BC%88%E6%9C%AA%E4%BC%98%E5%8C%96%EF%BC%89">ClangBuildAnalyzer 分析结果</a>，<code>Expensive headers</code> 中包含不少公共模块和 STL 库的头文件。<a href="https://github.com/pingcap/tiflash/blob/5847f1c235b996eb6fb970029da926909e1819fd/dbms/CMakeLists.txt#L262-L270-R270">5847f1c235b996eb6fb970029da926909e1819fd</a> 为相关库编译选项加上 PCH：</p>
<ul>
<li><code>pch-common.h</code> 包含 Exception.h，FmtUtils.h，StackTrace.h 之类的公共模块头文件</li>
<li><code>pch-stl.h</code> 包含常用的 STL 库头文件，例如 algorithm，string，vector，functional 等</li>
<li><code>pch-kvpb.h</code> 包含比较重型的 grpc 相关头文件</li>
</ul>
<p>优化后，分析结果显示前端总耗时和重型头文件解析耗时显著下降。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**** Time summary:</span><br><span class="line">Compilation (5487 times):</span><br><span class="line">  Parsing (frontend):         4167.5 s</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">*** Expensive headers:</span><br><span class="line">188125 ms: /data2/work/tiflash/dbms/src/Columns/IColumn.h (included 515 times, avg 365 ms), included via:</span><br><span class="line">...</span><br><span class="line">178572 ms: /data2/work/tiflash/dbms/src/Common/Decimal.h (included 657 times, avg 271 ms), included via:</span><br><span class="line">...</span><br><span class="line">122002 ms: /data2/work/tiflash/dbms/src/Core/Block.h (included 416 times, avg 293 ms), included via:</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="PImpl"><a href="#PImpl" class="headerlink" title="PImpl"></a>PImpl</h3><p>PImpl（<a href="https://en.cppreference.com/w/cpp/language/pimpl">Pointer to implementation</a>）又称编译防火墙（<code>Compilation firewall</code>）。在类定义中隐藏数据结构的实现细节，只对外暴露不透明的指针&#x2F;引用&#x2F;其他固定类型作为访问入口。</p>
<ul>
<li>例如发布二进制库给第三方，除了代码混淆，通常也需要用 PImpl 提供稳定的 ABI 并保护私有数据结构安全。</li>
<li>PImpl 的劣势包括以下几点，如有必要可参考 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%881-0-1%EF%BC%89">案例（1.0.1）</a> 来优化<ul>
<li>需要分配额外的内存空间</li>
<li>存取变量时需要额外的内存寻址，对于看重 CPU Cache 和代码局部性的场景不利</li>
</ul>
</li>
</ul>
<h4 id="案例（5-0）"><a href="#案例（5-0）" class="headerlink" title="案例（5.0）"></a>案例（5.0）</h4><p>根据 ClangBuildAnalyzer 结果，有关 <a href="https://github.com/pingcap/tiflash/blob/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/dbms/src/Common/TiFlashException.h#L162-L172">struct TiFlashError</a> 的几个模板实例化总开销不小。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**** Templates that took longest to instantiate:</span><br><span class="line">...</span><br><span class="line"> 53692 ms: std::optional&lt;DB::TiFlashError&gt; (663 times, avg 80 ms)</span><br><span class="line">... </span><br><span class="line"> 47327 ms: std::map&lt;std::pair&lt;std::string, std::string&gt;, DB::TiFlashError&gt; (663 times, avg 71 ms)</span><br><span class="line"> 24149 ms: std::__rebind_alloc_helper&lt;std::allocator_traits&lt;std::allocator&lt;std::pair&lt;const std::pair&lt;std::string, std::string&gt;, DB::TiFlashError&gt;&gt;&gt;, std::__value_type&lt;std::pair&lt;std::string, std::string&gt;, DB::TiFlashError&gt;&gt; (663 times, avg 36 ms)</span><br><span class="line"> 23596 ms: std::allocator_traits&lt;std::allocator&lt;std::pair&lt;const std::pair&lt;std::string, std::string&gt;, DB::TiFlashError&gt;&gt;&gt; (663 times, avg 35 ms)</span><br><span class="line"> 22289 ms: std::__value_type&lt;std::pair&lt;std::string, std::string&gt;, DB::TiFlashError&gt; (663 times, avg 33 ms)</span><br></pre></td></tr></table></figure>

<p>使用这些模板的地方主要在 <a href="https://github.com/pingcap/tiflash/blob/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/dbms/src/Common/TiFlashException.h#L192-L257">class TiFlashErrorRegistry</a>。这种把成员函数实现直接放在头文件里的做法 <strong>不值得提倡</strong>，因为包含其的源文件均会解析并实例化涉及到的模板，建议分离定义和实现。<br>但是对于使用了 STL 模板的成员变量 <a href="https://github.com/pingcap/tiflash/blob/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/dbms/src/Common/TiFlashException.h#L256">std::map&lt;std::pair&lt;std::string, std::string&gt;, TiFlashError&gt; all_errors</a> 则需要多加考量。</p>
<ul>
<li>头文件中分离函数实现后，只要编译单元内没有其他符号对函数有依赖关系，编译器就可以不实例化函数涉及到的模板</li>
<li>对于类定义，编译器会解析其成员变量和依赖以确定大小和对齐方式。</li>
</ul>
<p>分析上下文信息可知这个类主要以 <code>单例</code> 的形式用来维护&#x2F;查找预设数据，可以使用 PImpl 改造以降低前端开销（对于该类的使用场景几乎不会有性能影响）。本案例中类重构效果如<br><a href="https://github.com/pingcap/tiflash/commit/5847f1c235b996eb6fb970029da926909e1819fd#diff-8188b262b79652a91ca17d4ba1329730b9dc1a8a2527ad21798eadf3a483db0d">TiFlashException.h#L192-L225</a>。改造完成后，上面提到的模板实例化开销均被消除。<br>除了裸指针，用 <code>std::unique_ptr</code> 也是同样原理，例如 <a href="https://github.com/pingcap/tiflash/commit/5847f1c235b996eb6fb970029da926909e1819fd#diff-30095d1da019568697a7bf369f28b2b440e2da783bf4cfdd7938bb839ddbf9cdL232-R229">KVStore.h</a> 的改动。</p>
<h2 id="LTO（Link-Time-Optimization）"><a href="#LTO（Link-Time-Optimization）" class="headerlink" title="LTO（Link Time Optimization）"></a>LTO（Link Time Optimization）</h2><p>链接时优化（<a href="https://llvm.org/docs/LinkTimeOptimization.html">Link Time Optimization</a>）是比较典型的后端优化，属于 <a href="https://en.wikipedia.org/wiki/Interprocedural_optimization">Interprocedural optimization</a>。LLVM 提供了强大的链接时跨模块优化功能，以获取更好的运行时性能。</p>
<p><a href="https://clang.llvm.org/docs/ThinLTO.html">ThinLTO</a> 是一种新型的 LTO 技术。默认 <code>full</code> 模式的 LTO 会将所有目标文件整合成一个大模块，比较耗费资源且不可并行化扩展，同时这种方式也无法进行快速增量编译。ThinLTO 模式下，编译器生成的 bitcode 格式文件会额外包含模块的摘要（<code>compact summary</code>），链接器将这些摘要合并为索引，便于后期跨模块导入。链接器进行全局分析和优化也是基于该索引。</p>
<p><a href="https://github.com/pingcap/tiflash/pull/4890">tiflash&#x2F;pull&#x2F;4890</a> 中加入了 cmake 选项 <code>ENABLE_THINLTO</code> 并在 <a href="https://github.com/pingcap/tiflash/pull/4924">release build</a> 流程中启用。跨模块优化的好处有以下几点：</p>
<ul>
<li>全局优化：去虚拟化（<code>whole-program devirtualization</code>），跨模块函数内联</li>
<li>删减无用代码</li>
</ul>
<p><strong>出于性能考虑，有人会放弃 <a href="#%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E">前向声明</a> 将函数直接实现在头文件中，这样有利于跨模块函数调用时编译器自动内联。有了 LTO 的支持，就无需担心这个问题（例如 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%886-0%EF%BC%89">案例（6.0）</a>），将实现和定义分离有利于优化工程架构。</strong></p>
<h3 id="案例（6-0）"><a href="#案例（6-0）" class="headerlink" title="案例（6.0）"></a>案例（6.0）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// t1.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">get</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> idx)</span> </span>&#123; <span class="keyword">return</span> data[idx]; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> </span>&#123; <span class="keyword">return</span> i &lt; len; &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">joo</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base::joo</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Base::foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">doo</span><span class="params">(<span class="type">int</span> x, Base &amp;d)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> + d.<span class="built_in">foo</span>(x); &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// t2.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">goo</span>(x) * <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">goo</span>(x) / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">get</span><span class="params">(<span class="type">int</span> *data, <span class="type">int</span> idx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; <span class="built_in">check</span>(i, len); ++i)</span><br><span class="line">    <span class="built_in">get</span>(c, i) = <span class="built_in">get</span>(a, i) + <span class="built_in">get</span>(b, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">joo</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">doo</span><span class="params">(<span class="type">int</span> x, Base &amp;d)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Impl</span> : Base &#123;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> x + <span class="number">4</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">  Impl tt&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">doo</span>(x, tt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// t3.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b, <span class="type">int</span> *c, <span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">foo</span>(<span class="number">123</span>);</span><br><span class="line">  <span class="built_in">sum</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">koo</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>未启用 LTO，编译器优化无法跨模块。<code>foo</code>，<code>sum</code>，<code>koo</code> 函数的汇编实现无任何优化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang++  -O3 -DNDEBUG -std=gnu++17 -o t1.o -c t1.cpp</span><br><span class="line">clang++  -O3 -DNDEBUG -std=gnu++17 -o t2.o -c t2.cpp</span><br><span class="line">clang++  -O3 -DNDEBUG -std=gnu++17 -o t3.o -c t3.cpp</span><br><span class="line">clang++  -O3 -DNDEBUG -fuse-ld=lld t1.o t2.o t3.o -o <span class="built_in">test</span></span><br><span class="line">objdump -d <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">00000000002019e0 &lt;_Z3dooiR4Base&gt;:</span><br><span class="line">  2019e0:	50                   	push   %rax</span><br><span class="line">  2019e1:	89 f8                	mov    %edi,%eax</span><br><span class="line">  2019e3:	48 8b 0e             	mov    (%rsi),%rcx</span><br><span class="line">  2019e6:	48 89 f7             	mov    %rsi,%rdi</span><br><span class="line">  2019e9:	89 c6                	mov    %eax,%esi</span><br><span class="line">  2019eb:	ff 51 08             	callq  *0x8(%rcx)</span><br><span class="line">  2019ee:	83 c0 02             	add    <span class="variable">$0x2</span>,%eax</span><br><span class="line">  2019f1:	59                   	pop    %rcx</span><br><span class="line">  2019f2:	c3                   	retq   </span><br><span class="line"></span><br><span class="line">0000000000201a00 &lt;_Z3fooi&gt;:</span><br><span class="line">  201a00:	53                   	push   %rbx</span><br><span class="line">  201a01:	89 fb                	mov    %edi,%ebx</span><br><span class="line">  201a03:	e8 78 ff ff ff       	callq  201980 &lt;_Z3gooi&gt;</span><br><span class="line">  201a08:	85 db                	<span class="built_in">test</span>   %ebx,%ebx</span><br><span class="line">  201a0a:	7e 07                	jle    201a13 &lt;_Z3fooi+0x13&gt;</span><br><span class="line">  201a0c:	01 c0                	add    %eax,%eax</span><br><span class="line">  201a0e:	8d 04 80             	lea    (%rax,%rax,4),%eax</span><br><span class="line">  201a11:	5b                   	pop    %rbx</span><br><span class="line">  201a12:	c3                   	retq   </span><br><span class="line">  201a13:	48 98                	cltq   </span><br><span class="line">  201a15:	48 69 c0 67 66 66 66 	imul   <span class="variable">$0x66666667</span>,%rax,%rax</span><br><span class="line">  201a1c:	48 89 c1             	mov    %rax,%rcx</span><br><span class="line">  201a1f:	48 c1 e9 3f          	shr    <span class="variable">$0x3f</span>,%rcx</span><br><span class="line">  201a23:	48 c1 f8 22          	sar    <span class="variable">$0x22</span>,%rax</span><br><span class="line">  201a27:	01 c8                	add    %ecx,%eax</span><br><span class="line">  201a29:	5b                   	pop    %rbx</span><br><span class="line">  201a2a:	c3                   	retq   </span><br><span class="line">  201a2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000201a30 &lt;_Z3sumPiS_S_i&gt;:</span><br><span class="line">  201a30:	55                   	push   %rbp</span><br><span class="line">  201a31:	41 57                	push   %r15</span><br><span class="line">  201a33:	41 56                	push   %r14</span><br><span class="line">  201a35:	41 55                	push   %r13</span><br><span class="line">  201a37:	41 54                	push   %r12</span><br><span class="line">  201a39:	53                   	push   %rbx</span><br><span class="line">  201a3a:	50                   	push   %rax</span><br><span class="line">  201a3b:	41 89 <span class="built_in">cd</span>             	mov    %ecx,%r13d</span><br><span class="line">  201a3e:	49 89 d6             	mov    %rdx,%r14</span><br><span class="line">  201a41:	49 89 f7             	mov    %rsi,%r15</span><br><span class="line">  201a44:	49 89 <span class="built_in">fc</span>             	mov    %rdi,%r12</span><br><span class="line">  201a47:	31 ed                	xor    %ebp,%ebp</span><br><span class="line">  201a49:	31 ff                	xor    %edi,%edi</span><br><span class="line">  201a4b:	89 ce                	mov    %ecx,%esi</span><br><span class="line">  201a4d:	e8 5e ff ff ff       	callq  2019b0 &lt;_Z5checkii&gt;</span><br><span class="line">  201a52:	84 c0                	<span class="built_in">test</span>   %al,%al</span><br><span class="line">  201a54:	74 3f                	je     201a95 &lt;_Z3sumPiS_S_i+0x65&gt;</span><br><span class="line">  201a56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  201a5d:	00 00 00 </span><br><span class="line">  201a60:	4c 89 e7             	mov    %r12,%rdi</span><br><span class="line">  201a63:	89 ee                	mov    %ebp,%esi</span><br><span class="line">  201a65:	e8 36 ff ff ff       	callq  2019a0 &lt;_Z3getPii&gt;</span><br><span class="line">  201a6a:	8b 18                	mov    (%rax),%ebx</span><br><span class="line">  201a6c:	4c 89 ff             	mov    %r15,%rdi</span><br><span class="line">  201a6f:	89 ee                	mov    %ebp,%esi</span><br><span class="line">  201a71:	e8 2a ff ff ff       	callq  2019a0 &lt;_Z3getPii&gt;</span><br><span class="line">  201a76:	03 18                	add    (%rax),%ebx</span><br><span class="line">  201a78:	4c 89 f7             	mov    %r14,%rdi</span><br><span class="line">  201a7b:	89 ee                	mov    %ebp,%esi</span><br><span class="line">  201a7d:	e8 1e ff ff ff       	callq  2019a0 &lt;_Z3getPii&gt;</span><br><span class="line">  201a82:	89 18                	mov    %ebx,(%rax)</span><br><span class="line">  201a84:	83 c5 01             	add    <span class="variable">$0x1</span>,%ebp</span><br><span class="line">  201a87:	89 ef                	mov    %ebp,%edi</span><br><span class="line">  201a89:	44 89 ee             	mov    %r13d,%esi</span><br><span class="line">  201a8c:	e8 1f ff ff ff       	callq  2019b0 &lt;_Z5checkii&gt;</span><br><span class="line">  201a91:	84 c0                	<span class="built_in">test</span>   %al,%al</span><br><span class="line">  201a93:	75 cb                	jne    201a60 &lt;_Z3sumPiS_S_i+0x30&gt;</span><br><span class="line">  201a95:	48 83 c4 08          	add    <span class="variable">$0x8</span>,%rsp</span><br><span class="line">  201a99:	5b                   	pop    %rbx</span><br><span class="line">  201a9a:	41 5c                	pop    %r12</span><br><span class="line">  201a9c:	41 5d                	pop    %r13</span><br><span class="line">  201a9e:	41 5e                	pop    %r14</span><br><span class="line">  201aa0:	41 5f                	pop    %r15</span><br><span class="line">  201aa2:	5d                   	pop    %rbp</span><br><span class="line">  201aa3:	c3                   	retq   </span><br><span class="line">  201aa4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  201aab:	00 00 00 </span><br><span class="line">  201aae:	66 90                	xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">0000000000201ab0 &lt;_Z3kooi&gt;:</span><br><span class="line">  201ab0:	50                   	push   %rax</span><br><span class="line">  201ab1:	48 c7 04 24 f8 05 20 	movq   <span class="variable">$0x2005f8</span>,(%rsp)</span><br><span class="line">  201ab8:	00 </span><br><span class="line">  201ab9:	48 89 e6             	mov    %rsp,%rsi</span><br><span class="line">  201abc:	e8 1f ff ff ff       	callq  2019e0 &lt;_Z3dooiR4Base&gt;</span><br><span class="line">  201ac1:	59                   	pop    %rcx</span><br><span class="line">  201ac2:	c3                   	retq   </span><br></pre></td></tr></table></figure>

<p>启用 LTO 后</p>
<ul>
<li><code>foo</code> 函数逻辑直接被优化成等效于 <code>if (x &gt; 0) return x * 100; else return x / 100;</code> 的实现</li>
<li><code>sum</code> 中自动向量化生成 SIMD 指令</li>
<li><code>koo</code> 去虚拟化实现等效于 <code>x + 6</code> 的逻辑</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang++ -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -O3 -DNDEBUG -std=gnu++17 -o t1.o -c t1.cpp</span><br><span class="line">clang++ -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -O3 -DNDEBUG -std=gnu++17 -o t2.o -c t2.cpp</span><br><span class="line">clang++ -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -O3 -DNDEBUG -std=gnu++17 -o t3.o -c t3.cpp</span><br><span class="line">clang++ -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -O3 -DNDEBUG -fuse-ld=lld -pthread -flto=thin -flto-jobs=0 -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit t1.o t2.o t3.o -o <span class="built_in">test</span></span><br><span class="line">objdump -d <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">00000000002019f0 &lt;_Z3fooi&gt;:</span><br><span class="line">  2019f0:	85 ff                	<span class="built_in">test</span>   %edi,%edi</span><br><span class="line">  2019f2:	7e 04                	jle    2019f8 &lt;_Z3fooi+0x8&gt;</span><br><span class="line">  2019f4:	6b c7 64             	imul   <span class="variable">$0x64</span>,%edi,%eax</span><br><span class="line">  2019f7:	c3                   	retq   </span><br><span class="line">  2019f8:	f7 <span class="built_in">df</span>                	neg    %edi</span><br><span class="line">  2019fa:	48 69 c7 1f 85 eb 51 	imul   <span class="variable">$0x51eb851f</span>,%rdi,%rax</span><br><span class="line">  201a01:	48 c1 e8 25          	shr    <span class="variable">$0x25</span>,%rax</span><br><span class="line">  201a05:	f7 d8                	neg    %eax</span><br><span class="line">  201a07:	c3                   	retq   </span><br><span class="line"></span><br><span class="line">0000000000201a10 &lt;_Z3sumPiS_S_i&gt;:</span><br><span class="line">  201a10:	85 c9                	<span class="built_in">test</span>   %ecx,%ecx</span><br><span class="line">  201a12:	0f 8e 7f 01 00 00    	jle    201b97 &lt;_Z3sumPiS_S_i+0x187&gt;</span><br><span class="line">  201a18:	41 89 c8             	mov    %ecx,%r8d</span><br><span class="line">  201a1b:	83 f9 08             	cmp    <span class="variable">$0x8</span>,%ecx</span><br><span class="line">  201a1e:	73 7b                	jae    201a9b &lt;_Z3sumPiS_S_i+0x8b&gt;</span><br><span class="line">  201a20:	31 c9                	xor    %ecx,%ecx</span><br><span class="line">  201a22:	49 89 c9             	mov    %rcx,%r9</span><br><span class="line">  201a25:	49 f7 d1             	not    %r9</span><br><span class="line">  201a28:	4d 01 c1             	add    %r8,%r9</span><br><span class="line">  201a2b:	4d 89 c2             	mov    %r8,%r10</span><br><span class="line">  201a2e:	49 83 e2 03          	and    <span class="variable">$0x3</span>,%r10</span><br><span class="line">  201a32:	74 1f                	je     201a53 &lt;_Z3sumPiS_S_i+0x43&gt;</span><br><span class="line">  201a34:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  201a3b:	00 00 00 </span><br><span class="line">  201a3e:	66 90                	xchg   %ax,%ax</span><br><span class="line">  201a40:	8b 04 8e             	mov    (%rsi,%rcx,4),%eax</span><br><span class="line">  201a43:	03 04 8f             	add    (%rdi,%rcx,4),%eax</span><br><span class="line">  201a46:	89 04 8a             	mov    %eax,(%rdx,%rcx,4)</span><br><span class="line">  201a49:	48 83 c1 01          	add    <span class="variable">$0x1</span>,%rcx</span><br><span class="line">  201a4d:	49 83 c2 ff          	add    <span class="variable">$0xffffffffffffffff</span>,%r10</span><br><span class="line">  201a51:	75 ed                	jne    201a40 &lt;_Z3sumPiS_S_i+0x30&gt;</span><br><span class="line">  201a53:	49 83 f9 03          	cmp    <span class="variable">$0x3</span>,%r9</span><br><span class="line">  201a57:	0f 82 3a 01 00 00    	jb     201b97 &lt;_Z3sumPiS_S_i+0x187&gt;</span><br><span class="line">  201a5d:	0f 1f 00             	nopl   (%rax)</span><br><span class="line">  201a60:	8b 04 8e             	mov    (%rsi,%rcx,4),%eax</span><br><span class="line">  201a63:	03 04 8f             	add    (%rdi,%rcx,4),%eax</span><br><span class="line">  201a66:	89 04 8a             	mov    %eax,(%rdx,%rcx,4)</span><br><span class="line">  201a69:	8b 44 8e 04          	mov    0x4(%rsi,%rcx,4),%eax</span><br><span class="line">  201a6d:	03 44 8f 04          	add    0x4(%rdi,%rcx,4),%eax</span><br><span class="line">  201a71:	89 44 8a 04          	mov    %eax,0x4(%rdx,%rcx,4)</span><br><span class="line">  201a75:	8b 44 8e 08          	mov    0x8(%rsi,%rcx,4),%eax</span><br><span class="line">  201a79:	03 44 8f 08          	add    0x8(%rdi,%rcx,4),%eax</span><br><span class="line">  201a7d:	89 44 8a 08          	mov    %eax,0x8(%rdx,%rcx,4)</span><br><span class="line">  201a81:	8b 44 8e 0c          	mov    0xc(%rsi,%rcx,4),%eax</span><br><span class="line">  201a85:	03 44 8f 0c          	add    0xc(%rdi,%rcx,4),%eax</span><br><span class="line">  201a89:	89 44 8a 0c          	mov    %eax,0xc(%rdx,%rcx,4)</span><br><span class="line">  201a8d:	48 83 c1 04          	add    <span class="variable">$0x4</span>,%rcx</span><br><span class="line">  201a91:	49 39 c8             	cmp    %rcx,%r8</span><br><span class="line">  201a94:	75 ca                	jne    201a60 &lt;_Z3sumPiS_S_i+0x50&gt;</span><br><span class="line">  201a96:	e9 <span class="built_in">fc</span> 00 00 00       	jmpq   201b97 &lt;_Z3sumPiS_S_i+0x187&gt;</span><br><span class="line">  201a9b:	4a 8d 0c 82          	lea    (%rdx,%r8,4),%rcx</span><br><span class="line">  201a9f:	4a 8d 04 87          	lea    (%rdi,%r8,4),%rax</span><br><span class="line">  201aa3:	48 39 d0             	cmp    %rdx,%rax</span><br><span class="line">  201aa6:	41 0f 97 c2          	seta   %r10b</span><br><span class="line">  201aaa:	4a 8d 04 86          	lea    (%rsi,%r8,4),%rax</span><br><span class="line">  201aae:	48 39 f9             	cmp    %rdi,%rcx</span><br><span class="line">  201ab1:	41 0f 97 c3          	seta   %r11b</span><br><span class="line">  201ab5:	48 39 d0             	cmp    %rdx,%rax</span><br><span class="line">  201ab8:	0f 97 c0             	seta   %al</span><br><span class="line">  201abb:	48 39 f1             	cmp    %rsi,%rcx</span><br><span class="line">  201abe:	41 0f 97 c1          	seta   %r9b</span><br><span class="line">  201ac2:	31 c9                	xor    %ecx,%ecx</span><br><span class="line">  201ac4:	45 84 da             	<span class="built_in">test</span>   %r11b,%r10b</span><br><span class="line">  201ac7:	0f 85 55 ff ff ff    	jne    201a22 &lt;_Z3sumPiS_S_i+0x12&gt;</span><br><span class="line">  201acd:	44 20 c8             	and    %r9b,%al</span><br><span class="line">  201ad0:	0f 85 4c ff ff ff    	jne    201a22 &lt;_Z3sumPiS_S_i+0x12&gt;</span><br><span class="line">  201ad6:	44 89 c1             	mov    %r8d,%ecx</span><br><span class="line">  201ad9:	83 e1 f8             	and    <span class="variable">$0xfffffff8</span>,%ecx</span><br><span class="line">  201adc:	48 8d 41 f8          	lea    -0x8(%rcx),%rax</span><br><span class="line">  201ae0:	49 89 c1             	mov    %rax,%r9</span><br><span class="line">  201ae3:	49 c1 e9 03          	shr    <span class="variable">$0x3</span>,%r9</span><br><span class="line">  201ae7:	49 83 c1 01          	add    <span class="variable">$0x1</span>,%r9</span><br><span class="line">  201aeb:	48 85 c0             	<span class="built_in">test</span>   %rax,%rax</span><br><span class="line">  201aee:	0f 84 a4 00 00 00    	je     201b98 &lt;_Z3sumPiS_S_i+0x188&gt;</span><br><span class="line">  201af4:	4d 89 ca             	mov    %r9,%r10</span><br><span class="line">  201af7:	49 83 e2 fe          	and    <span class="variable">$0xfffffffffffffffe</span>,%r10</span><br><span class="line">  201afb:	49 f7 da             	neg    %r10</span><br><span class="line">  201afe:	31 c0                	xor    %eax,%eax</span><br><span class="line">  201b00:	f3 0f 6f 04 87       	movdqu (%rdi,%rax,4),%xmm0</span><br><span class="line">  201b05:	f3 0f 6f 4c 87 10    	movdqu 0x10(%rdi,%rax,4),%xmm1</span><br><span class="line">  201b0b:	f3 0f 6f 14 86       	movdqu (%rsi,%rax,4),%xmm2</span><br><span class="line">  201b10:	66 0f fe d0          	paddd  %xmm0,%xmm2</span><br><span class="line">  201b14:	f3 0f 6f 44 86 10    	movdqu 0x10(%rsi,%rax,4),%xmm0</span><br><span class="line">  201b1a:	66 0f fe c1          	paddd  %xmm1,%xmm0</span><br><span class="line">  201b1e:	f3 0f 7f 14 82       	movdqu %xmm2,(%rdx,%rax,4)</span><br><span class="line">  201b23:	f3 0f 7f 44 82 10    	movdqu %xmm0,0x10(%rdx,%rax,4)</span><br><span class="line">  201b29:	f3 0f 6f 44 87 20    	movdqu 0x20(%rdi,%rax,4),%xmm0</span><br><span class="line">  201b2f:	f3 0f 6f 4c 87 30    	movdqu 0x30(%rdi,%rax,4),%xmm1</span><br><span class="line">  201b35:	f3 0f 6f 54 86 20    	movdqu 0x20(%rsi,%rax,4),%xmm2</span><br><span class="line">  201b3b:	66 0f fe d0          	paddd  %xmm0,%xmm2</span><br><span class="line">  201b3f:	f3 0f 6f 44 86 30    	movdqu 0x30(%rsi,%rax,4),%xmm0</span><br><span class="line">  201b45:	66 0f fe c1          	paddd  %xmm1,%xmm0</span><br><span class="line">  201b49:	f3 0f 7f 54 82 20    	movdqu %xmm2,0x20(%rdx,%rax,4)</span><br><span class="line">  201b4f:	f3 0f 7f 44 82 30    	movdqu %xmm0,0x30(%rdx,%rax,4)</span><br><span class="line">  201b55:	48 83 c0 10          	add    <span class="variable">$0x10</span>,%rax</span><br><span class="line">  201b59:	49 83 c2 02          	add    <span class="variable">$0x2</span>,%r10</span><br><span class="line">  201b5d:	75 a1                	jne    201b00 &lt;_Z3sumPiS_S_i+0xf0&gt;</span><br><span class="line">  201b5f:	41 f6 c1 01          	<span class="built_in">test</span>   <span class="variable">$0x1</span>,%r9b</span><br><span class="line">  201b63:	74 29                	je     201b8e &lt;_Z3sumPiS_S_i+0x17e&gt;</span><br><span class="line">  201b65:	f3 0f 6f 04 87       	movdqu (%rdi,%rax,4),%xmm0</span><br><span class="line">  201b6a:	f3 0f 6f 4c 87 10    	movdqu 0x10(%rdi,%rax,4),%xmm1</span><br><span class="line">  201b70:	f3 0f 6f 14 86       	movdqu (%rsi,%rax,4),%xmm2</span><br><span class="line">  201b75:	66 0f fe d0          	paddd  %xmm0,%xmm2</span><br><span class="line">  201b79:	f3 0f 6f 44 86 10    	movdqu 0x10(%rsi,%rax,4),%xmm0</span><br><span class="line">  201b7f:	66 0f fe c1          	paddd  %xmm1,%xmm0</span><br><span class="line">  201b83:	f3 0f 7f 14 82       	movdqu %xmm2,(%rdx,%rax,4)</span><br><span class="line">  201b88:	f3 0f 7f 44 82 10    	movdqu %xmm0,0x10(%rdx,%rax,4)</span><br><span class="line">  201b8e:	4c 39 c1             	cmp    %r8,%rcx</span><br><span class="line">  201b91:	0f 85 8b fe ff ff    	jne    201a22 &lt;_Z3sumPiS_S_i+0x12&gt;</span><br><span class="line">  201b97:	c3                   	retq   </span><br><span class="line">  201b98:	31 c0                	xor    %eax,%eax</span><br><span class="line">  201b9a:	41 f6 c1 01          	<span class="built_in">test</span>   <span class="variable">$0x1</span>,%r9b</span><br><span class="line">  201b9e:	75 c5                	jne    201b65 &lt;_Z3sumPiS_S_i+0x155&gt;</span><br><span class="line">  201ba0:	eb ec                	jmp    201b8e &lt;_Z3sumPiS_S_i+0x17e&gt;</span><br><span class="line">  201ba2:	cc                   	int3   </span><br><span class="line"></span><br><span class="line">0000000000201bb0 &lt;_Z3kooi&gt;:</span><br><span class="line">  201bb0:	8d 47 06             	lea    0x6(%rdi),%eax</span><br><span class="line">  201bb3:	c3                   	retq   </span><br></pre></td></tr></table></figure>

<h2 id="PGO（Profile-Guided-Optimization）"><a href="#PGO（Profile-Guided-Optimization）" class="headerlink" title="PGO（Profile-Guided Optimization）"></a>PGO（Profile-Guided Optimization）</h2><p>PGO（<a href="https://en.wikipedia.org/wiki/Profile-guided_optimization">Profile-Guided Optimization</a>）也称 FDO（Feedback Directed Optimization），指通过工具采集程序运行时的 profile 数据，用以在重新编译流程中优化程序。</p>
<ul>
<li>FDO 的方案普遍被大厂用于优化数据中心的应用</li>
<li>TiFlash 中支持 PGO：<a href="https://github.com/pingcap/tiflash/pull/5160">PR#5160</a></li>
</ul>
<p>根据 <a href="https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization">llvm&#x2F;docs&#x2F;profile-guided-optimization</a>，LLVM 的 PGO 主要分为 2 种：</p>
<ul>
<li>代码插桩（<a href="https://clang.llvm.org/docs/UsersManual.html#profiling-with-instrumentation">Profiling with Instrumentation</a>）<ul>
<li>增加编译参数 <code>-fprofile-instr-generate</code></li>
<li>运行特定的 benchmark 负载，令程序自动采集 profile 数据（缺点是程序运行较慢）</li>
<li>重新编译时指定 profile 数据 <code>-fprofile-instr-use=&lt;xxx.profdata&gt;</code></li>
</ul>
</li>
<li>运行时采样（<a href="https://clang.llvm.org/docs/UsersManual.html#using-sampling-profilers">Using Sampling Profilers</a>）<ul>
<li>增加编译参数 <code>-gline-tables-only -fdebug-info-for-profiling -funique-internal-linkage-names</code>，增加链接参数 <code>-Wl,--no-rosegment</code></li>
<li>正常部署运行程序，利用 <a href="https://perf.wiki.kernel.org/index.php/Main_Page">Linux Perf profiler</a> 采集实际负载下的 perf 数据<ul>
<li>较为推荐在支持 LBR（Last Branch Record）的平台上使用 -b 参数令 Perf 记录调用链信息，从而提升 perf 数据的精度</li>
</ul>
</li>
<li>利用 <a href="https://github.com/google/autofdo">AutoFDO</a> 将 perf 数据转换为 LLVM 格式的 profile 数据</li>
<li>重新编译时指定 profile 数据 <code>-fprofile-sample-use=&lt;profile.prof&gt;</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perf record -p &lt;pid&gt; -e cycles:up -j any,u -a -o &lt;perf.data&gt; -- <span class="built_in">sleep</span> 180</span><br><span class="line">perf record -e cycles:u -j any,u -o &lt;perf.data&gt; -- &lt;executable&gt; &lt;args&gt; ...</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create_llvm_prof --profile &lt;perf.data&gt; --binary &lt;binary&gt; --out=&lt;profile.prof&gt;</span><br></pre></td></tr></table></figure>

<p><strong>采用代码插桩的方式对程序性能有较大影响，且无法采集真实环境数据，所以在实践中较为推荐运行时采样，即程序发布后采集线上真实 profile 数据并依此迭代更新（类似 Java 的运行时优化）。</strong></p>
<h3 id="案例（7-0）"><a href="#案例（7-0）" class="headerlink" title="案例（7.0）"></a>案例（7.0）</h3><p>该案例中虚函数 <code>Extend::foo</code> 被调用的频率明显高于 <code>Base::foo</code>，正常的 O3 优化可以按照一定的步长展开循环，但无法在运行时预测分支。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fdo-test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> &amp; x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Extend</span> : Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> &amp; x)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;Base&gt; a;</span><br><span class="line">    std::vector&lt;Extend&gt; b;</span><br><span class="line">    std::vector&lt;Base *&gt; c;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            a.<span class="built_in">emplace_back</span>(Base&#123;&#125;);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                b.<span class="built_in">emplace_back</span>(Extend&#123;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : a)</span><br><span class="line">            c.<span class="built_in">emplace_back</span>(&amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : b)</span><br><span class="line">            c.<span class="built_in">emplace_back</span>(&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : c)</span><br><span class="line">            &#123;</span><br><span class="line">                x-&gt;<span class="built_in">foo</span>(res);</span><br><span class="line">            &#125;</span><br><span class="line">        std::<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> end = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    std::<span class="built_in">printf</span>(<span class="string">&quot;time cost %lld ms\n&quot;</span>, std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(end - start).<span class="built_in">count</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang ./fdo-test.cpp -O3 -lstdc++ -Wl,--no-rosegment -gline-tables-only -fdebug-info-for-profiling -funique-internal-linkage-names -o ori.out -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -DNDEBUG -Rpass=<span class="string">&#x27;.*&#x27;</span> &gt;pass.ori 2&gt;&amp;1</span><br><span class="line">perf record -e cycles:up -j any,u -a -o test-perf.data -- ./ori.out</span><br><span class="line">create_llvm_prof --profile test-perf.data --binary ./ori.out --out=test.prof</span><br><span class="line">clang ./fdo-test.cpp -O3 -lstdc++ -Wl,--no-rosegment -gline-tables-only -fdebug-info-for-profiling -funique-internal-linkage-names -flto=thin -fvisibility=hidden -fvisibility-inlines-hidden -fwhole-program-vtables -fsplit-lto-unit -DNDEBUG -o fdo.out -fprofile-sample-use=./test.prof -Rpass=<span class="string">&#x27;.*&#x27;</span> &gt;pass.new 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>FDO 优化效果：编译器根据虚函数调用频率执行 <code>Promote indirect call</code> 优化，实现去虚拟化。</p>
<ul>
<li>2012d8: 对比虚函数地址和 <code>&lt;_ZN6Extend3fooERi&gt;</code> 函数地址是否相同</li>
<li>2012de: 如果比较相同则直接跳转到 <code>2012c0</code></li>
<li>2012c0: 内联实现 <code>&lt;_ZN6Extend3fooERi&gt;</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ori.out</span><br><span class="line">990000000</span><br><span class="line">time cost 2688 ms</span><br><span class="line"></span><br><span class="line">./fdo.out</span><br><span class="line">990000000</span><br><span class="line">time cost 2581 ms</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pass.new</span></span><br><span class="line">./fdo-test.cpp:48:20: Promote indirect call to _ZN6Extend3fooERi with count 63471 out of 64151</span><br><span class="line"></span><br><span class="line"><span class="comment"># objdump -d fdo.out</span></span><br><span class="line">...</span><br><span class="line">  201293:       e8 48 08 00 00          callq  201ae0 &lt;_ZNSt3__16chrono12steady_clock3nowEv@plt&gt;</span><br><span class="line">  201298:       49 89 c6                mov    %rax,%r14</span><br><span class="line">  20129b:       c7 44 24 20 00 00 00    movl   <span class="variable">$0x0</span>,0x20(%rsp)</span><br><span class="line">  2012a2:       00 </span><br><span class="line">  2012a3:       48 8b 2c 24             mov    (%rsp),%rbp</span><br><span class="line">  2012a7:       48 8b 5c 24 08          mov    0x8(%rsp),%rbx</span><br><span class="line">  2012ac:       48 39 <span class="built_in">dd</span>                cmp    %rbx,%rbp</span><br><span class="line">  2012af:       0f 84 ec 00 00 00       je     2013a1 &lt;main+0x471&gt;</span><br><span class="line">  2012b5:       45 31 ff                xor    %r15d,%r15d</span><br><span class="line">  2012b8:       4c 8d 64 24 20          lea    0x20(%rsp),%r12</span><br><span class="line">  2012bd:       eb 0a                   jmp    2012c9 &lt;main+0x399&gt;</span><br><span class="line">  2012bf:       90                      nop</span><br><span class="line">  2012c0:       83 44 24 20 01          addl   <span class="variable">$0x1</span>,0x20(%rsp)</span><br><span class="line">  2012c5:       48 83 c5 08             add    <span class="variable">$0x8</span>,%rbp</span><br><span class="line">  2012c9:       48 39 <span class="built_in">dd</span>                cmp    %rbx,%rbp</span><br><span class="line">  2012cc:       74 1d                   je     2012eb &lt;main+0x3bb&gt;</span><br><span class="line">  2012ce:       48 8b 7d 00             mov    0x0(%rbp),%rdi</span><br><span class="line">  2012d2:       48 8b 07                mov    (%rdi),%rax</span><br><span class="line">  2012d5:       48 8b 00                mov    (%rax),%rax</span><br><span class="line">  2012d8:       48 3d 10 1a 20 00       cmp    <span class="variable">$0x201a10</span>,%rax</span><br><span class="line">  2012de:       74 e0                   je     2012c0 &lt;main+0x390&gt;</span><br><span class="line">  2012e0:       4c 89 e6                mov    %r12,%rsi</span><br><span class="line">  2012e3:       ff d0                   callq  *%rax</span><br><span class="line">  2012e5:       48 83 c5 08             add    <span class="variable">$0x8</span>,%rbp</span><br><span class="line">  2012e9:       eb de                   jmp    2012c9 &lt;main+0x399&gt;</span><br><span class="line">  2012eb:       41 83 c7 01             add    <span class="variable">$0x1</span>,%r15d</span><br><span class="line">  2012ef:       41 81 ff a0 86 01 00    cmp    <span class="variable">$0x186a0</span>,%r15d</span><br><span class="line">  2012f6:       74 0b                   je     201303 &lt;main+0x3d3&gt;</span><br><span class="line">  2012f8:       48 8b 2c 24             mov    (%rsp),%rbp</span><br><span class="line">  2012fc:       48 8b 5c 24 08          mov    0x8(%rsp),%rbx</span><br><span class="line">  201301:       eb c6                   jmp    2012c9 &lt;main+0x399&gt;</span><br><span class="line">  201303:       8b 74 24 20             mov    0x20(%rsp),%esi</span><br><span class="line">  201307:       bf af 0a 20 00          mov    <span class="variable">$0x200aaf</span>,%edi</span><br><span class="line">  20130c:       31 c0                   xor    %eax,%eax</span><br><span class="line">  20130e:       e8 <span class="built_in">dd</span> 07 00 00          callq  201af0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">  201313:       e8 c8 07 00 00          callq  201ae0 &lt;_ZNSt3__16chrono12steady_clock3nowEv@plt&gt;</span><br><span class="line">...</span><br><span class="line">0000000000201a10 &lt;_ZN6Extend3fooERi&gt;:</span><br><span class="line">  201a10:       ff 06                   incl   (%rsi)</span><br><span class="line">  201a12:       c3                      retq   </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例（7-1）"><a href="#案例（7-1）" class="headerlink" title="案例（7.1）"></a>案例（7.1）</h3><blockquote>
<p>详见 <a href="https://github.com/pingcap/tiflash/pull/5160">tiflash#5160</a></p>
</blockquote>
<p>TiFlash 以 commit <a href="https://github.com/pingcap/tiflash/commit/5b61ae70550624d3bf0b5ca6bac89013ed5a6a4b">5b61ae70550624d3bf0b5ca6bac89013ed5a6a4b</a> 为例</p>
<ul>
<li>测试工具为 <a href="https://github.com/pingcap/go-tpc/blob/69c6de2bd5157131427f6a31e083a1767a59002f/tpch/query.go">go-tpc</a>，并以 tpch 负载用于 perf 采样和优化验证</li>
<li><strong>单节点</strong> tpch 10G 数据</li>
<li>通过 cgroup 限制程序最多使用 5 核</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /sys/fs/cgroup/cpu/pgo_test</span><br><span class="line">lsof -i:9000 | grep <span class="string">&#x27;TiFlash&#x27;</span> | grep -v <span class="string">&#x27;grep&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> &gt; /sys/fs/cgroup/cpu/pgo_test/cgroup.procs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;500000&quot;</span> &gt; /sys/fs/cgroup/cpu/pgo_test/cpu.cfs_quota_us</span><br></pre></td></tr></table></figure>

<p>测试结果显示，对于重计算的场景例如 Q1，FDO+LTO 比起 LTO 的性能提升为 8.98%，相对于未做任何优化的版本提升 13.46%。Q13、Q18 之类的查询也因为聚合&#x2F;过滤等计算占比较大获得一定的收益。而其他查询受计算模式中资源调度、数据瓶颈等因素影响存在一定的波动，优化效果不如 Q1 那么明显。</p>
<table>
<thead>
<tr>
<th>Time Cost(s)</th>
<th>original</th>
<th>LTO</th>
<th>FDO+LTO</th>
<th></th>
<th>FDO+LTO : LTO</th>
<th>FDO+LTO : original</th>
</tr>
</thead>
<tbody><tr>
<td>Q1</td>
<td>6.32</td>
<td>6.07</td>
<td>5.57</td>
<td></td>
<td>8.98%</td>
<td>13.46%</td>
</tr>
<tr>
<td>Q2</td>
<td>2.99</td>
<td>2.99</td>
<td>2.92</td>
<td></td>
<td>2.40%</td>
<td>2.40%</td>
</tr>
<tr>
<td>Q3</td>
<td>2.79</td>
<td>2.65</td>
<td>2.65</td>
<td></td>
<td>0.00%</td>
<td>5.28%</td>
</tr>
<tr>
<td>Q4</td>
<td>1.91</td>
<td>2.05</td>
<td>1.85</td>
<td></td>
<td>10.81%</td>
<td>3.24%</td>
</tr>
<tr>
<td>Q6</td>
<td>0.91</td>
<td>0.91</td>
<td>0.84</td>
<td></td>
<td>8.33%</td>
<td>8.33%</td>
</tr>
<tr>
<td>Q7</td>
<td>2.38</td>
<td>2.32</td>
<td>2.32</td>
<td></td>
<td>0.00%</td>
<td>2.59%</td>
</tr>
<tr>
<td>Q8</td>
<td>4.8</td>
<td>4.73</td>
<td>4.73</td>
<td></td>
<td>0.00%</td>
<td>1.48%</td>
</tr>
<tr>
<td>Q9</td>
<td>16.81</td>
<td>16.54</td>
<td>16.48</td>
<td></td>
<td>0.36%</td>
<td>2.00%</td>
</tr>
<tr>
<td>Q10</td>
<td>3.72</td>
<td>3.72</td>
<td>3.66</td>
<td></td>
<td>1.64%</td>
<td>1.64%</td>
</tr>
<tr>
<td>Q11</td>
<td>0.5</td>
<td>0.5</td>
<td>0.5</td>
<td></td>
<td>0.00%</td>
<td>0.00%</td>
</tr>
<tr>
<td>Q12</td>
<td>1.98</td>
<td>1.91</td>
<td>1.85</td>
<td></td>
<td>3.24%</td>
<td>7.03%</td>
</tr>
<tr>
<td>Q13</td>
<td>4.66</td>
<td>4.6</td>
<td>4.33</td>
<td></td>
<td>6.24%</td>
<td>7.62%</td>
</tr>
<tr>
<td>Q14</td>
<td>1.04</td>
<td>1.11</td>
<td>0.97</td>
<td></td>
<td>14.43%</td>
<td>7.22%</td>
</tr>
<tr>
<td>Q15</td>
<td>2.05</td>
<td>1.98</td>
<td>2.11</td>
<td></td>
<td>-6.16%</td>
<td>-2.84%</td>
</tr>
<tr>
<td>Q16</td>
<td>1.04</td>
<td>1.04</td>
<td>0.97</td>
<td></td>
<td>7.22%</td>
<td>7.22%</td>
</tr>
<tr>
<td>Q17</td>
<td>5.67</td>
<td>5.8</td>
<td>5.67</td>
<td></td>
<td>2.29%</td>
<td>0.00%</td>
</tr>
<tr>
<td>Q18</td>
<td>8.62</td>
<td>8.41</td>
<td>7.99</td>
<td></td>
<td>5.26%</td>
<td>7.88%</td>
</tr>
<tr>
<td>Q19</td>
<td>3.12</td>
<td>3.05</td>
<td>3.05</td>
<td></td>
<td>0.00%</td>
<td>2.30%</td>
</tr>
<tr>
<td>Q20</td>
<td>1.58</td>
<td>1.58</td>
<td>1.64</td>
<td></td>
<td>-3.66%</td>
<td>-3.66%</td>
</tr>
<tr>
<td>Q21</td>
<td>2.99</td>
<td>2.85</td>
<td>2.89</td>
<td></td>
<td>-1.38%</td>
<td>3.46%</td>
</tr>
<tr>
<td>Q22</td>
<td>0.64</td>
<td>0.64</td>
<td>0.5</td>
<td></td>
<td>28.00%</td>
<td>28.00%</td>
</tr>
</tbody></table>
<hr>
<p>3 节点跑 TPCH-100，限制每个节点 CPU 使用上限 1000%，结果如下</p>
<table>
<thead>
<tr>
<th>Time Cost(s)</th>
<th>LTO</th>
<th>FDO+LTO</th>
<th>FDO+LTO : LTO</th>
</tr>
</thead>
<tbody><tr>
<td>Q1</td>
<td>12.08</td>
<td>11.04</td>
<td>9.42%</td>
</tr>
<tr>
<td>Q2</td>
<td>4.33</td>
<td>4.26</td>
<td>1.64%</td>
</tr>
<tr>
<td>Q3</td>
<td>8.22</td>
<td>8.09</td>
<td>1.61%</td>
</tr>
<tr>
<td>Q4</td>
<td>21.17</td>
<td>21.64</td>
<td>-2.17%</td>
</tr>
<tr>
<td>Q5</td>
<td>19.36</td>
<td>19.83</td>
<td>-2.37%</td>
</tr>
<tr>
<td>Q6</td>
<td>1.91</td>
<td>1.85</td>
<td>3.24%</td>
</tr>
<tr>
<td>Q7</td>
<td>9.83</td>
<td>9.97</td>
<td>-1.40%</td>
</tr>
<tr>
<td>Q8</td>
<td>11.98</td>
<td>11.58</td>
<td>3.45%</td>
</tr>
<tr>
<td>Q9</td>
<td>65.26</td>
<td>64.32</td>
<td>1.46%</td>
</tr>
<tr>
<td>Q10</td>
<td>10.57</td>
<td>10.37</td>
<td>1.93%</td>
</tr>
<tr>
<td>Q11</td>
<td>2.05</td>
<td>2.05</td>
<td>0.00%</td>
</tr>
<tr>
<td>Q12</td>
<td>5.2</td>
<td>5.27</td>
<td>-1.33%</td>
</tr>
<tr>
<td>Q13</td>
<td>12.72</td>
<td>12.11</td>
<td>5.04%</td>
</tr>
<tr>
<td>Q14</td>
<td>2.18</td>
<td>2.11</td>
<td>3.32%</td>
</tr>
<tr>
<td>Q15</td>
<td>4.13</td>
<td>4.06</td>
<td>1.72%</td>
</tr>
<tr>
<td>Q16</td>
<td>2.32</td>
<td>2.25</td>
<td>3.11%</td>
</tr>
<tr>
<td>Q17</td>
<td>18.29</td>
<td>18.22</td>
<td>0.38%</td>
</tr>
<tr>
<td>Q18</td>
<td>23.12</td>
<td>22.85</td>
<td>1.18%</td>
</tr>
<tr>
<td>Q19</td>
<td>5.87</td>
<td>5.74</td>
<td>2.26%</td>
</tr>
<tr>
<td>Q20</td>
<td>4.06</td>
<td>4.13</td>
<td>-1.69%</td>
</tr>
<tr>
<td>Q21</td>
<td>39.02</td>
<td>39.29</td>
<td>-0.69%</td>
</tr>
<tr>
<td>Q22</td>
<td>1.38</td>
<td>1.31</td>
<td>5.34%</td>
</tr>
</tbody></table>
<p>除了 Q1，其他查询或多或少涉及到资源调度和等待，测试过程中无法全程打满 CPU，提升效果不如 Q1 那么明显。</p>
<h2 id="Post-link-Optimizer"><a href="#Post-link-Optimizer" class="headerlink" title="Post-link Optimizer"></a>Post-link Optimizer</h2><p>TBD</p>
<h2 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h2><p><a href="https://ccache.dev/">Ccache</a> 作为一种编译器缓存用于加速重编译过程。<a href="https://github.com/pingcap/tiflash/blob/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/cmake/find_ccache.cmake">tiflash&#x2F;cmake&#x2F;find_ccache.cmake</a> 也默认开启这一优化项来加速 CI 流程。C++ 的特性决定了头文件耦合程度会大幅影响编译缓存命中率，所以问题的核心又回到了 <a href="#%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BC%98%E5%8C%96">头文件优化</a>。</p>
<p>根据文档 <a href="https://ccache.dev/manual/3.2.4.html#_precompiled_headers">CCACHE - Precompiled headers</a>，ccache 配合 PCH 一起使用时，需要注意设置参数 <code>sloppiness=pch_defines,time_macros</code>。<br>在实践中，我们发现 ccache 默认处理 PCH 时会判断相关文件的修改时间，当 PCH 中包含编译期生成的代码时（例如 protobuf ）会导致相关目标文件缓存失败，对此需要进行更细粒度的划分和针对性调整。</p>
<p><strong>就目前而言，ccache 主要用于日常开发以及 Pull Request 的 CI 流程（增量编译），PCH 则主要用于 release 编译（全量编译）。</strong></p>
<h1 id="社区｜新开发者如何参与优化-TiFlash-项目"><a href="#社区｜新开发者如何参与优化-TiFlash-项目" class="headerlink" title="社区｜新开发者如何参与优化 TiFlash 项目"></a>社区｜新开发者如何参与优化 TiFlash 项目</h1><ul>
<li>根据 <a href="https://github.com/pingcap/tiflash/blob/2e8d324e76a2c5a96c83fdab8e7e08f3a5424d61/README.md">tiflash&#x2F;README.md</a> 中的指示部署基本编译环境。</li>
<li>设置 cmake 项：<ul>
<li><code>-DENABLE_TIME_TRACES=ON</code> 开启编译分析追踪</li>
<li><code>-DUSE_CCACHE=OFF</code> 禁用 ccache</li>
<li><code>-DENABLE_PCH=OFF</code> 禁用 PCH（目前先专注于优化头文件相关的开销）</li>
<li><code>-DCMAKE_BUILD_TYPE=RELWITHDEBINFO</code> 或 <code>-DCMAKE_BUILD_TYPE=DEBUG</code> 需分别优化 2 种编译模式下的各项指标</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># prepare environment: llvm, rust</span></span><br><span class="line"><span class="comment"># clone https://github.com/pingcap/tiflash.git to $&#123;TIFLASH_WORKSPACE&#125;</span></span><br><span class="line"><span class="comment"># mkdir $&#123;TIFLASH_BUILD&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;TIFLASH_BUILD&#125;</span></span><br><span class="line">CC=clang CXX=clang cmake \</span><br><span class="line">    -S <span class="variable">$&#123;TIFLASH_WORKSPACE&#125;</span> \</span><br><span class="line">    -DCMAKE_BUILD_TYPE=RELWITHDEBINFO \</span><br><span class="line">    -DLINKER_NAME=lld \</span><br><span class="line">    -DUSE_CCACHE=0 \</span><br><span class="line">    -DENABLE_TIME_TRACES=ON \</span><br><span class="line">    -DENABLE_PCH=0 \</span><br><span class="line">    -Wno-dev \</span><br><span class="line">    -DNO_WERROR=ON \</span><br><span class="line">    -GNinja</span><br><span class="line"></span><br><span class="line">time cmake --build . --target tiflash --parallel 5</span><br></pre></td></tr></table></figure>

<ul>
<li>编译后在 ${TIFLASH_BUILD} 中可获取每个目标文件的编译期火焰图</li>
<li>参考 <a href="#%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">编译流程分析</a> 编译部署 <a href="https://github.com/aras-p/ClangBuildAnalyzer">ClangBuildAnalyzer</a>，并用其分析 ${TIFLASH_BUILD}<ul>
<li>ClangBuildAnalyzer 的配置文件为 <a href="https://github.com/aras-p/ClangBuildAnalyzer/blob/main/ClangBuildAnalyzer.ini">ClangBuildAnalyzer.ini</a>，可根据官方文档调整参数</li>
</ul>
</li>
<li>保存 ClangBuildAnalyzer 生成的中间文件和分析结果，作为对照组</li>
<li>根据 ClangBuildAnalyzer 分析结果，找出瓶颈点，参照上文进行优化</li>
<li><a href="https://github.com/pingcap/tiflash/blob/0477f9658b83df75b8583d5ff3021634081775ce/CMakeLists.txt#L48">CMAKE_EXPORT_COMPILE_COMMANDS</a> 默认开启，可在文件 <code>$&#123;TIFLASH_BUILD&#125;/compile_commands.json</code> 中找到各个编译单元的执行命令。<ul>
<li>每次修改后，找到关联源文件的编译命令并手动执行，分析编译时的火焰图</li>
<li>可安装 <a href="https://github.com/include-what-you-use/include-what-you-use">include-what-you-use</a> 后用 <a href="https://github.com/include-what-you-use/include-what-you-use/blob/3ad4d9b058f33b858d74aaaa78b951005f82fec5/iwyu_tool.py">iwyu_tool.py</a> 辅助。其中存在误报，需人工排查。<ul>
<li>例如 <code>iwyu_tool.py -p $&#123;TIFLASH_BUILD&#125; $&#123;TIFLASH_WORKSPACE&#125;/dbms/src/Storages/Transaction/TMTContext.cpp</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h2><ul>
<li>编译前端耗时相对后端需尽可能小于 10%</li>
<li>令每个源文件编译耗时相对平均</li>
<li>降低总体编译耗时</li>
<li>优化 &amp; 规范代码质量</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">isocpp&#x2F;CppCoreGuidelines</a></li>
<li><a href="https://google.github.io/styleguide/cppguide.html#Forward_Declarations">Google C++ Style Guide</a></li>
<li>待补充</li>
</ul>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>TiFlash</tag>
        <tag>Linux</tag>
        <tag>Compiler</tag>
        <tag>CompilerFrontend</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 动态链接库相关整理</title>
    <url>/2022/03/30/system/linux-dynamic-library/</url>
    <content><![CDATA[<p>PingCAP（aka <code>贵司</code>）自研了套部署工具 <a href="https://github.com/pingcap/tiup">TiUP</a> 来取代早前使用的重型部署工具 <a href="https://github.com/ansible/ansible">Ansible</a>。然而实际使用时，TiFlash 节点在打 patch 过程中出现过不符合预期的报错。后来发现，TiUP 打 patch 的操作并没有停进程，而是直接 <code>tar</code> 命令解压覆盖部署目录，原子性保障也是无从谈起。v6.0 版本前 TiFlash 部分模块包含动态加载 <code>共享库</code>（aka <code>动态库</code>）的行为，这类行为会被搜索路径下的库文件影响。如果存在某个时刻引入的模块相互不兼容，则直接影响程序的行为。</p>
<p>因为是用 <code>tar</code> 命令解压覆盖，反而没有出现老生常谈的 <code>cp</code> 覆盖动态库引起 <a href="https://en.wikipedia.org/wiki/Segmentation_fault">Segmentation fault</a> 的问题。</p>
<p>正好借此整理下相关的几个问题：</p>
<ul>
<li>cp &#x2F; tar 命令是如何工作的？</li>
<li>cp 覆盖正在被使用的动态库为何会引发异常？</li>
<li>使用动态库要避开哪些坑？</li>
<li>动态库有哪些额外的开销？</li>
</ul>
<span id="more"></span>

<h1 id="Linux-文件系统基础"><a href="#Linux-文件系统基础" class="headerlink" title="Linux 文件系统基础"></a>Linux 文件系统基础</h1><p>相关基础参考 <a href="https://en.wikipedia.org/wiki/Modern_Operating_Systems">Modern Operating Systems</a>，<a href="https://www.science.smith.edu/~nhowe/teaching/csc262/oldlabs/ext2.html">The Ext2 Filesystem</a>，<a href="https://www.kernel.org/doc/html/latest/filesystems/index.html">kernel.org&#x2F;doc&#x2F;filesystems</a>，深度细节建议看操作系统代码实现。</p>
<h2 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h2><p>Linux 下 <a href="https://en.wikipedia.org/wiki/Inode">Inode(Index node)</a> 是一个重要概念，是理解 Unix&#x2F;Linux 文件系统和硬盘储存的基础。Inode、软链接、硬链接 等入门基础可以参考 <a href="https://www.ruanyifeng.com/blog/2011/12/inode.html">阮一峰. 理解inode</a>，解释得比较易懂。以下部分做点补充。</p>
<hr>
<p>Inode 本身是一种抽象设计，不同操作系统有各自实现，此处针对传统的类 Unix 文件系统。</p>
<p>文件储存在硬盘上，硬盘的最小存储单位叫做 <code>扇区（Sector）</code>，每个扇区大小为 512B。操作系统存取文件的最小单位是 <code>块（Block）</code>，一般为连续 8 个扇区。文件数据存储在块中，Inode 则作为索引节点存储文件的元信息：Inode 号码，文件字节数、User ID、Group ID、读｜写｜执行权限、3 个时间戳（Inode 上次变动时间，文件数据上次变动时间，文件上次打开时间）、链接数（硬链接）、数据 Block 位置。详细定义可参考 <a href="https://man7.org/linux/man-pages/man7/inode.7.html">linux&#x2F;man-pages&#x2F;inode</a>。</p>
<p>Inode 大小（通常为 256B）和数量在格式化时给定。通过命令获取某块 3.6T 硬盘的 <code>Inode size</code> 值为 256B，其 Inode 区存储上限是 233M。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dumpe2fs -h /dev/<span class="variable">$&#123;disk&#125;</span> | grep -E <span class="string">&quot;Inode size|Block size&quot;</span></span><br><span class="line"></span><br><span class="line">Block size:               4096</span><br><span class="line">Inode size:               256</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -hi /dev/<span class="variable">$&#123;disk&#125;</span></span><br><span class="line"></span><br><span class="line">Filesystem     Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">....           233M    33M  201M   14%  ....</span><br></pre></td></tr></table></figure>

<p>由此推算出，该硬盘最多存储 953888 个 Inode。假设每个 Inode 对应一个 4K 大小的独立目录，总容量也不超过 3.65G。所以确实会出现因 Inode 耗尽而无法创建文件的极端情况。</p>
<hr>
<p><em><strong>TiFlash 存储模块也险些暴露出来类似问题</strong></em></p>
<ul>
<li>早前版本中，TiFlash 的 schema sync 逻辑会把 TiDB 的每张物理表都在本地建立对应的文件夹以及 schema 相关的文件</li>
<li>倘若表的数量过多，超过磁盘 Inode 承载的上限，则会导致系统不可用</li>
</ul>
<hr>
<p>Inode 在同个文件系统内保证唯一，在不同文件系统中互不依赖，存在 2 个不同磁盘上的文件 Inode 号码相同的情况。通过 Inode 号码直接删除 Inode 节点，等同于删除文件。当文件被删除后，Inode 会被系统回收再分配。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -i</span><br><span class="line"></span><br><span class="line"> 134610994 anaconda-post.log  1320256620 dev   134611301 home   134611303 lib64   146932813 misc   148638932 opt    148768809 root   134611337 sbin           1 sys   148768954 usr</span><br><span class="line"> 134610995 bin		       148635658 etc   134611302 lib    134611304 media   134611305 mnt            1 proc   148768952 run    134611338 srv    148768953 tmp   148772892 var</span><br><span class="line"></span><br><span class="line">find . -inum 134610994 -delete</span><br></pre></td></tr></table></figure>

<hr>
<p>Unix&#x2F;Linux 系统中，目录（directory）也是一种文件：</p>
<ul>
<li>创建目录时，默认会生成两个目录项：<code>.</code> 和 <code>..</code>。</li>
<li>前者的 Inode 号码就是当前目录的 Inode 号码，等同于当前目录的 <code>硬链接</code>，也就使得新建空目录的链接数加 1 等于 2。</li>
<li>后者的 Inode 号码就是当前目录的父目录的 Inode 号码，等同于父目录的硬链接，令父目录的 <code>链接数</code> 加 1。</li>
<li>对于 ‘&#x2F;‘ 目录，则两者都指向自己。</li>
<li>系统目录的 Inode 为特定项（Inode Number: 1），一般根据挂载顺序 ‘&#x2F;‘ 目录的 Inode Number 为 2。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> /</span><br><span class="line"></span><br><span class="line">  File: ‘/’</span><br><span class="line">  Size: 4096            Blocks: 8          IO Block: 4096   directory</span><br><span class="line">Device: 803h/2051d      Inode: 2           Links: 26</span><br><span class="line">Access: (0555/dr-xr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2022-04-23 16:41:30.312343163 +0800</span><br><span class="line">Modify: 2022-04-21 17:17:40.483912721 +0800</span><br><span class="line">Change: 2022-04-21 17:17:40.483912721 +0800</span><br><span class="line"> Birth: -</span><br><span class="line"> </span><br><span class="line"><span class="built_in">ls</span> -ai / | grep <span class="string">&quot; 1 &quot;</span></span><br><span class="line"></span><br><span class="line">       1 proc</span><br><span class="line">       1 sys</span><br></pre></td></tr></table></figure>

<p>硬链接的目标和源共用同个 Inode，因此不能跨盘建立，否则报错 <code>Invalid cross-device link</code>。通过 <code>ln $&#123;src&#125; $&#123;tar&#125;</code> 建立硬链接无法作用于目录，否则报错 <code>hard link not allowed for directory</code>。</p>
<p>硬链接自身就是文件系统中的一环，链接数归 0 后系统才会尝试回收对应的文件，与引用计数的管理策略类似。如果目录可以建立硬链接，则容易造成循环引用，导致文件无法回收。与硬链接不同，软链接就是个独立的二进制文件，使用时再通过文件系统解析到对应的目标，如果失败则会返回错误。也就意味着软链接不会对文件系统本身产生侵入性影响。</p>
<h3 id="Inode-深入分析"><a href="#Inode-深入分析" class="headerlink" title="Inode 深入分析"></a>Inode 深入分析</h3><p>以 ext4 文件系统为例，硬盘格式化的时候，操作系统将其划分为多个 <code>Block Group</code></p>
<ul>
<li>Group 0 前面预留 1024 字节，可用于安装 x86 引导扇区。</li>
</ul>
<table>
<thead>
<tr>
<th>Group 0 Padding</th>
<th>Block Group 0</th>
<th>Block Group 1</th>
<th>…</th>
<th>Block Group N</th>
</tr>
</thead>
<tbody><tr>
<td>1024 bytes</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Block Group 的布局大致如下</li>
</ul>
<table>
<thead>
<tr>
<th>ext4 Super Block</th>
<th>Group Descriptors</th>
<th>Reserved GDT Blocks</th>
<th>Data Block Bitmap</th>
<th>inode Bitmap</th>
<th>inode Table</th>
<th>Data Blocks</th>
</tr>
</thead>
<tbody><tr>
<td>1 block</td>
<td>N blocks</td>
<td>N blocks</td>
<td>1 block</td>
<td>1 block</td>
<td>N blocks</td>
<td>N blocks</td>
</tr>
</tbody></table>
<p>参考 <a href="https://docs.huihoo.com/doxygen/linux/kernel/3.7/structext4__super__block.html">struct ext4_super_block</a> 以及 <a href="https://docs.huihoo.com/doxygen/linux/kernel/3.7/structext4__inode.html">struct ext4_inode</a></p>
<ul>
<li>每个 Block Group 包含 <code>s_blocks_per_group</code> 个 Block，即 <code>8 * block_size_in_bytes</code>（Bitmap 大小为 <code>block_size_in_bytes</code>，最多可以表示的位数 <code>8 * block_size_in_bytes</code>）。</li>
<li><code>s_inodes_per_group</code> 表示每个 Block Group 中 Inode 的数量。</li>
<li>已知某个文件的 Inode 号码 为 <em>inum</em>，则查找文件内容的过程为：<ul>
<li><code>(inum - 1 ) / s_inodes_per_group</code> 得到 Inode 所在的 Block Group</li>
<li><code>(inum - 1 ) % s_inodes_per_group</code> 可得到 Inode 在 inode Table 中的偏移量</li>
<li>通过 Block Group 的 Group Descriptors 找到 inode Table，根据偏移获取实际的 Inode 数据</li>
<li>通过 Inode 结构中的 <a href="https://docs.huihoo.com/doxygen/linux/kernel/3.7/structext4__inode.html#a507f79fb9f060b109d465a6e8a32a6b1">i_block</a> 获取 Data Blocks 中对应的数据块</li>
<li>根据数据块中的结构读取实际数据：ext2 和 ext3 中结构为直接&#x2F;间接数据块表；ext4 中的结构则是 <a href="https://www.kernel.org/doc/html/latest/filesystems/ext4/dynamic.html#extent-tree">Extent Tree</a>；</li>
</ul>
</li>
</ul>
<h2 id="cp-x2F-rm-x2F-mv-x2F-tar-命令"><a href="#cp-x2F-rm-x2F-mv-x2F-tar-命令" class="headerlink" title="cp&#x2F;rm&#x2F;mv&#x2F;tar 命令"></a>cp&#x2F;rm&#x2F;mv&#x2F;tar 命令</h2><p>用 <code>strace</code> 可以很清楚地看到命令执行时的系统调用。一般 <code>rm</code> 主要用到 <code>unlink*</code>，<code>mv</code> 主要用到 <code>rename*</code>，<code>cp</code> 主要用到 <code>open</code>、<code>read</code>、<code>write</code>。</p>
<p>根据 <a href="https://man7.org/linux/man-pages/man2/unlink.2.html">linux&#x2F;man-pages&#x2F;unlink</a>，<code>unlink</code> 用于按照文件名删除文件：</p>
<ul>
<li>如果文件无其他链接，且没有进程打开该文件，则删除文件并释放空间</li>
<li>如果文件仅此一份链接，但存在进程仍然打开该文件，<strong>删除后文件依然存在</strong>，直到引用它的最后一个文件描述符关闭，系统才会回收</li>
</ul>
<p>因此通过 <code>unlink</code> 删除正在被使用的文件是安全的。</p>
<p><code>rename</code> 面对的场景更加复杂，根据 <a href="https://man7.org/linux/man-pages/man2/rename.2.html">linux&#x2F;man-pages&#x2F;rename</a>，当目标已经存在时</p>
<ul>
<li>如果是非跨盘行为，会保证操作的<strong>原子性</strong></li>
<li>如果是跨盘行为，则报错 <code>Invalid cross-device link</code></li>
<li>跨盘 <code>mv</code> 命令会忽略报错，通过 unlink 删除目标，新建文件后复制内容，最后 unlink 删除源文件</li>
</ul>
<p>根据 <a href="https://man7.org/linux/man-pages/man2/open.2.html">linux&#x2F;man-pages&#x2F;open</a>，当目标已存在，<code>cp</code> 命令调用 open 的参数会包含 <code>O_TRUNC</code>（即 truncate 模式），<strong>复用目标的 Inode</strong>，清空内容，把源文件内容写入目标。当程序正在运行时，调用 <code>cp</code> 尝试覆盖其二进制文件，会报错 <code>Text file busy</code>（但 cp 覆盖正在被使用的共享库则不然），这缘于操作系统的保护机制，详见 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%882%EF%BC%89">案例（2）</a>。如果使用 <code>cp -f</code> 进行覆盖则会忽略报错，并执行 unlink 后再复制，<strong>前后 Inode 已经发生改变</strong>，属于安全行为。</p>
<p>追踪 <code>tar</code> 命令的执行过程，可以看到当目标已存在时，是 unlink 删除后再新建并复制写入。因此通过 tar 命令覆盖正在被使用的文件也是安全的。</p>
<h1 id="Linux-动态库"><a href="#Linux-动态库" class="headerlink" title="Linux 动态库"></a>Linux 动态库</h1><p>强烈推荐 <a href="https://book.douban.com/subject/3652388/">《程序员的自我修养——链接装载与库》</a> 这本书，细致全面地囊括了各项相关知识。</p>
<p>Linux 下的库有两种：<code>静态库</code> 和 <code>共享库（aka 动态库）</code>，静态通常用 <code>.a</code> 为后缀，动态库用 <code>.so</code> 为后缀。</p>
<p>Linux 下动态库、静态库、可执行文件的格式均 <code>ELF（Executable Linkable Format）</code>，可通过 <code>file</code> 命令查看其具体类型细节。使用 <code>ldd</code> 工具，查看 <a href="https://en.wikipedia.org/wiki/Object_file">Object file（目标文件）</a> 依赖的动态库。</p>
<p>动态库的优势：</p>
<ul>
<li>不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例</li>
<li>动态库的代码是在可执行程序运行时才载入内存的，在编译过程中仅简单的引用，生成的可执行程序代码体积较小</li>
<li>编译链接代价小，对于长期稳定的模块库，无需反复拷贝数据</li>
<li>动态替换，可支持程序热更新</li>
</ul>
<p>动态库的劣势：</p>
<ul>
<li>访问全局数据｜静态数据成员、跨模块函数调用等行为需要额外的定位寻址开销，造成性能损耗</li>
<li>模块兼容性问题：DDL hell</li>
</ul>
<p>链接相关概念中，函数和变量统称为 <code>符号（Symbol）</code>，函数名或变量名就是符号名。每个目标文件都有一个 <code>符号表（Symbol Table）</code>，表中记录了目标文件用到的所有符号。</p>
<p>使用 <code>nm</code> 命令查看目标文件的符号信息，<a href="https://linux.die.net/man/1/nm">nm(1) - Linux man page</a>，符号类型主要包括：</p>
<ul>
<li>T &#x2F; t：代码段中的函数</li>
<li>U：被调用但并没有定义的符号（表明需要其他库支持）</li>
<li>W &#x2F; w：”弱态” 符号，它们虽然被定义，但是可能被其他库中的同名符号覆盖（常见于模板、结构体、类等使用场景）</li>
<li>B &#x2F; b：bss 中的未初始化全局&#x2F;局部变量</li>
<li>D &#x2F; d：数据段中初始化的全局&#x2F;局部变量</li>
<li>…</li>
</ul>
<hr>
<p>目标文件将不同属性的信息分<code>段（Segment）</code> 存储，可用 <code>objdump</code> 或 <code>readelf</code> 工具导出相关信息：</p>
<ul>
<li><code>.dynsym</code> 未定义分配的符号表</li>
<li><code>.rel.dyn</code> 加载时需要重定位的变量</li>
<li><code>.rel.plt</code> 需要重定位的函数</li>
<li><code>.text</code> 源代码编译后的指令</li>
<li><code>.plt</code> 延迟绑定的外部函数调用的指令</li>
<li><code>.data</code> 已初始化的全局变量和局部静态变量</li>
<li><code>.bss</code> 未初始化的全局变量和局部静态变量</li>
<li><code>.symtab</code> 全量符号表</li>
<li><code>.got</code> 外部全局变量地址表</li>
<li><code>.got.plt</code> 外部函数地址表</li>
<li>…</li>
</ul>
<p>为了使程序模块中共享的指令部分在装载时不需要随装载地址变动而变动，可将指令中需要被修改的部分分离出来放到数据部分中，这样指令部分保持不变，<strong>数据部分可以在每个进程中有独立可修改的副本</strong>，这种方案就是 <code>地址无关代码（PIC，Position-independent Code）</code>。实现方式：</p>
<ul>
<li>ELF 在数据相关表段里建立指向这些变量的指针数组，也被称为 <code>全局偏移表（Global Offset Table，GOT）</code>，当代码需要访问这些跨模块数据时，可通过 GOT 中变量对应的项找到目标地址</li>
<li>GOT 本身位于数据相关表段，可以在模块装载时被修改，链接器在装载模块时会查找变量的实际地址并填充 GOT</li>
<li>模块的数据相关表段在每个进程都有独立的副本</li>
<li>通常 ELF 将 GOT 拆分成 2 个表段：<code>.got</code> 和 <code>.got.plt</code></li>
</ul>
<p>跨模块的函数调用也是同样原理，每次调用前需要定位到函数在当前进程中的内存虚拟地址。ELF 普遍采用延迟绑定的的做法，基本思想是当函数第一次被调用时才进行绑定（符号查找、重定位等），使用 <code>PLT（Procedure Linkage Table）</code> 的方法来实现，详见 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%881%EF%BC%89">案例（1）</a>。</p>
<h2 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h2><h3 id="案例（1）"><a href="#案例（1）" class="headerlink" title="案例（1）"></a>案例（1）</h3><p><em><strong>当程序链接多个包含相同函数的库时，可能出现非预期的结果</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v1.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">foo</span>();&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v2.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -c v1.cpp -o v1.o &amp;&amp; ar -cr libv1.a v1.o</span><br><span class="line">clang++ -c v2.cpp -o v2.o &amp;&amp; ar -cr libv2.a v2.o</span><br><span class="line">clang++ -fPIC libtest.cpp -L. -lv1 -shared -o libtest.so</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,<span class="built_in">foo</span>(),<span class="built_in">test</span>());&#125;</span><br></pre></td></tr></table></figure>

<p>编译执行结果为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ main.cpp -L./ -lv2 -ltest -rpath `<span class="built_in">pwd</span>` -o main &amp;&amp; ./main</span><br><span class="line">2,2</span><br></pre></td></tr></table></figure>

<p>在 libtest.so 内部存在已定义的函数 <code>foo()</code> 和 <code>test()</code>，但实际上 test() 调用的是 v2 库中的 foo() 而不是 libtest.so 自身的，与直觉相悖。</p>
<p>交换库链接顺序 或者只链接 libtest.so，最终调用的才是 libtest.so 中的 foo() 。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ main.cpp -L./  -ltest -lv2 -rpath `<span class="built_in">pwd</span>` -o main &amp;&amp; ./main</span><br><span class="line">1,1</span><br><span class="line">clang++ main.cpp -L./ -ltest -rpath `<span class="built_in">pwd</span>` -o main &amp;&amp; ./main</span><br><span class="line">1,1</span><br></pre></td></tr></table></figure>

<h4 id="分析（1）"><a href="#分析（1）" class="headerlink" title="分析（1）"></a>分析（1）</h4><p>libtest.so 中对外导出函数 <code>test()</code> 和 <code>foo()</code> ，test() 内调用了 foo()，所以需要对 foo() 进行装载时重定位。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nm -CD libtest.so</span><br><span class="line"></span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">0000000000001698 T _fini</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">000000000000167c T _init</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">0000000000001670 T foo()</span><br><span class="line">0000000000001660 T <span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p><code>foo</code> 外部函数入口偏移地址为 0x3910，在 .rela.plt 段的下标为 2，<code>.got.plt</code> 起始地址为 0x38e8，<code>.got.plt</code> 前 3 项为：<code>.dymanic</code> 段地址、本模块 ID、符合解析和重定位相关函数地址。验证得 0x38e8 + 8 * (3 + 2) &#x3D; 0x3910。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">readelf -r libtest.so</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">&#x27;.rela.dyn&#x27;</span> at offset 0x430 contains 7 entries:</span><br><span class="line">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="line">0000000026f0  000000000008 R_X86_64_RELATIVE                    26f0</span><br><span class="line">0000000026f8  000000000008 R_X86_64_RELATIVE                    1610</span><br><span class="line">000000002700  000000000008 R_X86_64_RELATIVE                    1650</span><br><span class="line">0000000028c8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span><br><span class="line">0000000028d0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0</span><br><span class="line">0000000028d8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</span><br><span class="line">0000000028e0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">&#x27;.rela.plt&#x27;</span> at offset 0x4d8 contains 3 entries:</span><br><span class="line">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="line">000000003900  000100000007 R_X86_64_JUMP_SLO 0000000000000000 __gmon_start__ + 0</span><br><span class="line">000000003908  000400000007 R_X86_64_JUMP_SLO 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span><br><span class="line">000000003910  000800000007 R_X86_64_JUMP_SLO 0000000000001670 _Z3foov + 0</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">readelf -S libtest.so</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  [13] .plt              PROGBITS         00000000000016b0  000006b0</span><br><span class="line">       0000000000000040  0000000000000000  AX       0     0     16</span><br><span class="line">  [18] .got              PROGBITS         00000000000028c8  000008c8</span><br><span class="line">       0000000000000020  0000000000000000  WA       0     0     8</span><br><span class="line">  [19] .data             PROGBITS         00000000000038e8  000008e8</span><br><span class="line">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="line">  [21] .got.plt          PROGBITS         00000000000038e8  000008e8</span><br><span class="line">       0000000000000030  0000000000000000  WA       0     0     8</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>魔改下 main.cpp 令其持续 sleep 不退出，运行时可以根据 pid 查看进程地址空间：</p>
<ul>
<li>00201000-00202000 段主要是源代码编译后的指令，可读可执行，不可写</li>
<li>00200000-00201000 ，00202000-00203000 段为只读数据部分，前者主要是字符串常量，后者则主要是静态数据</li>
<li>00203000-00204000 段为可写数据部分</li>
<li>libtest.so 对应的内存地址空间从 7f0fb3704000 开始，布局与上面类似</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/&lt;pid-of-program&gt;/maps</span><br><span class="line"></span><br><span class="line">00200000-00201000 r--p 00000000 103:00 122162998                         /.../main</span><br><span class="line">00201000-00202000 r-xp 00000000 103:00 122162998                         /.../main</span><br><span class="line">00202000-00203000 r--p 00000000 103:00 122162998                         /.../main</span><br><span class="line">00203000-00204000 rw-p 00000000 103:00 122162998                         /.../main</span><br><span class="line">...</span><br><span class="line">7f0fb3704000-7f0fb3705000 r--p 00000000 103:00 122163012                 /.../libtest.so</span><br><span class="line">7f0fb3705000-7f0fb3706000 r-xp 00000000 103:00 122163012                 /.../libtest.so</span><br><span class="line">7f0fb3706000-7f0fb3707000 r--p 00000000 103:00 122163012                 /.../libtest.so</span><br><span class="line">7f0fb3707000-7f0fb3708000 rw-p 00000000 103:00 122163012                 /.../libtest.so</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>该案例使用动态库的方式为<code>隐式加载（载入时加载）</code></p>
<ul>
<li>类似静态库链接的过程发生在程序加载时，动态链接器将所有相关动态库装载到进程地址空间，将程序中未定义的符号绑定到相应的动态链接库，进行重定位工作，即 <code>装载时重定位（Load Time Relocation）</code>：<ul>
<li>链接器按照深度｜广度优先顺序加载把程序和相关共享库的符号表都合并到 <strong>全局符号表（Global Symbol Table）</strong></li>
<li>链接器基本规则：全局符号表中已存在同名符号，则后加入的忽略</li>
</ul>
</li>
<li>首先载入主程序，main 中默认导出 foo() 且对应 v2 库的实现，foo 函数符号和地址 0x201800 先注册到全局符号表。</li>
<li>2017c0: 压栈 <code>rbp（栈基地址寄存器）</code> 的值，保存调用者帧的栈底</li>
<li>2017c1: 将 <code>rsp（栈指针寄存器，指向栈顶）</code> 的值赋予 rbp，将调用者帧的栈顶设为当前帧的栈底，等于开辟新栈</li>
<li>2017c4: 预留 16字节空间给临时数据</li>
<li>2017c8: 调用 foo() 函数，callq 约等于 push %rip + jump &lt;_Z3foov&gt;</li>
<li>201804: 设置返回值至 eax 寄存器</li>
<li>2017cd ～ 2017eb: 调用 print() 和 test() 函数</li>
<li>2017ed: 清除预留空间，还原 rsp</li>
<li>2017f1: 还原 rbp</li>
<li>2017f2: 跳转回调用者的指令，约等于 pop %rip + jump …</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">objdump -d main</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">00000000002017c0 &lt;main&gt;:</span><br><span class="line">  2017c0:       55                      push   %rbp</span><br><span class="line">  2017c1:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  2017c4:       48 83 ec 10             sub    <span class="variable">$0x10</span>,%rsp</span><br><span class="line">  2017c8:       e8 33 00 00 00          callq  201800 &lt;_Z3foov&gt;</span><br><span class="line">  2017cd:       89 45 <span class="built_in">fc</span>                mov    %eax,-0x4(%rbp)</span><br><span class="line">  2017d0:       e8 0b 01 00 00          callq  2018e0 &lt;_Z4testv@plt&gt;</span><br><span class="line">  2017d5:       8b 75 <span class="built_in">fc</span>                mov    -0x4(%rbp),%esi</span><br><span class="line">  2017d8:       89 c2                   mov    %eax,%edx</span><br><span class="line">  2017da:       48 bf b0 05 20 00 00    movabs <span class="variable">$0x2005b0</span>,%rdi</span><br><span class="line">  2017e1:       00 00 00</span><br><span class="line">  2017e4:       b0 00                   mov    <span class="variable">$0x0</span>,%al</span><br><span class="line">  2017e6:       e8 05 01 00 00          callq  2018f0 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">  2017eb:       31 c0                   xor    %eax,%eax</span><br><span class="line">  2017ed:       48 83 c4 10             add    <span class="variable">$0x10</span>,%rsp</span><br><span class="line">  2017f1:       5d                      pop    %rbp</span><br><span class="line">  2017f2:       c3                      retq</span><br><span class="line">...  </span><br><span class="line">0000000000201800 &lt;_Z3foov&gt;:</span><br><span class="line">  201800:       55                      push   %rbp</span><br><span class="line">  201801:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">  201804:       b8 02 00 00 00          mov    <span class="variable">$0x2</span>,%eax</span><br><span class="line">  201809:       5d                      pop    %rbp</span><br><span class="line">  20180a:       c3                      retq</span><br><span class="line">...  </span><br><span class="line">00000000002018e0 &lt;_Z4testv@plt&gt;:</span><br><span class="line">  2018e0:       ff 25 42 22 00 00       jmpq   *0x2242(%rip)        <span class="comment"># 203b28 &lt;_Z4testv@Base&gt;</span></span><br><span class="line">  2018e6:       68 02 00 00 00          pushq  <span class="variable">$0x2</span></span><br><span class="line">  2018eb:       e9 c0 ff ff ff          jmpq   2018b0 &lt;_fini+0x10&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于 libtest.so 对外导出 foo()，所以 test 函数调用 foo 无法按照模块内函数调用的方式，编译器会当作 <strong>模块外函数</strong> 处理。<ul>
<li>设 α 为 libtest.so 载入程序的起始内存地址</li>
<li>1664: 通过命令可以看到 <code>&lt;_Z4testv&gt;</code> 实际调用的是 <code>&lt;_Z3foov@plt&gt;</code> 而非 <code>&lt;_Z3foov&gt;</code><ul>
<li>指令码为 e8 77 00 00 00，第一字节表示指令类型为 <strong>相对地址调用（Call near, relative, displacement relative to next instruction）</strong>，后四子节是目标地址相对于当前指令下一条指令的偏移 0x77，即 0x1669 + 0x77 &#x3D; 0x16e0，最后调用的是 α + 0x16e0</li>
</ul>
</li>
<li>16e0: 通过偏移地址 0x3910 间接跳转<ul>
<li>读取指令寄存器 rip 中的值 β（α + 0x16e6）；加上偏移 γ &#x3D; β + 0x222a &#x3D; α + 0x3910（该地址位于 <code>.got.plt</code> 段，用于保存外部函数 foo() 对应的项）；从地址 γ 读取地址 δ；跳转到地址 δ；</li>
<li>如果链接器已经初始化 γ，δ 为外部函数 foo() 的进程内地址，则可直接跳转实现函数调用</li>
<li>为了实现延迟绑定，初始化时填入 γ 实际上是 “16e6:” 行对应的地址 α + 0x16e6，等效于是间接跳转到下一行</li>
</ul>
</li>
<li>16e6: 压栈外部函数 foo() 在 <code>.rela.plt</code> 段中的下标 2</li>
<li>16eb: 跳转到符号解析和重定位流程入口，从全局符号表中获取 foo() 的进程内地址 0x201800 填入地址 γ，最后调用 foo() 函数</li>
</ul>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">objdump -d libtest.so</span><br><span class="line"></span><br><span class="line">0000000000001660 &lt;_Z4testv&gt;:</span><br><span class="line">    1660:       55                      push   %rbp</span><br><span class="line">    1661:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1664:       e8 77 00 00 00          callq  16e0 &lt;_Z3foov@plt&gt;</span><br><span class="line">    1669:       5d                      pop    %rbp</span><br><span class="line">    166a:       c3                      retq</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">0000000000001670 &lt;_Z3foov&gt;:</span><br><span class="line">    1670:       55                      push   %rbp</span><br><span class="line">    1671:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1674:       b8 01 00 00 00          mov    <span class="variable">$0x1</span>,%eax</span><br><span class="line">    1679:       5d                      pop    %rbp</span><br><span class="line">    167a:       c3                      retq</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">00000000000016e0 &lt;_Z3foov@plt&gt;:</span><br><span class="line">    16e0:       ff 25 2a 22 00 00       jmpq   *0x222a(%rip)        <span class="comment"># 3910 &lt;_Z3foov@@Base+0x22a0&gt;</span></span><br><span class="line">    16e6:       68 02 00 00 00          pushq  <span class="variable">$0x2</span></span><br><span class="line">    16eb:       e9 c0 ff ff ff          jmpq   16b0 &lt;_fini+0x18&gt;        </span><br><span class="line">...    </span><br></pre></td></tr></table></figure>

<ul>
<li>载入 libtest.so 符号表时，foo 函数符号无法注册到全局符号表</li>
<li>libtest.so 中 PLT 重定位时填入全局符号表中 foo 函数符号对应的地址，最终调用 v2 库的逻辑</li>
</ul>
<hr>
<p>交换库链接顺序或者只链接 libtest.so 时也是同样原理，main 程序中 foo 函数符号被编译器决议成为未定义（U类），加载 libtest.so 时注册到全局符号表。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nm -CD main</span><br><span class="line"></span><br><span class="line">0000000000201880 T _fini</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">0000000000201864 T _init</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">                 U __libc_start_main</span><br><span class="line">                 U <span class="built_in">printf</span></span><br><span class="line">                 U foo()</span><br><span class="line">                 U <span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">00000000002017b0 &lt;main&gt;:</span><br><span class="line">...</span><br><span class="line">  2017b8:       e8 03 01 00 00          callq  2018c0 &lt;_Z3foov@plt&gt;</span><br><span class="line">...</span><br><span class="line">  2017c0:       e8 0b 01 00 00          callq  2018d0 &lt;_Z4testv@plt&gt;</span><br><span class="line">...  </span><br></pre></td></tr></table></figure>

<h3 id="解决符号冲突"><a href="#解决符号冲突" class="headerlink" title="解决符号冲突"></a>解决符号冲突</h3><p>为避免符号冲突，可通过以下几种方式</p>
<h4 id="显式加载（运行时加载）"><a href="#显式加载（运行时加载）" class="headerlink" title="显式加载（运行时加载）"></a>显式加载（运行时加载）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main2.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> *handle = <span class="built_in">dlopen</span>(<span class="string">&quot;./libtest.so&quot;</span>,RTLD_LAZY); <span class="built_in">assert</span>(handle);</span><br><span class="line">    <span class="built_in">int</span> (*test)() = (<span class="built_in">int</span> (*)())<span class="built_in">dlsym</span>(handle,<span class="string">&quot;_Z4testv&quot;</span>); <span class="built_in">assert</span>(test);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, <span class="built_in">foo</span>(), <span class="built_in">test</span>());</span><br><span class="line">    <span class="built_in">dlclose</span>(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行时，在逻辑中加载 libtest.so 获取 test 函数入口。编译时则不需要链接项 -ltest。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ main2.cpp -L./ -lv2 -ldl -rpath `<span class="built_in">pwd</span>` -o main2 &amp;&amp; ./main2</span><br><span class="line">2,1</span><br><span class="line">clang++ main2.cpp -L./ -lv1 -ldl -rpath `<span class="built_in">pwd</span>` -o main2 &amp;&amp; ./main2</span><br><span class="line">1,1</span><br></pre></td></tr></table></figure>

<hr>
<p>当进程中的模块是通过 <code>dlopen()</code> 载入的共享对象，<code>dlsym()</code> 查找符号的优先级分为 2 种：</p>
<ul>
<li>dlopen() 参数 <code>filename</code> 为 nullptr， 则是从全局符号表查找，即 <code>装载序列（Load Ordering）</code>。</li>
<li>dlopen() 指定共享对象时，则采用 <code>依赖序列（Dependency Ordering）</code> 的优先级：以被 dlopen() 打开的共享对象为节点，对其依赖对象进行广度优先遍历，直到找到符号。</li>
</ul>
<h4 id="符号隐藏"><a href="#符号隐藏" class="headerlink" title="符号隐藏"></a>符号隐藏</h4><ul>
<li>隐藏 main 入口 foo() 函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main3.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">__attribute__ ((<span class="built_in">visibility</span> (<span class="string">&quot;hidden&quot;</span>))) <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;std::cout&lt;&lt;<span class="built_in">foo</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;<span class="built_in">test</span>()&lt;&lt;std::endl;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ main3.cpp -L./ -lv2 -ltest -rpath `<span class="built_in">pwd</span>` -o main3 &amp;&amp; ./main3</span><br><span class="line">2,1</span><br></pre></td></tr></table></figure>

<ul>
<li>隐藏共享库内 foo() 函数，<strong>推荐这种方式，尽可能对外隐藏无关符号</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest2.cpp</span></span><br><span class="line">__attribute__ ((<span class="built_in">visibility</span> (<span class="string">&quot;hidden&quot;</span>))) <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">foo</span>();&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -fPIC libtest2.cpp -L. -lv1 -shared -o libtest2.so</span><br><span class="line">clang++ main.cpp -L./ -lv2 -ltest2 -rpath `<span class="built_in">pwd</span>` -o main &amp;&amp; ./main</span><br><span class="line">2,1</span><br></pre></td></tr></table></figure>

<p>foo() 对外不可见；此时 test() 调用 foo() 为模块内调用，无需通过 PLT；</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">objdump -d libtest.so</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0000000000001620 &lt;_Z4testv&gt;:</span><br><span class="line">    1620:       55                      push   %rbp</span><br><span class="line">    1621:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1624:       e8 07 00 00 00          callq  1630 &lt;_Z3foov&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="替换动态库"><a href="#替换动态库" class="headerlink" title="替换动态库"></a>替换动态库</h2><h3 id="案例（2）"><a href="#案例（2）" class="headerlink" title="案例（2）"></a>案例（2）</h3><p>如果 so 正在被使用时，执行 <code>cp $&#123;newlib&#125;.so $&#123;oldlib&#125;.so</code>，则容易引起程序 core dump。</p>
<h4 id="分析（2）"><a href="#分析（2）" class="headerlink" title="分析（2）"></a>分析（2）</h4><ul>
<li>应用程序加载动态库时，内核通过 mmap 把 so 加载到进程地址空间，对应 <code>Virtual memory area (VMA)</code> 中多个 <code>页（Page）</code><ul>
<li>相同 Inode 的 so 可被不同程序共享页缓存</li>
<li>段的装载地址和空间的对齐单位是页</li>
<li><a href="https://man7.org/linux/man-pages/man8/ld.so.8.html">dynamic linker&#x2F;loader</a> 会把 so 里面引用的外部符号按照上文所述步骤进行解析和重定位</li>
</ul>
</li>
<li>当 so 被 <code>cp</code> 以 truncate 模式覆盖时，内核会把 so 文件在虚拟内存页清除掉</li>
<li>运行到 so 里面的代码时，因为虚拟内存页已被清除，会产生一次缺页中断</li>
<li>缺页中断会导致内核从 so 文件中拷贝对应的页到内存中，<strong>so 地址范围内的数据相关表段也会替换为原始值，GOT &#x2F; PLT 相关因此丢失重定位信息</strong></li>
<li>前后 so 不一样，则逻辑执行结果不可知<ul>
<li>例如需要的访问的地址偏移大于新的 so 的地址范围，就会产生 <code>Bus error</code></li>
<li>访问非法地址则会引起 <code>Segmentation fault</code></li>
</ul>
</li>
<li>前后 so 文件完全一致：<ul>
<li>如果调用到依赖外部符号的逻辑，但此时外部符号并没有经过重新解析，直接使用 <code>.got</code> &#x2F; <code>.got.plt</code> 段数据，则会引起访问非法地址 <code>Segmentation fault</code></li>
<li>如果调用的逻辑没有依赖外部符号<ul>
<li>如果逻辑依赖 <code>.data</code> &#x2F; <code>.bss</code> 段数据（例如静态变量），则会因为数据被替换而引发逻辑异常</li>
<li>如果逻辑没有其他依赖，则可正常运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>为什么系统会阻止 <code>cp</code> 覆盖可执行程序，而不阻止覆盖 so 文件？</p>
<ul>
<li>操作系统的 <a href="https://en.wikipedia.org/wiki/Demand_paging">Demand Paging</a> 机制下，加载程序时也同上文一样映射 VMA，有访存需求时才加载相关页。</li>
<li>为防止正在运行中的程序镜像（并非文件本身）被意外修改，因此内核在启动程序后会锁定这个程序镜像的 Inode。</li>
<li>so 文件是靠 ld.so 加载的，属于用户态程序，没有权限锁定 Inode。</li>
</ul>
<hr>
<p><strong>结合上述内容，替换动态库时，必须先执行系统调用 <code>unlink*</code> 删除目标。因此禁止直接使用 <code>cp</code>，可选 <code>install</code>、<code>rm + cp</code> 等</strong></p>
<h2 id="动态库性能开销"><a href="#动态库性能开销" class="headerlink" title="动态库性能开销"></a>动态库性能开销</h2><p><a href="#%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89">分析（1）</a> 中已基本描述了加载动态库和调用动态库内函数的流程。除此之外，动态库使用外部变量和全局变量时也有额外的寻址开销。</p>
<h3 id="案例（3）"><a href="#案例（3）" class="headerlink" title="案例（3）"></a>案例（3）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest3.cpp</span></span><br><span class="line"><span class="type">int</span> k=<span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> k++;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">()</span></span>&#123;<span class="type">static</span> <span class="type">int</span> g=<span class="number">234</span>;<span class="keyword">return</span> g++;&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">poo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> p++;&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> f=<span class="number">666</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> f++;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -fPIC libtest3.cpp -shared -o libtest3.so</span><br></pre></td></tr></table></figure>

<p>全局变量 <code>k</code> 和外部变量 <code>p</code> 的访问方式相同，需要读 GOT，例如 koo() 中的步骤为：</p>
<ul>
<li>1764: 读取 <code>rip</code> 寄存器中下个指令的实际内存地址，加上 <code>k</code> 在 GOT 中对应项的偏移地址 0x12bd，读取 <code>k</code> 的内存地址并保存至 <code>rax</code> 寄存器</li>
<li>176b: 根据 <code>rax</code> 寄存器中的值再次寻址读取保存至 <code>eax</code> 寄存器</li>
</ul>
<p>静态局部变量 <code>goo()::g</code> 和静态全局变量 <code>foo()::f</code> 的访问则无需 GOT：</p>
<ul>
<li>1784: 通过 <code>rip</code> 寄存器和偏移地址 0x22b2 直接获取 <code>goo()::g</code> 在当前进程内存空间中的值至 <code>eax</code> 寄存器</li>
<li>动态库内访问静态变量，与使用静态链接库时是一样的 8b 类型的 mov 指令，性能上差距微乎其微</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nm -CD libtest3.so</span><br><span class="line"></span><br><span class="line">                 w __cxa_finalize</span><br><span class="line">00000000000017f4 T _fini</span><br><span class="line">                 w __gmon_start__</span><br><span class="line">00000000000017d8 T _init</span><br><span class="line">                 w _ITM_deregisterTMCloneTable</span><br><span class="line">                 w _ITM_registerTMCloneTable</span><br><span class="line">0000000000003a38 D k</span><br><span class="line">                 U p</span><br><span class="line">00000000000017c0 T foo()</span><br><span class="line">0000000000001780 T goo()</span><br><span class="line">0000000000001760 T koo()</span><br><span class="line">00000000000017a0 T poo()</span><br><span class="line"></span><br><span class="line">objdump -d libtest3.so</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0000000000001760 &lt;_Z3koov&gt;:</span><br><span class="line">    1760:       55                      push   %rbp</span><br><span class="line">    1761:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1764:       48 8b 05 bd 12 00 00    mov    0x12bd(%rip),%rax        <span class="comment"># 2a28 &lt;k@@Base-0x1010&gt;</span></span><br><span class="line">    176b:       8b 00                   mov    (%rax),%eax</span><br><span class="line">    176d:       89 c2                   mov    %eax,%edx</span><br><span class="line">    176f:       83 c2 01                add    <span class="variable">$0x1</span>,%edx</span><br><span class="line">    1772:       48 8b 0d af 12 00 00    mov    0x12af(%rip),%rcx        <span class="comment"># 2a28 &lt;k@@Base-0x1010&gt;</span></span><br><span class="line">    1779:       89 11                   mov    %edx,(%rcx)</span><br><span class="line">    177b:       5d                      pop    %rbp</span><br><span class="line">    177c:       c3                      retq</span><br><span class="line">    177d:       0f 1f 00                nopl   (%rax)</span><br><span class="line"></span><br><span class="line">0000000000001780 &lt;_Z3goov&gt;:</span><br><span class="line">    1780:       55                      push   %rbp</span><br><span class="line">    1781:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1784:       8b 05 b2 22 00 00       mov    0x22b2(%rip),%eax        <span class="comment"># 3a3c &lt;_ZZ3goovE1g&gt;</span></span><br><span class="line">    178a:       89 c1                   mov    %eax,%ecx</span><br><span class="line">    178c:       83 c1 01                add    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">    178f:       89 0d a7 22 00 00       mov    %ecx,0x22a7(%rip)        <span class="comment"># 3a3c &lt;_ZZ3goovE1g&gt;</span></span><br><span class="line">    1795:       5d                      pop    %rbp</span><br><span class="line">    1796:       c3                      retq</span><br><span class="line">    1797:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line">    179e:       00 00</span><br><span class="line"></span><br><span class="line">00000000000017a0 &lt;_Z3poov&gt;:</span><br><span class="line">    17a0:       55                      push   %rbp</span><br><span class="line">    17a1:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    17a4:       48 8b 05 85 12 00 00    mov    0x1285(%rip),%rax        <span class="comment"># 2a30 &lt;p@Base&gt;</span></span><br><span class="line">    17ab:       8b 00                   mov    (%rax),%eax</span><br><span class="line">    17ad:       89 c2                   mov    %eax,%edx</span><br><span class="line">    17af:       83 c2 01                add    <span class="variable">$0x1</span>,%edx</span><br><span class="line">    17b2:       48 8b 0d 77 12 00 00    mov    0x1277(%rip),%rcx        <span class="comment"># 2a30 &lt;p@Base&gt;</span></span><br><span class="line">    17b9:       89 11                   mov    %edx,(%rcx)</span><br><span class="line">    17bb:       5d                      pop    %rbp</span><br><span class="line">    17bc:       c3                      retq</span><br><span class="line">    17bd:       0f 1f 00                nopl   (%rax)</span><br><span class="line"></span><br><span class="line">00000000000017c0 &lt;_Z3foov&gt;:</span><br><span class="line">    17c0:       55                      push   %rbp</span><br><span class="line">    17c1:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    17c4:       8b 05 76 22 00 00       mov    0x2276(%rip),%eax        <span class="comment"># 3a40 &lt;_ZL1f&gt;</span></span><br><span class="line">    17ca:       89 c1                   mov    %eax,%ecx</span><br><span class="line">    17cc:       83 c1 01                add    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">    17cf:       89 0d 6b 22 00 00       mov    %ecx,0x226b(%rip)        <span class="comment"># 3a40 &lt;_ZL1f&gt;</span></span><br><span class="line">    17d5:       5d                      pop    %rbp</span><br><span class="line">    17d6:       c3                      retq</span><br><span class="line">...    </span><br></pre></td></tr></table></figure>

<hr>
<p>通常来说动态库会尽量少使用外部变量和全局变量，以获得更好的隔离性，减少符号依赖风险，所以一般情况下讨论动态库的性能损耗着重于跨模块函数调用（额外的内存间接寻址，跨模块访存局部性变差）。但绝大多数实际应用层面，这些开销基本可以忽略。</p>
<h2 id="共享库兼容性"><a href="#共享库兼容性" class="headerlink" title="共享库兼容性"></a>共享库兼容性</h2><p><a href="#%E6%A1%88%E4%BE%8B%EF%BC%881%EF%BC%89">案例（1）</a>，<a href="#%E6%A1%88%E4%BE%8B%EF%BC%882%EF%BC%89">案例（2）</a>，<a href="#%E6%A1%88%E4%BE%8B%EF%BC%883%EF%BC%89">案例（3）</a> 中使用的均是 C++ 的 <code>ABI (Application binary interface)</code>，由于其标准会随着编译器而改变，所以假如程序直接使用第三方的二进制库，务必保证双方的 ABI 标准一致。C 语言的 ABI 则相对稳定，加之大部分操作系统为其标准背书。实际生产环境应用中，跨语言 &#x2F; 跨模块 交互的场景基本用的都是 C 式接口。</p>
<p>共享库动态链接｜装载时搜索路径顺序：</p>
<ol>
<li>编译目标代码时指定的共享库搜索路径（设置 rpath）</li>
<li>环境变量 <code>LD_LIBRARY_PATH</code> 指定共享库搜索路径</li>
<li>配置文件 <code>/etc/ld.so.conf</code> 中指定的共享库搜索路径</li>
<li>默认的共享库搜索路径：<code>/lib</code>、<code>/usr/lib</code>、<code>/usr/local/lib</code></li>
</ol>
<p>Linux 有一套共享库命名规范 <em><strong>libname.so.x.y.z</strong></em></p>
<ul>
<li>前缀 <code>lib</code>，库名称，后缀 <code>.so</code>，3 个版本号</li>
<li><code>x</code> 表示主版本号（Major），<code>y</code> 表示次版本号（Minor），<code>z</code> 表示发布版本号（Release）<ul>
<li>主版本号不同的库不保证兼容</li>
<li>次版本号表示库增量升级，只新增符号</li>
<li>发布版本号表示内部修改，不改变符号</li>
</ul>
</li>
</ul>
<h3 id="案例（4）"><a href="#案例（4）" class="headerlink" title="案例（4）"></a>案例（4）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main4.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;version %d\n&quot;</span>, <span class="built_in">foo</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest4.1.1.1.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">10101</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>指定共享库的 <code>SO-NAME</code> 为 libtest4.so.1（仅保留主版本号），该软链接保持指向目录中相同主版本，次版本和发布版本最新的共享库。当进行共享库兼容式升级时，只需修改该软链接。程序打包发布时，则需打包该软链接以及实际指向的共享库文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -fPIC libtest4.1.1.1.cpp -shared -Wl,-soname,libtest4.so.1 -o libtest4.so.1.1.1</span><br><span class="line"><span class="built_in">ln</span> -sf libtest4.so.1.1.1 libtest4.so.1</span><br><span class="line"><span class="built_in">ln</span> -sf libtest4.so.1 libtest4.so</span><br><span class="line"></span><br><span class="line">readelf -d libtest4.so.1.1.1 | grep <span class="string">&#x27;SONAME&#x27;</span></span><br><span class="line"> 0x000000000000000e (SONAME)             Library soname: [libtest4.so.1]</span><br><span class="line"> </span><br><span class="line">clang++ main4.cpp -L`<span class="built_in">pwd</span>` -rpath `<span class="built_in">pwd</span>` -ltest4 -o main4 &amp;&amp; ./main4</span><br><span class="line">version 10101</span><br><span class="line"></span><br><span class="line">ldd main4 | grep test4</span><br><span class="line">        libtest4.so.1 (0x00007f59c9009000)</span><br></pre></td></tr></table></figure>

<h3 id="案例（5）"><a href="#案例（5）" class="headerlink" title="案例（5）"></a>案例（5）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest5.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1234</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest5.2.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">8888</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest5_expect.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">go</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1234</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libtest5_expect.2.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">go</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">8888</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main5.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">load_run</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * lib_name, <span class="type">const</span> <span class="type">char</span> * func_name, <span class="type">int</span> * res)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> * handle = <span class="built_in">dlopen</span>(lib_name, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">        <span class="built_in">int</span> (*foo)() = (<span class="built_in">int</span> (*)())<span class="built_in">dlsym</span>(handle, func_name);</span><br><span class="line">        <span class="built_in">assert</span>(foo);</span><br><span class="line">        *res = <span class="built_in">foo</span>();</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">dlclose</span>(handle);</span><br><span class="line">        <span class="built_in">assert</span>(!r);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> expect_val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">assert</span>(!<span class="built_in">load_run</span>(<span class="string">&quot;./libtest5.so&quot;</span>, <span class="string">&quot;foo&quot;</span>, &amp;res));</span><br><span class="line">        <span class="built_in">assert</span>(!<span class="built_in">load_run</span>(<span class="string">&quot;./libtest5_expect.so&quot;</span>, <span class="string">&quot;go&quot;</span>, &amp;expect_val));</span><br><span class="line">        <span class="keyword">if</span>(res != expect_val) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;invalid result, expect %d got %d\n&quot;</span>, expect_val, res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;result equal %d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -fPIC libtest5.2.cpp -shared -o libtest5.2.so</span><br><span class="line">clang++ -fPIC libtest5.cpp -shared -o libtest5.so</span><br><span class="line">clang++ -fPIC libtest5_expect.cpp -shared -o libtest5_expect.so</span><br><span class="line">clang++ -fPIC libtest5_expect.2.cpp -shared -o libtest5_expect.2.so</span><br><span class="line">clang++ -L`<span class="built_in">pwd</span>` -o main5 -ldl main5.cpp</span><br></pre></td></tr></table></figure>

<p>在 main5 运行过程中执行 <code>mv libtest5.2.so libtest5.so</code> 等 10s 后执行 <code>mv libtest5_expect.2.so libtest5_expect.so</code>，可见看出这段时间内出现了非预期的逻辑报错。</p>
<p>假如程序存在运行时装载使用共享库的行为，为了保障服务的稳定，需要尽可能令更新二进制文件的操作满足原子性，否则就得在程序逻辑侧加以控制。</p>
<h3 id="案例（6）"><a href="#案例（6）" class="headerlink" title="案例（6）"></a>案例（6）</h3><p>在 <code>x86_64</code> 平台下，把基于 CentOS7 编译的 TiFlash 二进制文件放到较新的 <code>Ubuntu:21.10</code> 系统中可以正常运行，但在 <code>aarch64</code> 平台下则会出现以下报错</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./tiflash: /lib/aarch64-linux-gnu/libpthread.so.0: version `GLIBC_PRIVATE<span class="string">&#x27; not found (required by ./tiflash)</span></span><br></pre></td></tr></table></figure>

<h4 id="分析（6）"><a href="#分析（6）" class="headerlink" title="分析（6）"></a>分析（6）</h4><p><strong>TiFlash 的模块构成是什么样的？</strong></p>
<p>以当前较新的 commit 为例 <a href="https://github.com/pingcap/tiflash/commit/636fcd22371266ee2792b4e0636cf96b4cacaa0c">636fcd22371266ee2792b4e0636cf96b4cacaa0c</a>，v6.0 之后整体工具链从 GCC-7.x 切换为 LLVM-13，CentOS7 系统编译出的二进制对应的动态库依赖如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ldd ./tiflash</span><br><span class="line"></span><br><span class="line">        linux-vdso.so.1 (0x00007ffc575f5000)</span><br><span class="line">        libc++.so.1 =&gt; /root/test/tiflash/./libc++.so.1 (0x00007f109618c000)</span><br><span class="line">        libc++abi.so.1 =&gt; /root/test/tiflash/./libc++abi.so.1 (0x00007f1096148000)</span><br><span class="line">        libtiflash_proxy.so =&gt; /root/test/tiflash/./libtiflash_proxy.so (0x00007f1093343000)</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f109333c000)</span><br><span class="line">        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f1093337000)</span><br><span class="line">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f1093253000)</span><br><span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f109324c000)</span><br><span class="line">        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f1093232000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f109300a000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f109625d000)</span><br></pre></td></tr></table></figure>

<p><code>libtiflash_proxy.so</code> 是一个 Rust 语言编写的动态库：<a href="https://github.com/pingcap/tidb-engine-ext">tidb-engine-ext</a>，通过工具查看其导出的符号为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0000000000aadda0 T bz_internal_error</span><br><span class="line">0000000000ee9e30 T perf_signal_handler</span><br><span class="line">00000000010b5200 T print_raftstore_proxy_version</span><br><span class="line">00000000010b5210 T run_raftstore_proxy_ffi</span><br><span class="line">0000000000e96c00 T rust_eh_personality</span><br></pre></td></tr></table></figure>

<p>Glibc 库中可以看到类似于 <code>GCC_</code> 为前缀或者是 <code>GLIBC_PRIVATE</code> 的符号版本。后者表示 <strong>非公开版本</strong>，有可能随着共享库的版本演化而被删除或改变，最好不要使用这些符号，否则风险自负。</p>
<p>查看 TiFlash 的符号表可知共有 3 个地方用到 <code>GLIBC_PRIVATE</code>。而 Ubuntu:21.10 中 的 <code>/lib/aarch64-linux-gnu/libpthread.so.0</code> 和 <code>/lib/aarch64-linux-gnu/libc.so.6</code> 已然没有对应的符号。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">readelf -a --wide ./tiflash | grep <span class="string">&#x27;GLIBC_PRIVATE&#x27;</span></span><br><span class="line"></span><br><span class="line">00000726a048  026c00000406 R_AARCH64_TLS_TPR 0000000000000000 errno@GLIBC_PRIVATE + 0</span><br><span class="line">0000072827b8  026b00000402 R_AARCH64_JUMP_SL 0000000000000000 __pthread_get_minstack@GLIBC_PRIVATE + 0</span><br><span class="line">0000072827c0  026d00000402 R_AARCH64_JUMP_SL 0000000000000000 __gai_sigqueue@GLIBC_PRIVATE + 0</span><br><span class="line">   619: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __pthread_get_minstack@GLIBC_PRIVATE (9)</span><br><span class="line">   620: 0000000000000000     0 TLS     GLOBAL DEFAULT  UND errno@GLIBC_PRIVATE (10)</span><br><span class="line">   621: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __gai_sigqueue@GLIBC_PRIVATE (10)</span><br><span class="line">  268:   2 (GLIBC_2.17)    4 (GLIBC_2.17)    4 (GLIBC_2.17)    9 (GLIBC_PRIVATE)</span><br><span class="line">  26c:   a (GLIBC_PRIVATE)   a (GLIBC_PRIVATE)   2 (GLIBC_2.17)    4 (GLIBC_2.17) </span><br><span class="line">  0x0080:   Name: GLIBC_PRIVATE  Flags: none  Version: 9</span><br><span class="line">  0x00d0:   Name: GLIBC_PRIVATE  Flags: none  Version: 10</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>符号是如何被引入的？</strong></p>
<p>以 <code>__gai_sigqueue</code> 为例，进到 编译目录｜源码目录 下，对所有文件（包括二进制）检索关键字 <code>__gai_sigqueue</code>，结果显示只有编译终产物 tiflash 二进制文件包含该信息，可以看出符号不是本地代码引入的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;build_dir&#125;</span></span><br><span class="line">grep <span class="string">&#x27;__gai_sigqueue&#x27;</span> -r .</span><br><span class="line"></span><br><span class="line">Binary file dbms/src/Server/tiflash matches</span><br></pre></td></tr></table></figure>

<p>查看 TiFlash 编译流程最后的链接命令，参数中包含 2 个外部静态库 <code>/usr/lib64/librt.a</code> 和 <code>/usr/lib64/libanl.a</code>。</p>
<p>分别导出 <code>重定位表</code> 可知是 <code>/usr/lib64/libanl.a</code> 的 <code>gai_notify.o</code> 引用了 <code>__gai_sigqueue</code>，对应 2 个 <code>重定位入口（Relocation Entry）</code>：OFFSET 0000000000000081，OFFSET 00000000000001c2。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">objdump -r /usr/lib64/libanl.a</span><br><span class="line"></span><br><span class="line">gai_notify.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE </span><br><span class="line">...</span><br><span class="line">0000000000000081 R_X86_64_PC32     __gai_sigqueue-0x0000000000000004</span><br><span class="line">...</span><br><span class="line">00000000000001c2 R_X86_64_PC32     __gai_sigqueue-0x0000000000000004</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">objdump -r /usr/lib64/librt.a | grep <span class="string">&#x27;__gai_sigqueue&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反汇编 <code>/usr/lib64/libanl.a</code> 找到 <code>gai_notify.o</code> 的 81 位置附近信息，可知是 <code>__gai_notify_only()</code> 和 <code>__gai_notify()</code> 函数调用了 <code>__gai_sigqueue()</code> 函数</p>
<ul>
<li>80 位置开始是一条 5 字节的指令码，80 位置的一个字节表示指令类型，81～84 位置表示 4 字节的偏移地址，当前全都是 0</li>
<li>OFFSET 为 0x81 的重定位入口类型为 <code>R_X86_64_PC32</code>，相关信息为 <code>__gai_sigqueue-0x0000000000000004</code>，等同于在链接阶段由链接器修正 81 位置开始的 4 字节偏移地址</li>
<li>假设最终 <code>__gai_sigqueue@plt</code> 被装载到地址 a，<code>__gai_notify_only()</code> 被装载到地址 b，则偏移地址被修正为 a - (0x85 - 0x50 + b)</li>
<li>1c1: 行的偏移地址修正也是同理</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">objdump -d /usr/lib64/libanl.a</span><br><span class="line"></span><br><span class="line">gai_notify.o:     file format elf64-x86-64</span><br><span class="line">...</span><br><span class="line">Disassembly of section .text:</span><br><span class="line">...</span><br><span class="line">0000000000000050 &lt;__gai_notify_only&gt;:</span><br><span class="line">...</span><br><span class="line">  80:   e8 00 00 00 00          callq  85 &lt;__gai_notify_only+0x35&gt;</span><br><span class="line">  85:   48 83 c4 50             add    <span class="variable">$0x50</span>,%rsp</span><br><span class="line">  89:   c1 f8 1f                sar    <span class="variable">$0x1f</span>,%eax</span><br><span class="line">  8c:   5b                      pop    %rbx</span><br><span class="line">...</span><br><span class="line">0000000000000120 &lt;__gai_notify&gt;:</span><br><span class="line">...</span><br><span class="line"> 1bd:   49 8b 34 24             mov    (%r12),%rsi</span><br><span class="line"> 1c1:   e8 00 00 00 00          callq  1c6 &lt;__gai_notify+0xa6&gt;</span><br><span class="line"> 1c6:   48 8b 7b 08             mov    0x8(%rbx),%rdi</span><br><span class="line"> 1ca:   eb b0                   jmp    17c &lt;__gai_notify+0x5c&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>排查函数调用关系可以得出符号被引入 TiFlash 的过程：</p>
<ul>
<li>libc.so：实现并对外导出 <code>__gai_sigqueue()</code> 函数，对应版本 <code>GLIBC_PRIVATE</code></li>
<li>libanl.a：<ul>
<li><code>gai_notify.o</code> 中 <code>__gai_notify()</code> 和 <code>__gai_notify_only()</code> 调用了 <code>__gai_sigqueue()</code></li>
<li><code>getaddrinfo_a.o</code> 中 <code>getaddrinfo_a()</code> 调用了 <code>__gai_notify_only()</code></li>
<li><code>gai_misc.o</code> 中 <code>handle_requests()</code> 调用了 <code>__gai_notify()</code></li>
</ul>
</li>
<li>TiFlash 代码中的 <code>poco</code> 模块调用了 <code>getaddrinfo_a()</code> 函数：<a href="https://github.com/pingcap/poco/blob/e411ea34492bf26e76b4e4a03ff5813a0c779240/Net/src/DNS.cpp#L167">pingcap&#x2F;poco&#x2F;Net&#x2F;src&#x2F;DNS.cpp#L167</a></li>
<li>libanl.a 和 libc.so 被先后链接，<code>getaddrinfo_a</code> 被决议成本地符号，<code>__gai_sigqueue</code> 被决议成外部符号</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nm -CD /lib64/libc.so.6</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0000000000111a90 T __gai_sigqueue</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">nm /lib64/libanl.a</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">gai_notify.o:</span><br><span class="line">                 U free</span><br><span class="line">0000000000000120 T __gai_notify</span><br><span class="line">0000000000000050 T __gai_notify_only</span><br><span class="line">                 U __gai_sigqueue</span><br><span class="line">                 U malloc</span><br><span class="line">                 U pthread_attr_init</span><br><span class="line">                 U pthread_attr_setdetachstate</span><br><span class="line">                 U pthread_create</span><br><span class="line">                 U sigemptyset</span><br><span class="line">0000000000000000 W _.stapsdt.base</span><br><span class="line">...</span><br><span class="line">getaddrinfo_a.o:</span><br><span class="line">                 U errno</span><br><span class="line">                 U __gai_enqueue_request</span><br><span class="line">                 U __gai_notify_only</span><br><span class="line">                 U __gai_requests_mutex</span><br><span class="line">0000000000000000 T getaddrinfo_a</span><br><span class="line">                 U getpid</span><br><span class="line">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class="line">                 U malloc</span><br><span class="line">                 U pthread_mutex_lock</span><br><span class="line">                 U pthread_mutex_unlock</span><br><span class="line">                 w pthread_setcancelstate</span><br><span class="line">...</span><br><span class="line">gai_misc.o:</span><br><span class="line">...</span><br><span class="line">0000000000000000 t handle_requests</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">nm -Cg ./tiflash</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">0000000007fa4330 T getaddrinfo_a</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>如何解决上述外部符号问题？</strong></p>
<p>a. 基于实际运行环境编译发布</p>
<ul>
<li>这是风险最小的方式，面向小众平台（例如苹果的 MacOS）发布可以选用这种方式快速解决兼容性问题，缺点是成本较高</li>
</ul>
<p>b. 将有风险的符号在本地实现</p>
<ul>
<li>例如 CK 的 glibc-compatibility 模块中 <a href="https://github.com/ClickHouse/ClickHouse/blob/4dcbf3a5c5dfe1ccb2f47c025b8cb23ae71f1dd2/base/glibc-compatibility/glibc-compatibility.c#L18">glibc-compatibility.c#L18</a> 直接将 <code>__gai_sigqueue()</code> 函数代码在本地实现。参考 <a href="#Linux-%E9%9D%99%E6%80%81%E5%BA%93">Linux 静态库</a> 中介绍的链接器行为，只要链接 glibc-compatibility 先于 glibc，则最终符号表里用的就是本地实现的函数；</li>
<li>实际上 TiFlash 的代码里也有类似的实现 <a href="https://github.com/pingcap/tiflash/tree/eaf1a4cf886d1d5a86d04ef14eff956778ab4911/libs/libglibc-compatibility">libglibc-compatibility</a>，但在 ARM 平台编译时不启用（尚未适配）。</li>
<li><strong>注意：如果程序用 <code>-static</code> 的模式编译（即链接 <code>/lib64/libc.a</code>），则要注意符号冲突。</strong><ul>
<li>例如本案例中 <code>__gai_sigqueue</code> 来自 <code>gai_sigqueue.o</code>，glibc 中该目标文件下没有定义导出其他符号，不会有影响</li>
<li>假如本地实现了 <code>getnssent_r.o</code> 的 <code>__nss_endent</code>，则需要同时实现 <code>__nss_getent_r</code> 和 <code>__nss_setent</code>。如果程序其他模块引用了 <code>__nss_getent_r</code> 并需要链接 <code>getnssent_r.o</code>，则容易引起符号冲突。</li>
</ul>
</li>
</ul>
<p>c. 利用 asm 显示地为函数指定 glibc 版本，这种方式需要把控好函数的入口，避免过度污染</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.symver __foo_old, foo@VER1</span><br><span class="line">.symver __foo_new, foo@@VER2</span><br><span class="line">.symver __bar_old, bar@@VER1</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<ul>
<li>例如下面的例子，通过编译参数强制将 <code>realpath()</code> 指定为 <code>GLIBC_2.2.5</code> 版本。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main6.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> REALPATH_HACK</span></span><br><span class="line">__asm__(<span class="string">&quot;.symver realpath,realpath@GLIBC_2.2.5&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* unresolved = <span class="string">&quot;/lib64&quot;</span>;</span><br><span class="line">    <span class="type">char</span> resolved[PATH_MAX+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">realpath</span>(unresolved, resolved))</span><br><span class="line">        &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, resolved);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ main6.cpp -o main6 &amp;&amp; readelf -a  main6 | grep <span class="string">&#x27;realpath&#x27;</span></span><br><span class="line"></span><br><span class="line">000000203ae8  000400000007 R_X86_64_JUMP_SLO 0000000000000000 <span class="built_in">realpath</span>@GLIBC_2.3 + 0</span><br><span class="line">     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">realpath</span>@GLIBC_2.3 (3)</span><br><span class="line">    32: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">realpath</span></span><br><span class="line"></span><br><span class="line">clang++ main6.cpp -DREALPATH_HACK -o main6 &amp;&amp; readelf -a  main6 | grep <span class="string">&#x27;realpath&#x27;</span></span><br><span class="line"></span><br><span class="line">000000203ac8  000500000007 R_X86_64_JUMP_SLO 0000000000000000 <span class="built_in">realpath</span>@GLIBC_2.2.5 + 0</span><br><span class="line">     5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">realpath</span>@GLIBC_2.2.5 (2)</span><br><span class="line">    33: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">realpath</span></span><br></pre></td></tr></table></figure>

<h2 id="动态库-or-静态库"><a href="#动态库-or-静态库" class="headerlink" title="动态库 or 静态库"></a>动态库 or 静态库</h2><h3 id="案例（7）"><a href="#案例（7）" class="headerlink" title="案例（7）"></a>案例（7）</h3><p><a href="#%E6%A1%88%E4%BE%8B%EF%BC%886%EF%BC%89">案例（6）</a> 中提到了 Rust 语言实现的动态库 <code>libtiflash_proxy.so</code>，为什么实现上要选择动态库而不是静态库？</p>
<h4 id="分析（7）"><a href="#分析（7）" class="headerlink" title="分析（7）"></a>分析（7）</h4><p>从开发者角度来说理想的模式是所有功能按模块拆分成库，开发调试时用动态库，打包发布时用静态库。对于大型工程而言，动态库可灵活替换带来的便利性不言而喻。</p>
<hr>
<p>涉及到跨语言交互的场景，符号冲突是一个不忽略的问题。Rust 关于符号处理的行为是：</p>
<ul>
<li>对于 <code>crate-type = [&quot;cdylib&quot;]</code> 类型的库，Rust 默认对外 <strong>隐藏符号</strong>，如果要以 C 语言的 ABI 标准对外导出函数需显式地指定其属性为 <code>#[no_mangle] pub unsafe extern &quot;C&quot;</code>，例如 <a href="https://github.com/pingcap/tidb-engine-ext/blob/794b9ee12d216cd66bce2da69794f2e5d96aac90/raftstore-proxy/src/lib.rs#L5-L8">print_raftstore_proxy_version 函数定义</a>。</li>
<li>对于 <code>#[crate_type = &quot;staticlib&quot;]</code> 类型的静态库，则是同其他语言一样默认导出符号。</li>
</ul>
<p>由于种种原因，tidb-engine-ext 需要同 TiKV 的代码栈保持基本同步。如果将 <a href="https://github.com/pingcap/tidb-engine-ext/blob/37c5e02754c6acc3b53d1d4e2cb1ad2108a60439/raftstore-proxy/Cargo.toml#L10">raftstore_proxy</a> 的类型改成 <code>#[crate_type = &quot;staticlib&quot;]</code>，编译得到 <code>libraftstore_proxy.a</code>，强制魔改下 TiFlash 的代码，让其链接这个静态库而非 <code>libtiflash_proxy.so</code>，可以看到多处链接时报错 <code>ld.lld: error: duplicate symbol</code>。报错的符号有 <code>__rust_drop_panic</code>，<code>rust_panic</code>，<code>grpc_set_ssl_roots_override_callback</code> 等，与 <code>libsymbolization.a</code>，<code>libgrpc.a</code> 这几个本地编译的静态库相冲突。虽然理论上有诸多办法可以解决（参考 <a href="#%E9%9D%99%E6%80%81%E5%BA%93%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98">静态库冲突问题</a>）但相对会增加心智负担。</p>
<p>使用动态库则相对简单，仅需把交互相关的接口定义好导出即可（同时也要避免符号污染）。对于开发者而言，对于不涉及接口格式的模块内改动，则不需要静态库那样全量编译。</p>
<p>根据上文的介绍，动态库装载时会进行符号绑定，所以在使用时有几点需要注意：</p>
<ul>
<li>与 TiKV 不同，tidb-engine-ext 不指定内存分配器（即令 <code>malloc</code>｜<code>free</code> 之类的内存管理接口被编译器决议成未定义符号），此举是为了保证同宿主进程兼容。例如 TiFlash 中使用了自定义的内存分配器 jemalloc，malloc｜free 之类的函数被决议成内部重载的版本，参照上文 <a href="#%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89">分析（1）</a> 的动态库装载过程，<code>libtiflash_proxy.so</code> 最终使用的是 TiFlash 主进程提供的内存分配器。如果 TiFlash 也不指定内存分配器，则最终使用的是 Glibc 相关库中的默认版本。</li>
<li>使用 tidb-engine-ext 时以下几个符号需要注意，不要有本地同名符号，以免载入动态库时这些函数被本地实现覆盖：<code>bz_internal_error</code> 由 <a href="https://github.com/alexcrichton/bzip2-rs">bzip2-sys</a> 引入；<code>perf_signal_handler</code> 由 <a href="https://github.com/tikv/pprof-rs">pprof-rs</a> 引入；<code>rust_eh_personality</code> 则是编译器的保留项；</li>
<li>如果本地同时引入了其他 Rust 环境，例如现在的 <code>libsymbolization.a</code>，则需要尽量保证这些环境使用的 Rust 版本一致，以免产生非预期的行为。</li>
</ul>
<p>尽管目前 <code>libtiflash_proxy.so</code> 是用的隐式加载的模式，但实际上核心的功能函数就只有 <code>run_raftstore_proxy_ffi</code>，动态库与宿主进程间交互的接口（主要是函数指针）通过这个入口相互注册，所以完全可以做到运行时加载。</p>
<ul>
<li>这种动态库设计方向，把接口封装到运行逻辑的上下文中而不是独立的函数，以此来支持热更新。当然缺点也是有的：一来是目前 tidb-engine-ext 面向的场景并不需要热更新，二来额外的封装造成接口函数调用多出些间接寻址开销（正常业务场景中可以忽略不计）。</li>
<li>运行时加载也可以解决潜在的动态库符号冲突问题，参考 <a href="#%E6%A1%88%E4%BE%8B%EF%BC%881%EF%BC%89">案例（1）</a>。</li>
</ul>
<h1 id="Linux-静态库"><a href="#Linux-静态库" class="headerlink" title="Linux 静态库"></a>Linux 静态库</h1><p>在软件开发体系中，把每个源代码模块独立地编译，然后按照需要 “组装” 起来，这个组装模块的过程就是链接（Linking）。链接器的工作主要是把指令对其他符号地址的引用加以修正。链接过程主要包括了地址和空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution，aka 符号绑定）和重定位（Relocation）等步骤。</p>
<p><strong>静态库可以看作是目标文件的合集，链接器链接静态库是以目标文件为基本单位的</strong>。例如一个简单的 <code>hello world</code> 程序引用了外部符号 <code>printf</code> 并静态链接 <code>/lib64/libc.a</code>，那么链接器处理 <code>printf</code> 时，会先链接 <code>/lib64/libc.a</code> 中实现该函数的目标文件 <code>printf.o</code>，将其整个纳入到输出目标中（也包括其他可能对该程序无用的函数），该目标文件还引用了外部符号 <code>stdout</code> 和 <code>vfprintf</code>，则这些符号又会继续被处理，直到决议和重定位完所有符号。</p>
<ul>
<li>理论上按照层次化｜模块化存储和组织源代码有很多好处，比如代码更容易理解、重用，每个模块可以单独开发、编译、测试，改变部分代码不需要编译整个程序等。</li>
</ul>
<h2 id="静态库冲突问题"><a href="#静态库冲突问题" class="headerlink" title="静态库冲突问题"></a>静态库冲突问题</h2><p><a href="#%E5%88%86%E6%9E%90%EF%BC%887%EF%BC%89">分析（7）</a> 中提到了 TiFlash 静态链接 <code>libraftstore_proxy.a</code> 时遇到符号冲突的问题。本章节介绍几种解决静态库符号冲突的方法。</p>
<h3 id="案例（8）"><a href="#案例（8）" class="headerlink" title="案例（8）"></a>案例（8）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7_1.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">11</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7_2.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">2</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">22</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7_3.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">3</span>;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main7.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">koo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">goo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, <span class="built_in">foo</span>(), <span class="built_in">koo</span>(), <span class="built_in">goo</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 个静态库内同时实现了 <code>foo</code> 函数和其他自定义函数，<code>main7</code> 编译链接 <code>libtest7_2.a</code>、<code>libtest7_3.a</code> 和 <code>libtest7_1.a</code>，最后报错 <code>duplicate symbol: foo()</code></p>
<ul>
<li>为什么会产生 <code>duplicate symbol</code> ？</li>
<li><code>libtest7_3.a</code> 中也实现了 <code>foo</code> 函数，为什么没有出现在报错信息里？</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -c test7_1.cpp -o test7_1.o &amp;&amp; ar -cr libtest7_1.a test7_1.o</span><br><span class="line">clang++ -c test7_2.cpp -o test7_2.o &amp;&amp; ar -cr libtest7_2.a test7_2.o</span><br><span class="line">clang++ -c test7_3.cpp -o test7_3.o &amp;&amp; ar -cr libtest7_3.a test7_3.o</span><br><span class="line">clang++ main7.cpp -L./ -ltest7_2 -ltest7_3 -ltest7_1 -o main7 -static --verbose &amp;&amp; ./main7</span><br><span class="line"></span><br><span class="line">ld.lld: error: duplicate symbol: foo()</span><br><span class="line">&gt;&gt;&gt; defined at test7_2.cpp</span><br><span class="line">&gt;&gt;&gt;            test7_2.o:(foo()) <span class="keyword">in</span> archive ./libtest7_2.a</span><br><span class="line">&gt;&gt;&gt; defined at test7_1.cpp</span><br><span class="line">&gt;&gt;&gt;            test7_1.o:(.text+0x0) <span class="keyword">in</span> archive ./libtest7_1.a</span><br><span class="line">clang-13: error: linker <span class="built_in">command</span> failed with <span class="built_in">exit</span> code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure>

<h4 id="分析（8）"><a href="#分析（8）" class="headerlink" title="分析（8）"></a>分析（8）</h4><p>链接过程详解：</p>
<ul>
<li>每个模块都是独立编译的，编译器在编译 main7.cpp 时并不知道其引用的几个函数（包括 <code>printf</code>）的地址，所以生成的目标文件（此处为临时文件，例如 <code>/tmp/main7-6aa576.o</code>）的符号表中包含未定义类型的符号 <code>_Z3foov</code>，<code>_Z3koov</code>，<code>_Z3goov</code>，<code>printf</code>。</li>
<li>根据链接参数的顺序，首先被载入的是 <code>/tmp/main7-6aa576.o</code>，链接器其纳入输出目标，<code>_Z3foov</code>，<code>_Z3koov</code>，<code>_Z3goov</code>，<code>printf</code> 则是待决议。</li>
<li>链接器从 <code>libtest7_2.a</code> 的 <code>test7_2.o</code> 模块的符号表中找到待决议的符号 <code>_Z3foov</code> 和 <code>_Z3koov</code>，纳入该目标文件并完成重定位。还剩下 <code>_Z3goov</code>，<code>printf</code>。</li>
<li>链接器从 <code>libtest7_3.a</code> 各个模块的符号表中找不到待决议的符号，则直接跳过。</li>
<li>链接器从 <code>libtest7_1.a</code> 的 <code>test7_1.o</code> 模块的符号表中找到待决议的符号 <code>_Z3goov</code>，但在链接模块 <code>test7_1.o</code> 过程中发现符号 <code>_Z3foov</code> 已经被绑定，则对外报错。</li>
</ul>
<h4 id="解决方案（8）"><a href="#解决方案（8）" class="headerlink" title="解决方案（8）"></a>解决方案（8）</h4><h5 id="删除冲突的符号"><a href="#删除冲突的符号" class="headerlink" title="删除冲突的符号"></a>删除冲突的符号</h5><ul>
<li>如果可以修改源代码，这是最简单有效的方法。</li>
<li>如果没有源码，可以借助工具 <code>llvm-ar -x lib__.a</code> 拆分成独立的目标文件，按需选择并删除后，再重新打包生成构静态库<ul>
<li>需要注意的是删除的最小单位是目标文件，如果因此删除了有用的符号，则会导致后续实际使用时报错 <code>undefined symbol</code>。</li>
</ul>
</li>
</ul>
<h5 id="修改符号名称"><a href="#修改符号名称" class="headerlink" title="修改符号名称"></a>修改符号名称</h5><ul>
<li>如果可以修改源代码则相对简单。</li>
<li>如果没有源码，可借助工具 <code>llvm-objcopy --redefine-sym &lt;old&gt;=&lt;new&gt; lib__.a</code>，直接修改符号名称<ul>
<li>缺点：实际使用修改后的静态库时，需要适配新符号。</li>
</ul>
</li>
</ul>
<h5 id="修改冲突符号的类型"><a href="#修改冲突符号的类型" class="headerlink" title="修改冲突符号的类型"></a>修改冲突符号的类型</h5><ul>
<li>将冲突符号的类型由 <code>GLOBAL</code> 修改为 <code>LOCAL</code>。</li>
<li>为了避免静态库内其他目标文件无法链接被修改的符号，将静态重构成单个目标文件的结构<ul>
<li>缺点：只能全量链接整个库，会增大程序体积</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test7_4.cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">soo</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">foo</span>();&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang++ -c test7_4.cpp -o test7_4.o</span><br><span class="line">ld.lld -r test7_1.o test7_4.o -o test7_1_4.o</span><br><span class="line">nm test7_1_4.o</span><br><span class="line"></span><br><span class="line">0000000000000000 T _Z3foov</span><br><span class="line">0000000000000010 T _Z3goov</span><br><span class="line">0000000000000020 T _Z3soov</span><br><span class="line"></span><br><span class="line">llvm-objcopy --localize-symbol=<span class="string">&quot;_Z3foov&quot;</span> ./test7_1_4.o</span><br><span class="line">nm test7_1_4.o</span><br><span class="line"></span><br><span class="line">0000000000000000 t _Z3foov</span><br><span class="line">0000000000000010 T _Z3goov</span><br><span class="line">0000000000000020 T _Z3soov</span><br><span class="line"></span><br><span class="line">ar -cr libtest7_1_4.a  test7_1_4.o</span><br><span class="line">clang++ main7.cpp -L./ -ltest7_2 -ltest7_1_4 -o main7 -static --verbose </span><br></pre></td></tr></table></figure>

<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>未完待续</p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>PingCAP</tag>
        <tag>Linux</tag>
        <tag>Compiler</tag>
        <tag>System</tag>
        <tag>FileSystem</tag>
        <tag>DynamicLibrary</tag>
      </tags>
  </entry>
  <entry>
    <title>Materialized View Simple Demo | TiDB</title>
    <url>/2023/07/18/pingcap/materialized-view-demo/</url>
    <content><![CDATA[<blockquote>
<p>Ref <a href="https://materialize.com/guides/materialized-views/#what-is-a-materialized-view">What is a materialized view?</a>: A materialized view is a pre-computed data set derived from a query specification (the SELECT in the view definition) and stored for later use. Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view. This performance difference can be significant when a query is run frequently or is sufficiently complex. As a result, materialized views can speed up expensive aggregation, projection, and selection operations, especially those that run frequently and that run on large data sets.</p>
</blockquote>
<p>本文记录一项基于 <a href="https://github.com/apache/flink">Flink</a> &#x2F; <a href="https://github.com/apache/hudi">Hudi</a> &#x2F; <a href="https://github.com/apache/kafka">Kafka</a> &#x2F; <a href="https://github.com/pingcap/tiflow">TiCDC</a> 以及 <a href="https://github.com/pingcap/tidb">TiDB</a> 构建 <code>Materialized View</code>（物化视图，aka <code>MV</code>）的简易 demo。</p>
<span id="more"></span>

<p>相对于普通视图，MV 需要解决几个问题：</p>
<ul>
<li>数据一致性：TiDB 可以凭借全局唯一 <code>Time Stamp Oracle</code>（aka <code>TSO</code>） 来保障事务线性一致性。如果将 TiDB 作为数据源接入到第三方系统，需保障外部应用何种级别的一致性（无一致性，最终一致，线性一致）？如何解决多元异构数据源带来的一致性问题？</li>
<li>数据存储：如何支持可更新数据的存储？如何构建 MV 并维护状态？</li>
<li>数据加工：<code>ETL</code>（Extract Transform Load）流程是 OLAP 领域必不可少的一环，较常见的有拼宽表，字段过滤，类型转换，数据分区等。如何令 MV 支持可定制化的 ETL？如何以 <code>SQL</code>（Structured Query Language）形式支持外部定义？</li>
</ul>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><p>Flink 是目前业内广泛应用的流批一体处理平台，支持 SQL 的形式定义流式计算任务，为了方便搭建 demo，文中借助 Flink 来实现 ETL，构建并维护 MV。</p>
<ul>
<li>Flink 状态（state）是被定义在算子（operator&#x2F;task）中的空间，通过存储过去事件中的信息来影响未来事件的处理，即主要用于保存中间计算结果和缓存数据。<ul>
<li>Ref：<a href="https://flink.apache.org/2018/01/30/managing-large-state-in-apache-flink-an-intro-to-incremental-checkpointing">Managing Large State in Apache Flink: An Intro to Incremental Checkpointing</a></li>
</ul>
</li>
<li>Flink 有 2 种基本类型的状态：<ul>
<li>托管状态（Managed State）</li>
<li>原生状态（Raw State）：需要开发者自己管理，序列化&#x2F;反序列化；</li>
</ul>
</li>
<li>Flink 的分布式状态流（stateful stream）容错机制（通过 <a href="#Flink-Checkpointing">Checkpointing</a> 实现）较为完善，并可保证端到端 <code>exactly-once</code> 的状态转换（详见 <a href="#Flink-Consistency">Flink Consistency</a>）<ul>
<li>Ref：<a href="https://nightlies.apache.org/flink/flink-docs-master/docs/learn-flink/fault_tolerance">Fault Tolerance via State Snapshots</a></li>
</ul>
</li>
</ul>
<h4 id="Flink-Checkpointing"><a href="#Flink-Checkpointing" class="headerlink" title="Flink Checkpointing"></a>Flink Checkpointing</h4><p><a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/datastream/fault-tolerance/checkpointing">Checkpointing</a></p>
<ul>
<li>Flink 中的 checkpoint 表示应用（FlinkJob）的一致性快照，主要由 2 部分组成：应用的当前状态（相当于内部所有算子状态快照集合）；输入数据流中的偏移量；</li>
<li>Flink 按照规则和配置周期性生成 checkpoint，然后将 checkpoint 写入到可靠的存储中（通常为分布式文件系统）；将 checkpoint 写入存储为异步操作，也就意味着 Flink 应用的处理流程不会被 checkpointing 机制阻塞；</li>
<li>当异常发生时，Flink 使用最近一次完成的 checkpoint 作为状态的初始点来重启应用；</li>
<li>Flink 1.3 开始支持在 <code>rocksdb</code> 状态后端中使用 <code>增量快照（incremental checkpoint）</code>，可优化大状态（GB，TB 级状态）的场景；</li>
<li><a href="https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/deployment/config/">参考配置</a><ul>
<li><code>state.backend</code>：hashmap 或 rocksdb</li>
<li><code>state.checkpoints.dir</code></li>
<li><code>execution.checkpointing.interval</code></li>
<li><code>execution.checkpointing.mode</code></li>
<li><code>state.backend.incremental</code></li>
<li><code>state.backend.rocksdb.localdir</code>：参考 <a href="https://flink.apache.org/2021/01/18/using-rocksdb-state-backend-in-apache-flink-when-and-how/#state-location-in-rocksdb">state-location-in-rocksdb</a>，建议使用本地 SSD 磁盘来提升吞吐量；</li>
</ul>
</li>
</ul>
<h5 id="Checkpointing-实现"><a href="#Checkpointing-实现" class="headerlink" title="Checkpointing 实现"></a>Checkpointing 实现</h5><p><img src="https://nightlies.apache.org/flink/flink-docs-master/fig/stream_barriers.svg" alt="flink/flink-docs-master/fig/stream_barriers.svg"></p>
<p>Flink 使用 <a href="https://en.wikipedia.org/wiki/Chandy-Lamport_algorithm">Chandy-Lamport</a> 算法的一种变体，称为异步屏障快照（<code>asynchronous barrier snapshotting</code>）。</p>
<ul>
<li><p>当 task manager 接收到 job manager 的命令开启一个 checkpoint，它会让所有数据源记录自身的偏移量，并在数据流中插入按序编号的 <code>checkpoint barriers</code>，这些 barrier 流过作业图，用于指示 checkpoint 的边界；作业图中的每个算子接收到 barrier 时，会记录自身的状态；</p>
</li>
<li><p>checkpoint <code>n</code> 包含每个算子处理完 barrier <code>n</code> 之前所有数据和事件后的状态；</p>
</li>
<li><p>对于有多个输入流的算子，则会进行 <code>barrier alignment</code> 操作来对齐 barrier <img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/stream_aligning.svg" alt="flink_stream_aligning"></p>
<ul>
<li>对齐 barrier 可以减少状态快照的数据量；如图中所示，输入流在 barrier <code>n</code> 位置前均无待处理的数据，算子状态快照也就无需保存这类信息</li>
<li>对齐操作缺点：<ul>
<li>增大延迟（快的 barrier 需阻塞等待），拖慢 checkpointing 流程</li>
<li>面向类似双流 <code>equal-join</code> 的场景，可能因为输入流延迟不同而导致行为不符合预期<ul>
<li>例如预期被处理的数据对分别为 <code>(1,a)</code> <code>(2,b)</code> <code>(3,c)</code>。对齐 barrier 之后，则变成 <code>(1,e)</code> <code>(2,f)</code> <code>(3,g)</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>barrier 这类抽象可以引申为 checkpoint 的边界；明确的边界可以有效地避免冗余；面向 <code>unaligned barrier</code> 这类无明确边界的场景，则需要在状态快照中额外保存冗余数据：<img src="https://nightlies.apache.org/flink/flink-docs-release-1.12/fig/stream_unaligning.svg" alt="flink_unaligned_barrier"></p>
<ul>
<li>在 barrier 对齐的场景中，barrier 必须遵循其在数据流中的位置，算子需要等待 barrier 被实际处理才开始快照；对于 barrier 不对齐的场景，当任一数据流的 barrier 到达输入缓存，算子立即保存 3 部分数据至 checkpoint；然后将 barrier 优先放到输出缓存的队首；需保存的数据如下（例如图中绿色部分）：<ul>
<li>所有数据流中 barrier 之前的全部未处理数据；<ul>
<li>如果 barrier 尚未出现，需阻塞等待，因为此时数据流已持久化的 checkpoint 序号一定小于 barrier，异常后无法恢复；如果要处理该场景，则需要自定义应用的 checkpoint 机制，令数据流自身的 checkpoint 可独立控制；</li>
</ul>
</li>
<li>算子输入缓存中 barrier 之前的全部未处理数据；</li>
<li>算子输出缓存中的数据；</li>
</ul>
</li>
<li>不对齐 barrier 可以避免对齐造成的阻塞等待</li>
<li>从 checkpoint 恢复时，不对齐的数据会被 checkpoint 恢复到相应的数据队列中，所以依然能提供 <code>exactly-once</code> 保证</li>
<li>不对齐 barrier 的缺点：<ul>
<li>由于要持久化冗余数据，加重存储负载</li>
<li>随着 checkpoint 增大，可能增大作业恢复时间</li>
<li>适合容易产生高反压的复杂作业，但是对于像数据 ETL 同步等简单作业，可以选择轻量级的对齐处理。<ul>
<li>反压是在实时数据处理中，数据管道某个节点上游产生数据的速度大于该节点处理数据速度的一种现象。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Flink-Consistency"><a href="#Flink-Consistency" class="headerlink" title="Flink Consistency"></a>Flink Consistency</h4><p><a href="https://flink.apache.org/2018/02/28/an-overview-of-end-to-end-exactly-once-processing-in-apache-flink-with-apache-kafka-too/">An Overview of End-to-End Exactly-Once Processing in Apache Flink</a></p>
<p>Flink 的一致性可以分为 <code>3</code> 个级别，由弱到强依次为：</p>
<ol>
<li><code>at-most-once</code>：无一致性保障；</li>
<li><code>at-least-once</code>：数据或事件至少被处理一次（不丢失，有重复）；下游可实现幂等机制来保障一致性；</li>
<li><code>exactly-once</code>：数据或事件只会被处理一次（不丢失，不重复）；</li>
</ol>
<p>每个组件都保证其自身的一致性，端到端的一致性级别取决于所有组件中一致性最弱的。倘若要实现 <code>exactly-once</code> 一致性，以最简单的端到端处理部分为例：</p>
<ul>
<li>总体分为 3 个部分，数据流向：<code>source -&gt; internal -&gt; sink</code></li>
<li><code>source</code>：需要外部源可指定数据读取的位置（例如 Kafka 消息队列）<ul>
<li>位置信息作为状态的一部分，异常恢复时可重新开始消费；</li>
</ul>
</li>
<li><code>internal</code>：<a href="#Flink-Checkpointing">Checkpointing</a> 机制；</li>
<li><code>sink</code>：需要保证从故障恢复时，数据不会重复写入外部系统；sink 端有 2 种具体实现方式：<ul>
<li><code>幂等（Idempotent）</code>写入：操作可以重复执行很多次，但只导致一次结果更改</li>
<li><code>事务性（Transactional）</code>写入：一个事务中的操作要么全部成功，要么全部失败<ul>
<li>应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤销；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>sink 端事务性写入实现：</p>
<ul>
<li>外部 sink 系统必须支持事务性写入（构建的事务需要与 checkpoint 对应），等 checkpoint 完成时，才把所有对应的结果写入外部系统；</li>
<li>对于事务性写入，具体有 2 种实现方式：<ul>
<li><code>预写日志（WAL）</code><ul>
<li>把结果数据保存到状态中作为 WAL，等 checkpoint 完成时再写入下游；<ul>
<li>具体的写入行为可视作基于 WAL 的幂等回放；</li>
</ul>
</li>
<li>该方式易于实现，但存在几个缺点：<ul>
<li>导致状态数据量增大，增加存储负载；</li>
<li>写入需要等到 checkpoint 完成，会导致数据延迟；</li>
</ul>
</li>
</ul>
</li>
<li><code>两阶段提交（2PC）</code><ul>
<li>checkpoint 启动时开启 sink 系统的事务</li>
<li>结果数据写入该事务，但不提交</li>
<li>等 checkpoint 完成时，提交该事务，实现真正写入</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>2PC 实现：</p>
<ul>
<li>事务启动：外部 sink 系统开启一个事务，并与 checkpoint <code>n</code> 相关联</li>
<li>事务预写：事务在 checkpoint <code>n</code> 范围内接受数据预写入</li>
<li>事务提交：<ul>
<li>sink 任务处理 barrier <code>n</code> 时，等事务可变成 <code>可提交</code> 的状态后，再保存状态快照。</li>
<li>所有子任务状态快照保存完毕，表示 checkpoint <code>n</code> 已完成。<ul>
<li>出现异常后应用则恢复至该 checkpoint，sink 任务需要恢复该事务并提交。</li>
</ul>
</li>
<li>上游广播通知 checkpoint <code>n</code> 完成，sink 任务正式提交该事务。</li>
<li>提交事务的行为必须是幂等操作。<ul>
<li>Flink 从 checkpoint 故障恢复时总会尝试提交相关事务（通过冗余来实现容错，否则需要存储额外的信息表示事务状态）</li>
</ul>
</li>
</ul>
</li>
<li>事务撤回</li>
</ul>
<h4 id="Flink-Incremental-Materialized-View"><a href="#Flink-Incremental-Materialized-View" class="headerlink" title="Flink Incremental Materialized View"></a>Flink Incremental Materialized View</h4><p>增量物化视图（<code>Incremental Materialized View</code>，aks <code>IMV</code>） 本质上等同于 Flink 中的一个有状态算子，以 <a href="#Example4-Consistency-Aggregation-Materialized-View">Example4</a> 为例：</p>
<ul>
<li>ETL 定义的处理流程为 <code>select b, sum(a) from ... group by b</code></li>
<li>输入 source 为 Kafka 消息队列，输出 sink 系统为 Hudi</li>
<li>算子状态包含以 <code>b</code> 字段为 Key，<code>sum(a)</code> 为 Value 的基本元素，状态数据量与 Key 数量呈正相关</li>
<li><code>sum()</code> 聚合可通过累加中间结果得到最终值，因而能够增量维护<ul>
<li>输入数据为 upsert 类型，则累加 <code>a</code> 字段新旧值的差值</li>
<li>输入数据为 delete 类型，则减去旧值</li>
</ul>
</li>
<li>状态的实际存储后端可选：内存&#x2F;文件&#x2F;rocksdb<ul>
<li>建议配置为 rocksdb 后段，增量快照面对大状态 checkpointing 较为高效</li>
</ul>
</li>
<li>输入&#x2F;输出系统满足 <code>exactly-once</code> 的基本要求，整体上该应用可保证 <code>exactly-once</code> 一致性</li>
</ul>
<p><code>min()</code> &#x2F; <code>max()</code> 函数不支持直接累加，其状态机维护类似于 <code>select col_?, count(*) from ? group by col_? order by col_? [desc] limit 1</code>，当 count 为 0 时则删除相关元素。</p>
<p><code>avg()</code> 函数则类似 <code>select sum(col_?), count(col_?) from ?</code>，对外输出时再执行算数除法。</p>
<p><code>distinct()</code> 函数则类似 <code>select count(*) from (select col_?, count(*) from ? group by col_?)</code>。</p>
<p>Join 场景下的 IMV 维护与上面类似，主要不同体现在数据源的构造和处理流程上。Flink 本身提供的 <a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/table/sql/queries/joins/">Join</a> 类型大致分为：</p>
<ul>
<li>Regular join<ul>
<li>left join</li>
<li>right join</li>
<li>inner join（默认类型）</li>
<li>outer join</li>
</ul>
</li>
<li>Interval Join</li>
<li>Temporal Join</li>
<li>Lookup Join（在 <a href="#Example5-Consistency-Inner-Join-amp-Aggregation-Materialized-View">Example5</a> 被使用）</li>
<li>Window Join</li>
</ul>
<p><code>Interval Join</code> 和 <code>Window Join</code> 属于比较典型的流式计算场景下的功能，需要外部约束来保证数据一致性。</p>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>Hudi 作为下一代数据湖产品，加强了对于数据更新的支持。其不仅兼容 Hadoop 系的数仓生态，而且与 Flink 的衔接也较为完善。文中以 Hudi 和 HDFS 作为 MV 相关的数据存储系统。</p>
<p><a href="https://hudi.apache.org/docs/0.12.3/flink_configuration">Flink 相关参数</a></p>
<ul>
<li><code>write.tasks</code>：写任务的并行度</li>
<li><code>write.bucket_assign.tasks</code>：当 <code>index.type</code> 为 <code>FLINK_STATE</code> 时，覆盖 <code>write.tasks</code></li>
</ul>
<p><a href="https://hudi.apache.org/docs/0.12.3/hoodie_deltastreamer#bucket-index">Bucket Index</a>: Flink 默认使用状态后端来存储文件索引（<code>primary key -&gt; fileId</code>）。当输入数据量较大时，状态相关的开销容易成为性能瓶颈。<code>BUCKET</code> 的方式通过确定性 hash 算法来讲数据映射到 buckets 中，从而避免了建立索引过程中的存储&#x2F;查询相关的开销。</p>
<ul>
<li><code>index.type</code>：<code>FLINK_STATE</code>(default), <code>BUCKET</code></li>
<li><code>hoodie.bucket.index.hash.field</code></li>
<li><code>hoodie.bucket.index.num.buckets</code></li>
</ul>
<h3 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h3><p>TiCDC 是一款 TiDB 增量数据同步工具，通过拉取上游 TiKV 的数据变更日志，TiCDC 可以将数据解析为有序的行级变更数据输出到下游。</p>
<ul>
<li>借助 Kafka 实现存量数据和增量数据的线性一致。该方式会引入额外的数据同步开销，实际场景中则可以通过存量数据构建 MV Base 部分，利用增量数据构建 MV Delta 部分。详见 <a href="#Example3-Consistency">Example3</a>，<a href="#Example4-Consistency-Aggregation-Materialized-View">Example4</a>，<a href="#Example5-Consistency-Inner-Join-amp-Aggregation-Materialized-View">Example5</a><ul>
<li>先选取构建 TiCDC 任务时的 TSO 作为快照点 <code>S</code>，令导出增量数据到 Topic <code>I</code>；</li>
<li>利用 Dumpling 导出 <code>S</code> 对应的存量数据并同步到新 Topic <code>B</code>，该步骤完成后再提交异步任务，将 <code>I</code> 的数据持续同步到 <code>B</code>；</li>
<li>下游 Flink 则只消费 <code>B</code>；</li>
<li><code>I</code> 和 <code>B</code> 均只有 <code>1</code> 个 Partition 以保证线性一致性；</li>
</ul>
</li>
<li><strong>Option</strong>：理论上 TiCDC 还可支持将 <code>DDL</code> 和 <code>DML</code> 的 <code>commit-ts</code> 通过 <a href="https://docs.pingcap.com/tidb/dev/ticdc-canal-json#tidb-extension-field">ticdc-canal-json#tidb-extension-field</a> 字段导出，令下游根据 ts 还原事务上下文。这类流程需要自定义 Flink 插件实现，不在本 demo 的展示范围。</li>
</ul>
<p>假如可以保证单表数据源的事务线性一致性，且写入当量可控，则线性一致的单表 IMV 实现并不复杂。但如果涉及到多表 Join，则关联数据造成的写入放大就很难控制（极端情况例如笛卡尔积），对于事务的相关处理也需要考虑多方场景。通常的 OLAP 场景都存有基本假设：</p>
<ul>
<li>或维度表不更新</li>
<li>或维度表写入模式为 <code>Insert Only</code></li>
<li>或关联数据写放大可控</li>
<li>或数据源保证线性一致性<ul>
<li>或数据源严格依照事务顺序排序</li>
<li>或数据源可根据事务相关序列标识（例如 TiDB 体系的 <code>commit-ts</code>）回溯上下文</li>
</ul>
</li>
<li>或仅考虑最终一致性</li>
<li>或不考虑一致性</li>
</ul>
<p>本文中给出的 Join 实现较为简单，仅令维度表写入模式为 <code>Insert Only</code>，数据关联时则令下游直接回溯上游 TiDB 原始数据。</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>install basic components</p>
<ul>
<li>install <code>mysql</code>, <code>python3</code>, <code>git</code>, <code>java-1.8.0-openjdk</code>, <code>maven</code>, <code>docker</code>, <code>golang</code></li>
<li><code>pip3 install requests mysql-connector-python minio</code></li>
<li>disable <code>firewalld</code></li>
<li><code>sudo root</code></li>
</ul>
<p>prepare source code</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="variable">$&#123;self_deploy_path&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_deploy_path&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/hudi.git</span><br><span class="line"><span class="built_in">cd</span> hudi</span><br><span class="line">git checkout release-0.12.3</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_deploy_path&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/solotzg/__tmp.git</span><br><span class="line">self_demo_scripts_path=<span class="variable">$&#123;self_deploy_path&#125;</span>/__tmp</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_deploy_path&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/flink.git</span><br><span class="line"><span class="built_in">cd</span> flink</span><br><span class="line">git checkout release-1.13.6</span><br></pre></td></tr></table></figure>

<p>prepare hudi</p>
<ul>
<li>set <code>JAVA_HOME</code> to jdk 1.8 like <code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.372.b07-2.el9.x86_64</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line"><span class="built_in">mkdir</span> .tmp.env_libs</span><br><span class="line"><span class="built_in">export</span> self_demo_env_libs=<span class="variable">$&#123;self_demo_scripts_path&#125;</span>/.tmp.env_libs</span><br><span class="line">JAVA_HOME=<span class="string">&quot;xxxxxx&quot;</span> ./setup-demo.py --cmd compile_hudi --hudi_repo=<span class="variable">$&#123;self_deploy_path&#125;</span>/hudi</span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$&#123;self_deploy_path&#125;</span>/hudi/packaging/hudi-flink-bundle/target/hudi-flink1.13-bundle-0.12.3.jar <span class="variable">$&#123;self_demo_env_libs&#125;</span></span><br><span class="line"></span><br><span class="line">curl https://repo.maven.apache.org/maven2/com/amazonaws/aws-java-sdk/1.10.34/aws-java-sdk-1.10.34.jar -o <span class="variable">$&#123;self_demo_env_libs&#125;</span>/aws-java-sdk-1.10.34.jar</span><br><span class="line">curl https://repo.maven.apache.org/maven2/org/apache/hadoop/hadoop-aws/2.7.3/hadoop-aws-2.7.3.jar -o <span class="variable">$&#123;self_demo_env_libs&#125;</span>/hadoop-aws-2.7.3.jar</span><br></pre></td></tr></table></figure>

<p>prepare flink</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flink_repo_path=<span class="variable">$&#123;self_deploy_path&#125;</span>/flink</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;flink_repo_path&#125;</span>/flink-connectors/flink-sql-connector-kafka</span><br><span class="line">mvn clean package -DskipTests -Drat.skip=<span class="literal">true</span></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$&#123;flink_repo_path&#125;</span>/flink-connectors/flink-sql-connector-kafka/target/flink-sql-connector-kafka_2.11-1.13.6.jar <span class="variable">$&#123;self_demo_env_libs&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;flink_repo_path&#125;</span>/flink-connectors/flink-connector-jdbc</span><br><span class="line">mvn clean package -DskipTests -Drat.skip=<span class="literal">true</span></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$&#123;flink_repo_path&#125;</span>/flink-connectors/flink-connector-jdbc/target/flink-connector-jdbc_2.11-1.13.6.jar <span class="variable">$&#123;self_demo_env_libs&#125;</span></span><br></pre></td></tr></table></figure>

<p>prepare mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar -o <span class="variable">$&#123;self_demo_env_libs&#125;</span>/mysql-connector-java-8.0.20.jar</span><br></pre></td></tr></table></figure>

<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><ul>
<li>use <code>12345</code> as the start port for different components</li>
<li>use <code>release-7.1</code> as the version of tidb cluster</li>
<li>set a <code>compose_project_name</code> for docker compose env. otherwise <code>pingcap</code> will be the default value</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line">./setup-demo.py --cmd deploy_hudi_flink_tidb --start_port=12345 --env_libs=<span class="variable">$&#123;self_demo_env_libs&#125;</span> --hudi_repo=<span class="variable">$&#123;self_deploy_path&#125;</span>/hudi --tidb_branch=release-7.1 --compose_project_name=<span class="variable">$&#123;self_project_name&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="show-env-vars-info"><a href="#show-env-vars-info" class="headerlink" title="show env vars info"></a>show env vars info</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line">./setup-demo.py --cmd show_env_vars_info</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;flink_jobmanager_port&quot;</span>: 12345,</span><br><span class="line">    <span class="string">&quot;hadoop_web_port&quot;</span>: 12346,</span><br><span class="line">    <span class="string">&quot;hdfs_port&quot;</span>: 12347,</span><br><span class="line">    <span class="string">&quot;historyserver_port&quot;</span>: 12348,</span><br><span class="line">    <span class="string">&quot;hiveserver_port&quot;</span>: 12349,</span><br><span class="line">    <span class="string">&quot;kafka_port&quot;</span>: 12350,</span><br><span class="line">    <span class="string">&quot;spark_master_port&quot;</span>: 12351,</span><br><span class="line">    <span class="string">&quot;spark_web_port&quot;</span>: 12352,</span><br><span class="line">    <span class="string">&quot;HUDI_WS&quot;</span>: <span class="string">&quot;/.../demo/hudi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pingcap_demo_path&quot;</span>: <span class="string">&quot;/.../demo/pingcap-lakehouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;env_libs&quot;</span>: <span class="string">&quot;/.../demo/pingcap-lakehouse/.tmp.env_libs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hufi-flink-compose&quot;</span>: <span class="string">&quot;/.../demo/pingcap-lakehouse/.tmp.docker-compose_hadoop_hive_spark_flink.yml&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hudi_flink_running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;pd_port&quot;</span>: 12353,</span><br><span class="line">    <span class="string">&quot;ticdc_port&quot;</span>: 12354,</span><br><span class="line">    <span class="string">&quot;tidb_port&quot;</span>: 12355,</span><br><span class="line">    <span class="string">&quot;tikv_status_port&quot;</span>: 12356,</span><br><span class="line">    <span class="string">&quot;TIDB_BRANCH&quot;</span>: <span class="string">&quot;release-7.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tidb-compose&quot;</span>: <span class="string">&quot;/.../demo/pingcap-lakehouse/.tmp.tidb-cluster.yml&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tidb_running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;demo_host&quot;</span>: <span class="string">&quot;10.2.12.125&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start_port&quot;</span>: 12345,</span><br><span class="line">    <span class="string">&quot;JAVA_HOME&quot;</span>: <span class="string">&quot;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.372.b07-2.el9.x86_64&quot;</span>,</span><br><span class="line">    <span class="string">&quot;etl_jobs&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;COMPOSE_PROJECT_NAME&quot;</span>: <span class="string">&quot;pingcap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;LAKE_HOUSE_COMPOSE_PROJECT_NAME&quot;</span>: <span class="string">&quot;pingcap_lakehouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;TIDB_COMPOSE_PROJECT_NAME&quot;</span>: <span class="string">&quot;pingcap_tidb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hudi_compiled&quot;</span>: <span class="string">&quot;2023-07-03 13:49:42.261539&quot;</span>,</span><br><span class="line">    <span class="string">&quot;FLINK_VERSION&quot;</span>: <span class="string">&quot;1.13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;KAFKA_VERSION&quot;</span>: <span class="string">&quot;2.4.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="list-etl-jobs"><a href="#list-etl-jobs" class="headerlink" title="list etl jobs"></a>list etl jobs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_etl_jobs</span><br></pre></td></tr></table></figure>

<h4 id="list-ticdc-jobs"><a href="#list-ticdc-jobs" class="headerlink" title="list ticdc jobs"></a>list ticdc jobs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_ticdc_jobs</span><br></pre></td></tr></table></figure>

<h4 id="list-flink-jobs"><a href="#list-flink-jobs" class="headerlink" title="list flink jobs"></a>list flink jobs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_flink_jobs</span><br></pre></td></tr></table></figure>

<h4 id="list-kafka-topics"><a href="#list-kafka-topics" class="headerlink" title="list kafka topics"></a>list kafka topics</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_kafka_topics</span><br></pre></td></tr></table></figure>

<h4 id="remove-etl-job"><a href="#remove-etl-job" class="headerlink" title="remove etl job"></a>remove etl job</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_etl_job --etl_job_id etl1</span><br></pre></td></tr></table></figure>

<h4 id="remove-ticdc-job"><a href="#remove-ticdc-job" class="headerlink" title="remove ticdc job"></a>remove ticdc job</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_ticdc_job --cdc_changefeed_id etl1-sink-1</span><br></pre></td></tr></table></figure>

<h4 id="remove-hdfs-dir"><a href="#remove-hdfs-dir" class="headerlink" title="remove hdfs dir"></a>remove hdfs dir</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_hdfs_dir --hdfs_url=hdfs://namenode:8020/a/b/c</span><br></pre></td></tr></table></figure>

<h4 id="remove-kafka-topic"><a href="#remove-kafka-topic" class="headerlink" title="remove kafka topic"></a>remove kafka topic</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_kafka_topic --kafka_topic etl3-sink-3</span><br></pre></td></tr></table></figure>

<h4 id="remove-flink-job"><a href="#remove-flink-job" class="headerlink" title="remove flink job"></a>remove flink job</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_flink_job --flink_job_id 8f488441a8c155eca62655927cb1c02e</span><br></pre></td></tr></table></figure>

<h4 id="remove-all-jobs"><a href="#remove-all-jobs" class="headerlink" title="remove all jobs"></a>remove all jobs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd rm_all_jobs</span><br></pre></td></tr></table></figure>

<h4 id="list-all-hobs"><a href="#list-all-hobs" class="headerlink" title="list all hobs"></a>list all hobs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_all_jobs</span><br></pre></td></tr></table></figure>

<h4 id="down-demo-cluster"><a href="#down-demo-cluster" class="headerlink" title="down demo cluster"></a>down demo cluster</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line">./setup-demo.py --cmd=down_tidb</span><br><span class="line">./setup-demo.py --cmd=down_hudi_flink</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you need to down tidb, hudi, flink at same time, use:</span></span><br><span class="line">./setup-demo.py --cmd=down</span><br></pre></td></tr></table></figure>

<h4 id="clean-all"><a href="#clean-all" class="headerlink" title="clean all"></a>clean all</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd=clean</span><br></pre></td></tr></table></figure>

<h4 id="display-cluster"><a href="#display-cluster" class="headerlink" title="display cluster"></a>display cluster</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd list_cluster_env</span><br></pre></td></tr></table></figure>

<h3 id="Run-With-External-TiDB-Cluster"><a href="#Run-With-External-TiDB-Cluster" class="headerlink" title="Run With External TiDB Cluster"></a>Run With External TiDB Cluster</h3><p><code>Required argv</code></p>
<ul>
<li>cdc_bin_path</li>
<li>ticdc_addr</li>
<li>tidb_addr</li>
</ul>
<p><code>Optional argv</code></p>
<ul>
<li>dumpling_bin_path</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd sink_task --sink_task_desc=<span class="string">&quot;etl3.3.demo.t3&quot;</span> --sink_task_flink_schema_path ./example3/flink.sql.template --cdc_bin_path=/.../pingcap-lakehouse-demo/cdc --ticdc_addr=10.2.12.124:12354 --tidb_addr=10.2.12.124:12355</span><br><span class="line">./setup-demo.py --cmd rm_all_jobs --cdc_bin_path=/.../pingcap-lakehouse-demo/cdc --ticdc_addr=10.2.12.124:12354 --tidb_addr=10.2.12.124:12355 --dumpling_bin_path=/tmp/bin/dumpling</span><br></pre></td></tr></table></figure>

<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p><a href="https://nightlies.apache.org/flink/flink-docs-release-1.18/docs/dev/table/sqlclient/#sql-client">Flink SQL Client</a>:</p>
<ul>
<li><code>SET table.dml-sync=true;</code> is necessary if you need to execute DML statements synchronously. It is useful to load data from external files.</li>
<li><code>create table ? with(&#39;connector&#39;=&#39;kafka&#39;, ..., &#39;scan.startup.mode&#39;=&#39;earliest-offset&#39;);</code> use earliest-offset mode to avoid losing data.</li>
<li><code>SET sql-client.execution.result-mode=TABLEAU;</code><ul>
<li>The tableau mode is more like a traditional way which will display the results in the screen directly with a tableau format. The displaying content will be influenced by the query execution type (execution.type).</li>
</ul>
</li>
<li><code>SET execution.runtime-mode=&#39;batch&#39;;</code> use batch mode to make flink agg sql <code>select count() | min() | max()</code> only show the final result</li>
</ul>
<p>kafka</p>
<ul>
<li>To run kafka without zookeeper, it can be using with Kafka Raft metadata mode: <a href="https://developer.confluent.io/learn/kraft/">KRaft</a><ul>
<li><code>Kafka 3.3.1</code>: Mark KRaft as Production Ready</li>
</ul>
</li>
</ul>
<h2 id="Example1-Sink-Incremental-Data"><a href="#Example1-Sink-Incremental-Data" class="headerlink" title="Example1: Sink Incremental Data"></a>Example1: Sink Incremental Data</h2><p>create an example tidb table</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line"><span class="comment"># tidb_port: 12355</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root &lt; example/tidb.sql</span><br><span class="line"></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select * from demo.t1&quot;</span></span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 1 |    1 |</span><br><span class="line">| 2 |    2 |</span><br><span class="line">| 3 |    3 |</span><br><span class="line">| 4 |    4 |</span><br><span class="line">+---+------+</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> example/tidb.sql</span><br><span class="line"></span><br><span class="line">create database IF NOT EXISTS demo;</span><br><span class="line">create table IF NOT EXISTS demo.t1(a int PRIMARY KEY, b int);</span><br><span class="line">insert into demo.t1 values(1,1),(2,2),(3,3);</span><br><span class="line">insert into demo.t1 (select max(a)+1,max(a)+1 from demo.t1);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>create a template for flink and hudi like <code>example/flink.sql.template</code></p>
<ul>
<li>necessary fields:<ul>
<li>${kafka_topic}</li>
<li>${kafka_address}</li>
<li>${hdfs_address}</li>
</ul>
</li>
</ul>
<p>create sink table task</p>
<ul>
<li><code>sink_task_desc</code>: <code>format: etl_uid.table_id.db_name.table_name</code>. sink tidb table: <code>ticdc -&gt; kafka -&gt; flink -&gt; hudi</code></li>
<li><code>sink_task_flink_schema_path</code>: path to sql file include table schema for flink and hudi</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;self_demo_scripts_path&#125;</span></span><br><span class="line">./setup-demo.py --cmd=sink_task --sink_task_desc=<span class="string">&quot;etl1.1.demo.t1&quot;</span> --sink_task_flink_schema_path=<span class="string">&quot;<span class="variable">$&#123;self_demo_scripts_path&#125;</span>/example/flink.sql.template&quot;</span> --env_libs=<span class="variable">$&#123;self_demo_env_libs&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>setup-demo.py</code> 自动填上相关字段并生成文件 <code>.tmp.flink.sink-&#123;etl_uid&#125;-&#123;table_id&#125;-&#123;db&#125;.&#123;table_name&#125;.sql</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo_flink;</span><br><span class="line"><span class="keyword">set</span> execution.checkpointing.interval <span class="operator">=</span> <span class="number">2</span>sec;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> demo_flink.t1(a <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY, b <span class="type">int</span>) <span class="keyword">with</span>(<span class="string">&#x27;connector&#x27;</span><span class="operator">=</span><span class="string">&#x27;kafka&#x27;</span>, <span class="string">&#x27;topic&#x27;</span><span class="operator">=</span><span class="string">&#x27;etl1-sink-1&#x27;</span>, <span class="string">&#x27;properties.bootstrap.servers&#x27;</span><span class="operator">=</span><span class="string">&#x27;kafkabroker:9092&#x27;</span>, <span class="string">&#x27;properties.group.id&#x27;</span><span class="operator">=</span><span class="string">&#x27;pingcap-demo-group&#x27;</span>, <span class="string">&#x27;format&#x27;</span><span class="operator">=</span><span class="string">&#x27;canal-json&#x27;</span>, <span class="string">&#x27;scan.startup.mode&#x27;</span><span class="operator">=</span><span class="string">&#x27;latest-offset&#x27;</span>);</span><br><span class="line"><span class="keyword">create</span> database demo_hudi;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t1(</span><br><span class="line">  a <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line">  b <span class="type">INT</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">  <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/hudi/etl1-sink-1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;read.streaming.enabled&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;read.streaming.check-interval&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> demo_hudi.t1(a,b) (<span class="keyword">select</span> a,b <span class="keyword">from</span> demo_flink.t1);</span><br></pre></td></tr></table></figure>

<ul>
<li>get new files: <code>.tmp.flink.sink-etl1-1-demo.t1.sql</code>; <code>.tmp.ticdc-config-etl1-1-demo.t1.toml</code></li>
</ul>
<p>insert record to tidb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;insert into demo.t1 values(9,9),(10,10)&quot;</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>use flink client to query <code>demo_hudi.t1</code>, use flink client and get 2 incremental records <code>(9,9),(10,10)</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cd $&#123;self_demo_scripts_path&#125;</span><br><span class="line">.<span class="operator">/</span>run<span class="operator">-</span>flink<span class="operator">-</span>bash.sh <span class="operator">/</span>pingcap<span class="operator">/</span>demo<span class="operator">/</span>flink<span class="operator">-</span><span class="keyword">sql</span><span class="operator">-</span>client.sh</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> database demo_hudi;</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t1(</span><br><span class="line"><span class="operator">&gt;</span>   a <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span>   b <span class="type">INT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/hudi/etl1-sink-1&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;read.streaming.enabled&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;read.streaming.check-interval&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">&gt;</span> </span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode <span class="operator">=</span> tableau;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">9</span> <span class="operator">|</span>           <span class="number">9</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<p>update <code>demo.t1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;update demo.t1 set b=a*10;&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;delete from demo.t1 where a &lt; 3&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select * from demo.t1&quot;</span>     </span><br><span class="line">+----+------+</span><br><span class="line">| a  | b    |</span><br><span class="line">+----+------+</span><br><span class="line">|  3 |   30 |</span><br><span class="line">|  4 |   40 |</span><br><span class="line">|  9 |   90 |</span><br><span class="line">| 10 |  100 |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure>

<p>use flink client and disable <code>read.streaming.enabled</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> demo_hudi.t1;</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t1(</span><br><span class="line"><span class="operator">&gt;</span>   a <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span>   b <span class="type">INT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/hudi/etl1-sink-1&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span>   <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>          <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">9</span> <span class="operator">|</span>          <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">6</span> <span class="keyword">rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;delete from demo.t1 where a &lt; 3&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">9</span> <span class="operator">|</span>          <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure>

<h2 id="Example2-ETL"><a href="#Example2-ETL" class="headerlink" title="Example2: ETL"></a>Example2: ETL</h2><p>sink tables and store parts of columns by partition</p>
<ul>
<li><code>example2/tidb.sql</code></li>
<li><code>example2/flink.sql.template</code><ul>
<li>partition by <code>DATE_FORMAT(b, &#39;yyyyMMdd&#39;)</code> as partition</li>
<li><code>INSERT INTO demo_hudi.t2(a,b,partition) (select a, b, DATE_FORMAT(b, &#39;yyyyMMdd&#39;) as partition from demo_flink.t2 where c is not null);</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root &lt; example2/tidb.sql</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select *from demo.t2&quot;</span></span><br><span class="line">+---+---------------------+------+</span><br><span class="line">| a | b                   | c    |</span><br><span class="line">+---+---------------------+------+</span><br><span class="line">| 1 | 2023-06-13 05:07:40 | 1    |</span><br><span class="line">| 2 | 2023-06-13 05:07:40 | 2    |</span><br><span class="line">| 3 | 2023-06-13 05:07:40 | NULL |</span><br><span class="line">+---+---------------------+------+</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;update demo.t2 set c=a*10&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select * from demo.t2&quot;</span></span><br><span class="line">+---+---------------------+------+</span><br><span class="line">| a | b                   | c    |</span><br><span class="line">+---+---------------------+------+</span><br><span class="line">| 1 | 2023-06-13 05:07:40 | 10   |</span><br><span class="line">| 2 | 2023-06-13 05:07:40 | 20   |</span><br><span class="line">| 3 | 2023-06-13 05:07:40 | 30   |</span><br><span class="line">| 4 | 2023-06-13 05:19:52 | 40   |</span><br><span class="line">| 5 | 2023-06-13 05:19:52 | 50   |</span><br><span class="line">+---+---------------------+------+</span><br></pre></td></tr></table></figure>

<p>create sink table etl job</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd sink_task --sink_task_desc=<span class="string">&quot;etl2.2.demo.t2&quot;</span> --sink_task_flink_schema_path ./example2/flink.sql.template</span><br></pre></td></tr></table></figure>

<p>insert 2 records (4,’4’) and (5, null)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;insert into demo.t2 (a,c) values (4,&#x27;4&#x27;),(5, null)&quot;</span></span><br></pre></td></tr></table></figure>

<p>query by flink client</p>
<ul>
<li>ref <code>.tmp.flink.sink-etl2-2-demo.t2.sql</code></li>
<li>ref content above</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.<span class="operator">/</span>run<span class="operator">-</span>flink<span class="operator">-</span>bash.sh <span class="operator">/</span>pingcap<span class="operator">/</span>demo<span class="operator">/</span>flink<span class="operator">-</span><span class="keyword">sql</span><span class="operator">-</span>client.sh</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> database demo_hudi;</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t2(</span><br><span class="line"><span class="operator">&gt;</span> a <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span> b <span class="type">TIMESTAMP</span>(<span class="number">3</span>),</span><br><span class="line"><span class="operator">&gt;</span> `<span class="keyword">partition</span>` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line"><span class="operator">&gt;</span> )</span><br><span class="line"><span class="operator">&gt;</span> PARTITIONED <span class="keyword">BY</span> (`<span class="keyword">partition</span>`)</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/hudi_t2&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode <span class="operator">=</span> tableau;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- record with a = 5 and c is null will be filtered</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t2;</span><br><span class="line"><span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">25</span>:<span class="number">38</span>,<span class="number">525</span> INFO  org.apache.hadoop.conf.Configuration.deprecation             [] <span class="operator">-</span> mapred.job.map.memory.mb <span class="keyword">is</span> deprecated. Instead, use mapreduce.map.memory.mb</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>                       b <span class="operator">|</span>                      <span class="keyword">partition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">52.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">1</span> <span class="type">row</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t2 set c=a*10&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>                       b <span class="operator">|</span>                      <span class="keyword">partition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">07</span>:<span class="number">40.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">07</span>:<span class="number">40.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">07</span>:<span class="number">40.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">52.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-06</span><span class="number">-13</span> <span class="number">05</span>:<span class="number">19</span>:<span class="number">52.000</span> <span class="operator">|</span>                       <span class="number">20230613</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------------------+--------------------------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">5</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure>

<h2 id="Example3-Consistency"><a href="#Example3-Consistency" class="headerlink" title="Example3: Consistency"></a>Example3: Consistency</h2><p>sink historical and incremental data of table to flink then hudi</p>
<ul>
<li><code>example3/tidb.sql</code></li>
<li><code>example3/flink.sql.template</code><ul>
<li>use filesystem of flink to upsert data into base kafka topic</li>
<li>upsert incremental data from self-defined kafka into base kafka topic</li>
<li>create <code>hoodie_stream_write</code> and upsert incremental data from base kafka topic</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root &lt; example3/tidb.sql</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select *from demo.t3&quot;</span></span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 1 |    1 |</span><br><span class="line">| 2 |    2 |</span><br><span class="line">| 3 |    3 |</span><br><span class="line">| 4 |    4 |</span><br><span class="line">+---+------+</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;update demo.t3 set b=a*10&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select * from demo.t3&quot;</span></span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 1 |   10 |</span><br><span class="line">| 2 |   20 |</span><br><span class="line">| 3 |   30 |</span><br><span class="line">| 4 |   40 |</span><br><span class="line">+---+------+</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;delete from demo.t3 where a &lt; 3&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select* from demo.t3&quot;</span></span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 3 |   30 |</span><br><span class="line">| 4 |   40 |</span><br><span class="line">+---+------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.<span class="operator">/</span>run<span class="operator">-</span>flink<span class="operator">-</span>bash.sh <span class="operator">/</span>pingcap<span class="operator">/</span>demo<span class="operator">/</span>flink<span class="operator">-</span><span class="keyword">sql</span><span class="operator">-</span>client.sh</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> database demo_hudi;</span><br><span class="line"><span class="operator">&gt;</span></span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t3(</span><br><span class="line"><span class="operator">&gt;</span> a <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span> b <span class="type">INT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/etl3-sink-3&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">&gt;</span></span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode <span class="operator">=</span> tableau;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- read 4 records which are historical data</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t3 set b=a*10&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>          <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;delete from demo.t3 where a &lt; 3&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           a <span class="operator">|</span>           b <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>          <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>          <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------------+</span></span><br><span class="line">Received a total <span class="keyword">of</span> <span class="number">2</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure>

<h2 id="Example4-Consistency-Aggregation-Materialized-View"><a href="#Example4-Consistency-Aggregation-Materialized-View" class="headerlink" title="Example4: Consistency Aggregation Materialized View"></a>Example4: Consistency Aggregation Materialized View</h2><p>sink tables and calculate incremental aggregation result</p>
<ul>
<li><code>example4/tidb.sql</code></li>
<li><code>example4/flink.sql.template</code><ul>
<li>dump data of table <code>demo.t4</code> into csv file</li>
<li>load csv file into kafka topic <code>etl4-sink-4_base</code></li>
<li>sink incremental data to <code>etl4-sink-4</code></li>
<li>sink topic <code>etl4-sink-4</code> into topic <code>etl4-sink-4_base</code></li>
<li>ticdc -&gt; kafka -&gt; flink streaming aggregation -&gt; hudi: <code>insert into demo_hudi.t4_agg (c,d) (select b, sum(a) from demo_flink.t4 group by b);</code></li>
</ul>
</li>
</ul>
<p>create sink table etl job</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup-demo.py --cmd sink_task --sink_task_desc=<span class="string">&quot;etl4.4.demo.t4&quot;</span> --sink_task_flink_schema_path ./example4/flink.sql.template</span><br></pre></td></tr></table></figure>

<p>run tidb sql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root &lt; example4/tidb.sql</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select * from demo.t4&quot;</span></span><br><span class="line">+---+------+</span><br><span class="line">| a | b    |</span><br><span class="line">+---+------+</span><br><span class="line">| 1 |    1 |</span><br><span class="line">| 2 |    2 |</span><br><span class="line">| 3 |    3 |</span><br><span class="line">| 4 |    4 |</span><br><span class="line">+---+------+</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;select b, sum(a) from demo.t4 group by b&quot;</span></span><br><span class="line">+------+--------+</span><br><span class="line">| b    | <span class="built_in">sum</span>(a) |</span><br><span class="line">+------+--------+</span><br><span class="line">|    2 |      2 |</span><br><span class="line">|    4 |      4 |</span><br><span class="line">|    1 |      1 |</span><br><span class="line">|    3 |      3 |</span><br><span class="line">+------+--------+</span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;delete from demo.t4 where a = 3&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;insert into demo.t4 (select max(a)+1,max(a)+1 from demo.t4)&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;update demo.t4 set b = 10&quot;</span></span><br><span class="line">mysql -h 0.0.0.0 -P 12355 -u root -e <span class="string">&quot;SELECT b, sum(a) from demo.t4 GROUP BY b&quot;</span></span><br><span class="line">+------+--------+</span><br><span class="line">| b    | <span class="built_in">sum</span>(a) |</span><br><span class="line">+------+--------+</span><br><span class="line">|   10 |     12 |</span><br><span class="line">+------+--------+</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.<span class="operator">/</span>run<span class="operator">-</span>flink<span class="operator">-</span>bash.sh <span class="operator">/</span>pingcap<span class="operator">/</span>demo<span class="operator">/</span>flink<span class="operator">-</span><span class="keyword">sql</span><span class="operator">-</span>client.sh</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> database demo_hudi;</span><br><span class="line"><span class="operator">&gt;</span></span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t4_agg(</span><br><span class="line"><span class="operator">&gt;</span> c <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span> d <span class="type">BIGINT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/etl4-sink-4/agg&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">&gt;</span></span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode<span class="operator">=</span>TABLEAU;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SET</span> execution.runtime<span class="operator">-</span>mode<span class="operator">=</span><span class="string">&#x27;batch&#x27;</span>;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg;</span><br><span class="line"><span class="number">2023</span><span class="number">-06</span><span class="number">-29</span> <span class="number">07</span>:<span class="number">40</span>:<span class="number">24</span>,<span class="number">347</span> INFO  org.apache.hadoop.conf.Configuration.deprecation             [] <span class="operator">-</span> mapred.job.map.memory.mb <span class="keyword">is</span> deprecated. Instead, use mapreduce.map.memory.mb</span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> c <span class="operator">|</span> d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;delete from demo.t4 where a = 3&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> c <span class="operator">|</span> d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;insert into demo.t4 (select max(a)+1,max(a)+1 from demo.t4)&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg;</span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> c <span class="operator">|</span> d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+---+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t4 set b = 10&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+</span></span><br><span class="line"><span class="operator">|</span>  c <span class="operator">|</span>  d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.t4_agg_stream(</span><br><span class="line"><span class="operator">&gt;</span> c <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span> d <span class="type">BIGINT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/etl4-sink-4/agg&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;read.streaming.enabled&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;read.streaming.check-interval&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode<span class="operator">=</span>TABLEAU;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;delete from demo.t4 where a = 3&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg_stream;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           c <span class="operator">|</span>                    d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>                    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;insert into demo.t4 (select max(a)+1,max(a)+1 from demo.t4)&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg_stream;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           c <span class="operator">|</span>                    d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>                    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span>                    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t4 set b = 10&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg_stream;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           c <span class="operator">|</span>                    d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>                    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span>                    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>                   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t4 set b = 100 where a=4&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.t4_agg_stream;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           c <span class="operator">|</span>                    d <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                    <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                    <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                    <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>                    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span>                    <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">4</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">5</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>                   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span>                    <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>          <span class="number">10</span> <span class="operator">|</span>                    <span class="number">8</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<h2 id="Example5-Consistency-Inner-Join-amp-Aggregation-Materialized-View"><a href="#Example5-Consistency-Inner-Join-amp-Aggregation-Materialized-View" class="headerlink" title="Example5: Consistency Inner Join &amp; Aggregation Materialized View"></a>Example5: Consistency Inner Join &amp; Aggregation Materialized View</h2><p>join &amp; aggregation</p>
<ul>
<li><code>example5/tidb.sql</code></li>
<li><code>example5/flink.sql.template</code></li>
<li>create <code>build</code> table（<code>INSERT ONLY</code>） and <code>prob</code> table</li>
<li>use flink to maintain materialized view about <code>select agg(...) from build inner join prob on ... group by ...</code><ul>
<li>add filed <code>proctime as PROCTIME()</code> to the schema of <code>prob</code> table</li>
<li><code>prob inner join ... FOR SYSTEM_TIME AS OF prob.proctime as build on prob.b = build.b ...)</code>: make <code>prob</code> table always use the latest <code>build</code> table by jdbc connector.</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 0.0.0.0 -P 12355 -u root &lt; example5/tidb.sql</span><br><span class="line"></span><br><span class="line">./setup-demo.py --cmd sink_task --sink_task_desc=<span class="string">&quot;etl5.5.demo.t5&quot;</span> --sink_task_flink_schema_path ./example5/fli</span><br><span class="line">nk.sql.template </span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">.<span class="operator">/</span>run<span class="operator">-</span>flink<span class="operator">-</span>bash.sh</span><br><span class="line"><span class="operator">/</span>pingcap<span class="operator">/</span>demo<span class="operator">/</span>flink<span class="operator">-</span><span class="keyword">sql</span><span class="operator">-</span>client.sh</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">create</span> database demo_hudi;</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">sql</span><span class="operator">-</span>client.execution.result<span class="operator">-</span>mode<span class="operator">=</span>TABLEAU;</span><br><span class="line">[INFO] Session property has been set.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> demo_hudi.test(</span><br><span class="line"><span class="operator">&gt;</span> b <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> ENFORCED,</span><br><span class="line"><span class="operator">&gt;</span> v <span class="type">BIGINT</span></span><br><span class="line"><span class="operator">&gt;</span> ) <span class="keyword">WITH</span> (</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hudi&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;path&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;hdfs://namenode:8020/pingcap/demo/etl5-sink-5/join&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;table.type&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;MERGE_ON_READ&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;read.streaming.enabled&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line"><span class="operator">&gt;</span> <span class="string">&#x27;read.streaming.check-interval&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="operator">&gt;</span> );</span><br><span class="line">[INFO] <span class="keyword">Execute</span> statement succeed.</span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;insert into demo.t5 values (5,3)&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-6</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;delete from demo.t5 where a=1&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;update demo.t5_build set c=100&quot;</span></span><br><span class="line"><span class="comment">-- no change</span></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;insert into demo.t5 values (6,1)&quot;</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                  <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- after &quot;insert into demo.t5 values (7,3)&quot;</span></span><br><span class="line"><span class="comment">-- add 100 to -6 --&gt; 94</span></span><br><span class="line"></span><br><span class="line">Flink <span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_hudi.test;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> op <span class="operator">|</span>           b <span class="operator">|</span>                    v <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                   <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>                   <span class="number">-4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">-6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">-</span>D <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>               (<span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>                  <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">+</span>I <span class="operator">|</span>           <span class="number">3</span> <span class="operator">|</span>                   <span class="number">94</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure>

<h2 id="Integration-Test"><a href="#Integration-Test" class="headerlink" title="Integration Test"></a>Integration Test</h2><p>Process</p>
<ul>
<li>create a table and start to update it continuously</li>
<li>wait for a few seconds and create the etl task to sink the table data into hudi</li>
<li>check data consistency between tidb and hudi</li>
</ul>
<blockquote>
<p>Incremental Consistency Test</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test-consistency.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Incremental Aggregation Consistency Test</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test-consistency-agg.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Incremental Inner Join Aggregation Consistency Test</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test-consistency-join.py</span><br></pre></td></tr></table></figure>

<h2 id="Further-Implementation"><a href="#Further-Implementation" class="headerlink" title="Further Implementation"></a>Further Implementation</h2><p>数据源 <code>exactly-once</code> 一致性：</p>
<ul>
<li>目前 TiCDC 仅提供 <code>at-least-once</code> 级别的数据源输入，以下 2 种典型场景需建立额外的机制来提供 <code>exactly-once</code> 语义：<ul>
<li><a href="https://docs.pingcap.com/tidb/stable/ticdc-sink-to-kafka">同步数据至 Kafka</a>：开启 <code>enable-tidb-extension</code>，下游算子将 <a href="https://docs.pingcap.com/tidb/dev/ticdc-canal-json#watermark-event">TIDB_WATERMARK::watermarkTs</a> 纳入数据源状态，过滤重复数据。<ul>
<li>涉及到多数据流 Join 场景，需要参照 watermarkTs 构建 barrier 并对齐。</li>
</ul>
</li>
<li><a href="https://docs.pingcap.com/tidb/stable/ticdc-sink-to-cloud-storage">同步数据至外部存储</a>：开启 <code>enable-tidb-extension</code>，下游将 <a href="https://docs.pingcap.com/tidb/stable/ticdc-sink-to-cloud-storage#metadata">metadata&#x2F;checkpoint-ts</a> 纳入数据源状态，过滤重复数据。<ul>
<li>涉及到多表关联的场景，建议把相关的表配置在同个 ticdc 同步任务中以便于共享 metadata，需根据 checkpoint-ts 构建 barrier 并对齐。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>目前 Demo 应用依赖外部组件：Flink，Kafka（Zookeeper），Hudi（Hadoop 相关各组件）。需要优化整体架构：</p>
<ul>
<li>Flink 作为一个通用且成熟的流处理平台，外部依赖以及内部运行机制均较为繁重，产品化时需舍弃 Flink<ul>
<li>Java 系产品与其他语言亲和度较弱，不利于当前的 TiDB 社区生态</li>
<li>需要人力去维护和排查 Flink 自身可能带来的问题</li>
<li>TiSpark 之类项目前车之鉴，非与 TiDB 体系紧密耦合的项目终陷入死局</li>
</ul>
</li>
<li>Hudi 依赖 Hadoop 和 Spark 生态体系，产品化时是否需要令外部感知到？是否需要舍弃 Hudi 而是用 TiDB 生态内部的存储系统？</li>
<li>TiDB 体系可结合自身需求，实现轻量级的流式处理框架：<ul>
<li>参考 Flink 的 <a href="#Flink-Checkpointing">Checkpointing</a> 机制实现分布式容错<ul>
<li>类似 Flink 流式状态存储和管理体系，可由 TiKV 提供的分布式 KV 存储和事务体系实现</li>
</ul>
</li>
<li>参考 Flink 实现端到端 <a href="#Flink-Consistency">exactly-once</a> 一致性</li>
<li>构建维护 <a href="#Flink-Incremental-Materialized-View">增量物化视图</a> 的基本原理与上文类似</li>
<li>存量数据和增量数据可以直接在物化视图中分别处理再合并，保证最终结果<a href="#Consistency">线性一致</a></li>
</ul>
</li>
<li>实现轻量级的数据同步流程，去掉对于 Kafka 的依赖<ul>
<li>类 cdc 模块将增量数据持续写入到外部可信任的存储系统中，由使用方控制消费过程（<a href="https://docs.pingcap.com/tidb/stable/ticdc-sink-to-cloud-storage">同步数据到存储服务</a>）<ul>
<li>ticdc 中 <a href="https://docs.pingcap.com/zh/tidb/stable/ticdc-canal-json">Canal-JSON</a> 和 <a href="https://docs.pingcap.com/tidb/stable/ticdc-csv">CSV</a> 两种协议支持当开启 <a href="https://docs.pingcap.com/tidb/stable/ticdc-manage-changefeed#output-the-historical-value-of-a-row-changed-event">Old Value</a> 功能时 (<code>enable-old-value = true</code>)，输出更新事件的旧值。</li>
</ul>
</li>
<li>其他可考虑的方案：侵入式改造 TiDB 的事务模型，按需将 MV 相关的数据和事件纳入到完整的事务流程中，去掉对于 TiCDC，Kafka，Flink 等外部组件的依赖</li>
</ul>
</li>
</ul>
<p>IMV 一致性</p>
<ul>
<li>增量方式维护状态机的关键步骤是感知新旧数据的变化，对于 TiDB 这类满足全局线性一致性事务的系统而言，就是不同 timestamp 下的数据差异</li>
<li>resolved-ts 或者 ticdc 提供的 watermark-ts 可以很自然地作为推进 checkpoint 的 barrier</li>
<li>处理多表或者单表多分区数据时，可以对齐 barrier，并对同个 checkpoint 内的增量数据按照 commit-ts 排序后依次处理<ul>
<li>处理多表 JOIN 时，任一表的改动均需要找出与之关联的其他表数据，并还原出 JOIN 前后的数据变化<ul>
<li>例如 <code>t1 inner join t2 on t1.a = t2.a</code>，t1 在 <code>ts</code> 时刻字段 a 发生改动从 <code>a1</code> 变成 <code>a2</code>。则需要找出 t2 在 <code>ts-1</code> 时刻字段 a 为 <code>a1</code> 的所有数据 <code>p1</code>，执行 <code>a1</code> JOIN <code>p1</code> 操作后得到结果集 <code>j1</code>；找出 t2 在 <code>ts</code> 时刻字段 a 为 <code>a2</code> 的所有数据 <code>p2</code>，执行 <code>a2</code> JOIN <code>p2</code> 操作后得到结果集 <code>j2</code>；<code>j1</code> 和 <code>j2</code> 之间的数据差异才能用于维护增量状态机；</li>
</ul>
</li>
<li>TiDB 体系下可以推迟 GC，然后从原始数据按照 timestamp 回表查询。当回原表造成的开销不大时，这种方式较为简单有效。必要时可以在原表上建索引来优化。</li>
<li>如果不读原表，则需要将表同步到外部系统，该系统需要兼容 TiDB 的事务体系，并支持按照 timestamp 读取。<ul>
<li>对于小表则可直接在内存中维护</li>
<li>可通过建索引或重新分区等方式优化</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>数据存储</p>
<ul>
<li>为了便于兼容云原生架构，需要用兼容云上存储体系的存储系统替换 Hadoop HDFS<ul>
<li><a href="https://github.com/minio/minio">MinIO</a>（基于 AGPL-3.0 协议）是一个轻量级的高性能对象存储系统，兼容 Amazon S3 API。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>PingCAP</category>
      </categories>
      <tags>
        <tag>PingCAP</tag>
        <tag>Database</tag>
        <tag>HTAP</tag>
        <tag>TiDB</tag>
        <tag>Materialized View</tag>
        <tag>Hudi</tag>
        <tag>Flink</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
</search>
